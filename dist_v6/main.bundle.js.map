{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://webgpu/webpack/runtime/async module","webpack://webgpu/./main.ts","webpack://webgpu/./src/collision.ts","webpack://webgpu/./src/inputHandler.ts","webpack://webgpu/./src/objects/camera.ts","webpack://webgpu/./src/objects/light.ts","webpack://webgpu/./src/objects/object.ts","webpack://webgpu/./src/objects/shapes/cube.ts","webpack://webgpu/./src/objects/shapes/shape.ts","webpack://webgpu/./src/objects/shapes/sphere.ts","webpack://webgpu/./src/renderer.ts","webpack://webgpu/./src/shaders/objColorShader.wgsl","webpack://webgpu/./src/shaders/objTextureShader.wgsl","webpack://webgpu/./src/shaders/debugShader.wgsl","webpack://webgpu/./src/shaders/skyboxShader.wgsl","webpack://webgpu/./src/scene.ts","webpack://webgpu/./src/textureAtlas.ts","webpack://webgpu/./node_modules/wgpu-matrix/dist/3.x/wgpu-matrix.module.js","webpack://webgpu/webpack/bootstrap","webpack://webgpu/webpack/runtime/define property getters","webpack://webgpu/webpack/runtime/hasOwnProperty shorthand","webpack://webgpu/webpack/startup"],"sourcesContent":["var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\nvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\nvar resolveQueue = (queue) => {\n\tif(queue && queue.d < 1) {\n\t\tqueue.d = 1;\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\t\tif(dep[webpackQueues]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tqueue.d = 0;\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tresolveQueue(queue);\n\t\t\t}, (e) => {\n\t\t\t\tobj[webpackError] = e;\n\t\t\t\tresolveQueue(queue);\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\tret[webpackQueues] = x => {};\n\tret[webpackExports] = dep;\n\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue;\n\thasAwait && ((queue = []).d = -1);\n\tvar depQueues = new Set();\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = resolve;\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\n\tmodule.exports = promise;\n\tbody((deps) => {\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn;\n\t\tvar getResult = () => (currentDeps.map((d) => {\n\t\t\tif(d[webpackError]) throw d[webpackError];\n\t\t\treturn d[webpackExports];\n\t\t}))\n\t\tvar promise = new Promise((resolve) => {\n\t\t\tfn = () => (resolve(getResult));\n\t\t\tfn.r = 0;\n\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\n\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\n\t\t});\n\t\treturn fn.r ? promise : getResult();\n\t}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));\n\tqueue && queue.d < 0 && (queue.d = 0);\n};","import { Camera, CameraType } from \"./src/objects/camera\";\r\nimport { ControllerDevice, InputHandler } from \"./src/inputHandler\";\r\nimport { Renderer } from \"./src/renderer\";\r\nimport { Scene } from \"./src/scene\";\r\nimport { Cube } from \"./src/objects/shapes/cube\";\r\nimport { Light } from \"./src/objects/light\";\r\nimport { Sphere } from \"./src/objects/shapes/sphere\";\r\nimport { checkCollision } from \"./src/collision\";\r\nimport { TextureAtlas } from \"./src/textureAtlas\";\r\nimport { mat4, vec3 } from \"wgpu-matrix\";\r\n\r\nconst gravitySpan = document.getElementById(\"gravityVal\") as HTMLSpanElement;\r\nconst frictionSpan = document.getElementById(\"frictionVal\") as HTMLSpanElement;\r\nconst angvelSpan = document.getElementById(\"angvelVal\") as HTMLSpanElement;\r\nconst rollSpan = document.getElementById(\"rolldampVal\") as HTMLSpanElement;\r\nconst jumpforceSpan = document.getElementById(\"jumpforceVal\") as HTMLSpanElement;\r\n\r\nconst gameOverTxt = document.getElementById(\"gameover\") as HTMLDivElement;\r\nconst timer = document.getElementById(\"timer\") as HTMLDivElement;\r\n\r\nlet pinned = false;\r\nconst sliders = document.getElementById(\"sliders\") as HTMLDivElement;\r\nconst pinBtn = document.getElementById(\"pin\") as HTMLDivElement;\r\npinBtn.addEventListener(\"click\", () => {\r\n    if (pinned) {\r\n        // sliders.style.top = \"-220px\";\r\n        pinBtn.innerText = \"Pin 📌\";\r\n        pinned = false;\r\n    } else {\r\n        pinBtn.innerText = \"Unpin 📌\";\r\n        pinned = true;\r\n    }\r\n    sliders.classList.toggle(\"pinned\");\r\n})\r\n\r\nlet gravity = -parseFloat((document.getElementById(\"gravity\") as HTMLInputElement).value) - 1;\r\nlet restitutionCoef = 0.3;\r\nlet frictionCoef = parseFloat((document.getElementById(\"friction\") as HTMLInputElement).value) / 30;\r\nlet angularVelocity = parseFloat((document.getElementById(\"angvel\") as HTMLInputElement).value) * 100;\r\nlet rollingDamping = parseFloat((document.getElementById(\"rolldamp\") as HTMLInputElement).value) / 40 + 0.75;\r\nlet jumpForce = parseFloat((document.getElementById(\"jumpforce\") as HTMLInputElement).value);\r\n\r\nlet textureAtlas = new TextureAtlas();\r\nawait textureAtlas.loadImage(\"./objects/2_no_clouds_8k (Medium).jpg\", 1, 1);\r\n\r\nconst canvas = window.document.getElementById(\"canvas\") as HTMLCanvasElement;\r\nconst renderer = new Renderer(canvas);\r\nawait renderer.initialize(textureAtlas, './objects/skybox/');\r\n\r\nconst inputHandler = new InputHandler(canvas);\r\n\r\nasync function main() {\r\n    let stop = false;\r\n    const scene = new Scene();\r\n\r\n    const camera = new Camera({\r\n        name: \"Kamera\",\r\n        id: \"kameraID\",\r\n        position: [0, 7.5, -21],\r\n        rotation: [16, 180, 0],\r\n        cameraType: CameraType.perspective,\r\n        aspectRatio: canvas.width / canvas.height,\r\n        fov: 60,\r\n        near: 0.1,\r\n        far: 300,\r\n    });\r\n\r\n    const sphere = new Sphere({\r\n        name: \"Lopta\",\r\n        id: \"sphereID\",\r\n        position: [0, 3, -9],\r\n        rotation: [0, 0, 0],\r\n        radius: 1,\r\n        texture: {\r\n            atlas: textureAtlas,\r\n            indexX: 0,\r\n            indexY: 0,\r\n        },\r\n        velocity: {\r\n            x: 0,\r\n            y: 0,\r\n            z: 0,\r\n        },\r\n    });\r\n\r\n    const cube = new Cube({\r\n        name: \"Kocka\",\r\n        id: \"kockaID\",\r\n        position: [0, 0, -11],\r\n        rotation: [0, 0, 0],\r\n        lenght: [10, 0.5, 10],\r\n        color: [0.3, 0.5, 0.8, 1],\r\n    });\r\n\r\n    const cube2 = new Cube({\r\n        name: \"Kocka\",\r\n        id: \"kockaID\",\r\n        position: [0, 0, 15],\r\n        rotation: [0, 0, 0],\r\n        lenght: [10, 0.5, 10],\r\n        color: [0.3, 0.5, 0.8, 1],\r\n    });\r\n\r\n    const cube3 = new Cube({\r\n        name: \"Kocka\",\r\n        id: \"kockaID\",\r\n        position: [15, -2, 8],\r\n        rotation: [0, 0, 0],\r\n        lenght: [10, 0.5, 15],\r\n        color: [0.3, 0.5, 0.8, 1],\r\n    });\r\n\r\n    const cube4 = new Cube({\r\n        name: \"Kocka\",\r\n        id: \"kockaID\",\r\n        position: [0, 7, 27],\r\n        rotation: [-45, 0, 0],\r\n        lenght: [10, 0.5, 20],\r\n        color: [0.3, 0.5, 0.8, 1],\r\n    });\r\n\r\n    const cube5 = new Cube({\r\n        name: \"Kocka\",\r\n        id: \"kockaID\",\r\n        position: [0, 14, 41],\r\n        rotation: [0, 0, 0],\r\n        lenght: [20, 0.5, 10],\r\n        color: [0.3, 0.5, 0.8, 1],\r\n    });\r\n\r\n    const cube6 = new Cube({\r\n        name: \"Kocka\",\r\n        id: \"kockaID\",\r\n        position: [-17, 9, 41],\r\n        rotation: [0, 0, -20],\r\n        lenght: [10, 0.2, 10],\r\n        color: [0.3, 0.5, 0.8, 1],\r\n    });\r\n\r\n    const cube7 = new Cube({\r\n        name: \"Kocka\",\r\n        id: \"kockaID\",\r\n        position: [0, -2, 35],\r\n        rotation: [-15, 0, 0],\r\n        lenght: [10, 0.5, 25],\r\n        color: [0.3, 0.5, 0.8, 1],\r\n    });\r\n\r\n    const cube8 = new Cube({\r\n        name: \"Kocka\",\r\n        id: \"kockaID\",\r\n        position: [0, -10, 10],\r\n        rotation: [-8, 0, 0],\r\n        lenght: [2.5, 0.2, 25],\r\n        color: [0.3, 0.5, 0.8, 1],\r\n    });\r\n\r\n    const cube9 = new Cube({\r\n        name: \"Kocka\",\r\n        id: \"kockaID\",\r\n        position: [-5, -10, 0],\r\n        rotation: [8, 0, 0],\r\n        lenght: [2.5, 0.2, 10],\r\n        color: [0.3, 0.5, 0.8, 1],\r\n    });\r\n\r\n    const cube10 = new Cube({\r\n        name: \"Kocka\",\r\n        id: \"kockaID\",\r\n        position: [-4, -8, -15],\r\n        rotation: [0, 0, 0],\r\n        lenght: [6, 2, 6],\r\n        color: [0.3, 0.5, 0.8, 1],\r\n    });\r\n\r\n    const cube11 = new Cube({\r\n        name: \"Kocka\",\r\n        id: \"kockaID\",\r\n        position: [4, -5, -24],\r\n        rotation: [0, 0, 0],\r\n        lenght: [6, 2, 6],\r\n        color: [0.3, 0.5, 0.8, 1],\r\n    });\r\n\r\n    const cube12 = new Cube({\r\n        name: \"Kocka\",\r\n        id: \"kockaID\",\r\n        position: [14, -1, -15],\r\n        rotation: [0, 0, 0],\r\n        lenght: [6, 1, 6],\r\n        color: [0.3, 0.5, 0.8, 1],\r\n    });\r\n\r\n    const light = new Light({\r\n        name: \"Svijetlo\",\r\n        id: \"svijetloID\",\r\n        position: [0, 0, 0],\r\n        rotation: [0.3, -0.7, 0.2],\r\n    });\r\n\r\n    scene.setCamera(camera);\r\n    scene.setLight(light);\r\n    scene.addShapes(cube, cube2, cube3, cube4, cube5, cube6, cube7, cube8, cube9, cube10, cube11, cube12, sphere);\r\n\r\n    sphere.attach(camera);\r\n\r\n    const REST_VELOCITY_THRESHOLD = 0.005;\r\n    let fixedDeltaTime = 1 / 60; // seconds\r\n    let timerTime = 0;\r\n    let lastTime = 0;\r\n    let grounded = false;\r\n    let gameOver = false;\r\n    let retry = false;\r\n    let platformNumber = 12;\r\n    return new Promise<void>((resolve) => {\r\n        let render = (time: number) => {\r\n            updateCoefficients();\r\n            updateSpans();\r\n\r\n            if (platformNumber > 0) {\r\n                timerTime += fixedDeltaTime;\r\n                timer.innerText = `${timerTime.toFixed(2)} s`;\r\n            }\r\n            if (platformNumber == 0 && gameOver == false) {\r\n                retry = true;\r\n                gameOverTxt.innerHTML = \"Nice time!<br>\" + timerTime.toFixed(2) + \" s<br>Press R to reset\";\r\n            }\r\n\r\n            let deltaTime = (time - lastTime) / 1000; // seconds\r\n            lastTime = time;\r\n\r\n            let reset = inputHandler.control(sphere, grounded, 1, angularVelocity, jumpForce, fixedDeltaTime, ControllerDevice.keyboard);\r\n            if (reset && !gameOver || reset && retry) {\r\n                stop = true;\r\n            }\r\n            grounded = false;\r\n\r\n            scene.shapes.forEach((obj) => {\r\n                if (obj instanceof Cube) {\r\n                    let collision = checkCollision(sphere, obj);\r\n                    if (collision !== undefined) {\r\n                        if (obj.color[0] != 0 && obj.color[1] != 0.8 && obj.color[2] != 0.2) {\r\n                            obj.color.set([0, 0.8, 0.2]);\r\n                            platformNumber -= 1;\r\n                        }\r\n                        // Normal of collision\r\n                        let ballCollisionNormal = sphere.getNormal(collision.res[0], collision.res[1], collision.res[2]);\r\n                        let cubeCollisionNormal = vec3.negate(ballCollisionNormal);\r\n\r\n                        if (cubeCollisionNormal[1] > 0) {\r\n                            grounded = true;\r\n                        }\r\n\r\n                        // Calculate velocity based on angular velocity\r\n                        let contactOffset = vec3.scale(ballCollisionNormal, -sphere.getRadius() * 100);\r\n                        let rollingVelocity = vec3.cross(contactOffset, sphere.angularVelocity);\r\n                        sphere.velocity = vec3.lerp(sphere.velocity, rollingVelocity, frictionCoef);\r\n                        sphere.angularVelocity = vec3.scale(sphere.angularVelocity, rollingDamping);\r\n\r\n                        // Reposition the sphere to resolve penetration\r\n                        let reposVector = vec3.scale(cubeCollisionNormal, collision.ratio * sphere.getRadius());\r\n                        sphere.globalMove(reposVector[0], reposVector[1], reposVector[2]);\r\n\r\n                        // Calculate the velocity along the normal\r\n                        const vnDot = vec3.dot(sphere.velocity, cubeCollisionNormal);\r\n\r\n                        // Decide how bouncy to be based on impact speed\r\n                        let currentRestitution = restitutionCoef;\r\n                        if (Math.abs(vnDot) < REST_VELOCITY_THRESHOLD) {\r\n                            currentRestitution = 0; // If speed is low, kill the bounce entirely\r\n                        }\r\n                        // Calculate and apply the restitution impulse\r\n                        if (vnDot < 0) { // Only apply restitution if velocities are directed towards each other\r\n                            let scaledNormal = vec3.scale(cubeCollisionNormal, (1 + currentRestitution) * vnDot);\r\n                            sphere.velocity = vec3.subtract(sphere.velocity, scaledNormal);\r\n                        }\r\n\r\n                    }\r\n                }\r\n            });\r\n\r\n            // Calculate gravity\r\n            sphere.addForce(0, gravity * fixedDeltaTime, 0);\r\n\r\n            sphere.globalMove(sphere.velocity[0] * fixedDeltaTime, sphere.velocity[1] * fixedDeltaTime, sphere.velocity[2] * fixedDeltaTime);\r\n            sphere.globalRotate(-sphere.angularVelocity[0] * sphere.getRadius() * 100, 0, -sphere.angularVelocity[2] * sphere.getRadius() * 100);\r\n\r\n            if (sphere.position[1] < -15 && gameOver == false && !retry) {\r\n                gameOver = true;\r\n                let count = 3;\r\n                const interval = setInterval(() => {\r\n                    if (count > 0) {\r\n                        gameOverTxt.innerHTML = `Game over<br>Respawning in ${count}`;\r\n                    } else {\r\n                        clearInterval(interval);\r\n                        stop = true;\r\n                        return;\r\n                    }\r\n                    count -= 1;\r\n                }, 1000);\r\n            }\r\n            renderer.render(scene);\r\n            if (!stop)\r\n                requestAnimationFrame(render);\r\n            else\r\n                resolve();\r\n        }\r\n        requestAnimationFrame(render);\r\n    });\r\n}\r\n\r\nfunction updateCoefficients() {\r\n    gravity = -parseFloat((document.getElementById(\"gravity\") as HTMLInputElement).value) - 1;\r\n    frictionCoef = parseFloat((document.getElementById(\"friction\") as HTMLInputElement).value) / 40;\r\n    angularVelocity = parseFloat((document.getElementById(\"angvel\") as HTMLInputElement).value) * 100;\r\n    rollingDamping = parseFloat((document.getElementById(\"rolldamp\") as HTMLInputElement).value) / 40 + 0.75;\r\n    jumpForce = parseFloat((document.getElementById(\"jumpforce\") as HTMLInputElement).value) * 100;\r\n}\r\n\r\nfunction updateSpans() {\r\n    gravitySpan.textContent = gravity.toString();\r\n    frictionSpan.textContent = frictionCoef.toFixed(3);\r\n    angvelSpan.textContent = angularVelocity.toString();\r\n    rollSpan.textContent = rollingDamping.toFixed(3);\r\n    jumpforceSpan.textContent = jumpForce.toString();\r\n}\r\n\r\nasync function start() {\r\n    while (true) {\r\n        gameOverTxt.innerHTML = \"\";\r\n        await main();\r\n    }\r\n}\r\n\r\nstart();","import { mat4, vec3 } from \"wgpu-matrix\";\r\nimport { Cube } from \"./objects/shapes/cube\";\r\nimport { Sphere } from \"./objects/shapes/sphere\";\r\n\r\n\r\nexport function checkCollision(sphere: Sphere, cube: Cube) {\r\n    \r\n    // Pretvorba sfere u lokalni koordinatni sustav kocke\r\n    const localSpherePosition = vec3.subtract(sphere.position, cube.position);\r\n    const inverseRotationMatrix = mat4.transpose(cube.getRotationMatrix());\r\n    const spherePosLocal = vec3.transformMat4(localSpherePosition, inverseRotationMatrix);\r\n\r\n    // Najbliza tocka sudara\r\n    const closestX = Math.max(-cube.getLength()[0] / 2, Math.min(spherePosLocal[0], cube.getLength()[0] / 2));\r\n    const closestY = Math.max(-cube.getLength()[1] / 2, Math.min(spherePosLocal[1], cube.getLength()[1] / 2));\r\n    const closestZ = Math.max(-cube.getLength()[2] / 2, Math.min(spherePosLocal[2], cube.getLength()[2] / 2));\r\n\r\n    // Udaljenost najblize tocke i sfere\r\n    const dx = spherePosLocal[0] - closestX;\r\n    const dy = spherePosLocal[1] - closestY;\r\n    const dz = spherePosLocal[2] - closestZ;\r\n    const distanceSquared = dx * dx + dy * dy + dz * dz;\r\n\r\n    // Ako je udaljenost manja od radijusa, onda je sudar\r\n    if (distanceSquared <= sphere.getRadius() * sphere.getRadius()) {\r\n        let res = new Float32Array([closestX, closestY, closestZ]);\r\n        let outMat = mat4.multiply(cube.getPositionMatrix(), cube.getRotationMatrix());\r\n        res = vec3.transformMat4(res, outMat);\r\n        return {\r\n            res: res,\r\n            ratio: (sphere.getRadius() - Math.sqrt(distanceSquared)) / sphere.getRadius(),\r\n        }\r\n    } \r\n    return undefined;\r\n}","import { rotate } from \"mathjs\";\r\nimport { IObject } from \"./interfaces/IObject\";\r\nimport { Object } from \"./objects/object\";\r\nimport { Vec3 } from \"wgpu-matrix\";\r\n\r\nexport enum ControllerDevice {\r\n    mouse,\r\n    keyboard\r\n}\r\n\r\nexport class InputHandler {\r\n    private canvas: HTMLCanvasElement;\r\n    private keysPressed: Map<String, boolean>;\r\n    private keyPress: Set<String>;\r\n\r\n    private mouseDeltaX: number;\r\n    private mouseDeltaY: number;\r\n    private mouseScrollDelta: number;\r\n\r\n    private leftMouseDown: boolean;\r\n    private middleMouseDown: boolean;\r\n    private rightMouseDown: boolean;\r\n\r\n    constructor(canvas: HTMLCanvasElement) {\r\n        this.canvas = canvas;\r\n        this.keysPressed = new Map();\r\n        this.keyPress = new Set();\r\n\r\n        this.mouseDeltaX = 0;\r\n        this.mouseDeltaY = 0;\r\n        this.mouseScrollDelta = 0;\r\n\r\n        this.leftMouseDown = false;\r\n        this.middleMouseDown = false;\r\n        this.rightMouseDown = false;\r\n        this.listen();\r\n    }\r\n\r\n    public listen = () => {\r\n        this.canvas.addEventListener('contextmenu', (e) => e.preventDefault());\r\n\r\n        window.addEventListener(\"keydown\", (e) => this.keysPressed.set(e.key, true));\r\n        window.addEventListener(\"keyup\", (e) => this.keysPressed.set(e.key, false));\r\n\r\n        this.canvas.style.touchAction = 'pinch-zoom';\r\n        this.canvas.addEventListener('mousedown', (e) => {\r\n            switch (e.button) {\r\n                case 0:\r\n                    this.leftMouseDown = true;\r\n                    break;\r\n                case 1:\r\n                    this.middleMouseDown = true;\r\n                    break;\r\n                case 2:\r\n                    this.rightMouseDown = true;\r\n                    break;\r\n            }\r\n        });\r\n        this.canvas.addEventListener('mouseup', (e) => {\r\n            switch (e.button) {\r\n                case 0:\r\n                    this.leftMouseDown = false;\r\n                case 1:\r\n                    this.middleMouseDown = false;\r\n                case 2:\r\n                    this.rightMouseDown = false;\r\n            }\r\n        });\r\n        this.canvas.addEventListener('pointermove', (e) => {\r\n            if (this.leftMouseDown || this.middleMouseDown || this.rightMouseDown) {\r\n                this.mouseDeltaX += e.movementX;\r\n                this.mouseDeltaY += e.movementY;\r\n            }\r\n        });\r\n        this.canvas.addEventListener('wheel', (e) => {\r\n            this.mouseScrollDelta += e.deltaY;\r\n        })\r\n    }\r\n\r\n    public getKeysPressed() {\r\n        return this.keysPressed;\r\n    }\r\n\r\n    public getKeyPress() {\r\n        return this.keyPress;\r\n    }\r\n\r\n    public getMouseMovement = () => {\r\n        let output = [this.mouseDeltaX, this.mouseDeltaY, this.mouseScrollDelta]\r\n        this.mouseDeltaX = 0;\r\n        this.mouseDeltaY = 0;\r\n        this.mouseScrollDelta = 0;\r\n        return output;\r\n    }\r\n\r\n    public control(object: Object, grounded: boolean, moveSpeed: number, rotateSpeed: number, jumpForce: number, deltaTime: number, device: ControllerDevice) {\r\n        let reset = false;\r\n        if (device == ControllerDevice.keyboard) {\r\n            let keyPressed = this.getKeysPressed();\r\n            keyPressed.forEach((val, key) => {\r\n                if (!val) return;\r\n                switch (key) {\r\n                    case 'a':\r\n                        object.globalRotate(0, 100 * deltaTime, 0);\r\n                        break;\r\n                    case 'd':\r\n                        object.globalRotate(0, -100 * deltaTime, 0);\r\n                        break;\r\n                    case 'w':\r\n                        object.rotateRelative('x', -rotateSpeed * deltaTime);\r\n                        break;\r\n                    case 's':\r\n                        object.rotateRelative('x', rotateSpeed * deltaTime);\r\n                        break;\r\n                    case 'q':\r\n                        object.rotateRelative('z', rotateSpeed * deltaTime);\r\n                        break;\r\n                    case 'e':\r\n                        object.rotateRelative('z', -rotateSpeed * deltaTime);\r\n                        break;\r\n                    case ' ':\r\n                        if (grounded)\r\n                            object.addForce(0, jumpForce * deltaTime, 0);\r\n                        break;\r\n                    case 'r':\r\n                        reset = true;\r\n                        break;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (device == ControllerDevice.mouse) {\r\n            let mouseMove = this.getMouseMovement();\r\n            if (this.leftMouseDown) {\r\n                object.globalMove(0, mouseMove[1] * deltaTime * -moveSpeed, 0);\r\n                object.localMove(mouseMove[0] * deltaTime * -moveSpeed, 0, 0);\r\n            }\r\n            else if (this.rightMouseDown) {\r\n                object.globalRotate(mouseMove[1] * deltaTime * rotateSpeed, mouseMove[0] * deltaTime * rotateSpeed, 0);\r\n            }\r\n            else if (this.middleMouseDown) {\r\n                object.globalRotate(0, 0, mouseMove[0] * deltaTime * rotateSpeed);\r\n            }\r\n            object.localMove(0, 0, mouseMove[2] * deltaTime * -moveSpeed);\r\n        }\r\n        return reset;\r\n    }\r\n\r\n    public forceControl(moveAccel: number, rotateAccel: number, objVelocity: Vec3, objAngularVelocity: Vec3, deltaTime: number) {\r\n        let used = false;\r\n        let keyPressed = this.getKeysPressed();\r\n        keyPressed.forEach((val, key) => {\r\n            if (!val) return;\r\n            used = true;\r\n            switch (key) {\r\n                case 'a':\r\n                    // object.globalRotate(0, rotateSpeed * deltaTime, 0);\r\n                    break;\r\n                case 'd':\r\n                    // object.globalRotate(0, -rotateSpeed * deltaTime, 0);\r\n                    break;\r\n                case 'w':\r\n                    // object.rotateAroundChild('x', -rotateSpeed * deltaTime);\r\n                    objAngularVelocity[0] += rotateAccel * deltaTime;\r\n                    break;\r\n                case 's':\r\n                    // object.rotateAroundChild('x', rotateSpeed * deltaTime);\r\n                    objAngularVelocity[0] -= rotateAccel * deltaTime;\r\n                    break;\r\n                case 'q':\r\n                    // object.rotateAroundChild('z', rotateSpeed * deltaTime);\r\n                    objAngularVelocity[2] += rotateAccel * deltaTime;\r\n                    break;\r\n                case 'e':\r\n                    // object.rotateAroundChild('z', -rotateSpeed * deltaTime);\r\n                    objAngularVelocity[2] -= rotateAccel * deltaTime;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return used;\r\n    }\r\n}","import { vec3, mat4, Mat4, Vec3, Vec4 } from \"wgpu-matrix\";\r\nimport { Object, ObjectDescriptor } from \"./object\";\r\n\r\nexport enum CameraType {\r\n    perspective,\r\n}\r\n\r\nexport interface CameraDescriptor extends ObjectDescriptor {\r\n    cameraType: CameraType;\r\n    aspectRatio: number;\r\n    fov?: number;\r\n    near?: number;\r\n    far?: number;\r\n}\r\n\r\nexport class Camera extends Object {\r\n    public type: CameraType;\r\n    public fov: number;\r\n    public near: number;\r\n    public far: number;\r\n    public aspectRatio: number;\r\n\r\nprivate projectionMatrix: Float32Array;\r\n\r\n    constructor(cameraDescriptor: CameraDescriptor) {\r\n        super(cameraDescriptor);\r\n\r\n        this.aspectRatio = cameraDescriptor.aspectRatio;\r\n        this.type = cameraDescriptor.cameraType;\r\n        this.fov = Math.PI / 3;\r\n        this.near = 0.1;\r\n        this.far = 100;\r\n        this.projectionMatrix = mat4.perspective(this.fov, this.aspectRatio, this.near, this.far);\r\n    }\r\n\r\n    public getData() {\r\n        let cameraWorldMatrix = mat4.multiply(this.positionMatrix, this.rotationMatrix);\r\n        let cameraViewMatrix = mat4.inverse(cameraWorldMatrix);\r\n        // return mat4.multiply(this.projectionMatrix, cameraViewMatrix);\r\n        return {\r\n            projection: this.projectionMatrix,\r\n            camera: cameraViewMatrix \r\n        }\r\n    }\r\n}","import { vec3 } from \"wgpu-matrix\";\r\nimport { Object, ObjectDescriptor } from \"./object\";\r\n\r\nexport class Light extends Object{\r\n    constructor(lightDescriptor: ObjectDescriptor){\r\n        super(lightDescriptor);\r\n    }\r\n\r\n    public localRotate = (degX: number, degY: number, degZ: number) => {\r\n        vec3.rotateX(this.rotation, vec3.zero(), degX * 180 / Math.PI, this.rotation);\r\n        vec3.rotateY(this.rotation, vec3.zero(), degY * 180 / Math.PI, this.rotation);\r\n        vec3.rotateZ(this.rotation, vec3.zero(), degZ * 180 / Math.PI, this.rotation);\r\n    };\r\n\r\n    public getData() {\r\n        return this.rotation;\r\n    }\r\n};","import { mat4, Mat4, Vec3, vec3 } from \"wgpu-matrix\";\r\nimport { IObject } from \"../interfaces/IObject\";\r\nimport { FixedFloat32Array } from \"../containers/fixedFloat32Array\";\r\n\r\nexport interface LockAxisDescriptor {\r\n    x: boolean;\r\n    y: boolean;\r\n    z: boolean;\r\n}\r\n\r\nexport interface VelocityDescriptor {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n}\r\n\r\nexport interface ObjectDescriptor {\r\n    name: string;\r\n    id: string;\r\n    position: [number, number, number];\r\n    rotation: [number, number, number];\r\n    lockAxis?: LockAxisDescriptor;\r\n    velocity?: VelocityDescriptor;\r\n    angularVelocity?: VelocityDescriptor;\r\n    mass?: number;\r\n}\r\n\r\nexport class Object implements IObject {\r\n    public name: string;\r\n    public id: string;\r\n    public position: Float32Array;\r\n    public rotation: Float32Array;\r\n    protected positionMatrix: Mat4;\r\n    public rotationMatrix: Mat4;\r\n    protected rotationMatrixX: Mat4;\r\n    protected rotationMatrixY: Mat4;\r\n    protected rotationMatrixZ: Mat4;\r\n    protected right: Float32Array;\r\n    protected up: Float32Array;\r\n    protected back: Float32Array;\r\n\r\n    protected lockAxis: LockAxisDescriptor;\r\n\r\n    public yaw: number;\r\n    public pitch: number;\r\n    public roll: number;\r\n\r\n    public parent?: Object;\r\n    public child?: Object;\r\n\r\n    public velocity: Vec3;\r\n    public angularVelocity: Vec3;\r\n\r\n    constructor(objectDescriptor: ObjectDescriptor) {\r\n        this.name = objectDescriptor.name;\r\n        this.id = objectDescriptor.id;\r\n        this.rotation = new Float32Array(objectDescriptor.rotation);\r\n\r\n        this.positionMatrix = mat4.translate(mat4.identity(), objectDescriptor.position);\r\n        this.position = new Float32Array(this.positionMatrix.buffer, 4 * 12, 3)\r\n\r\n        this.rotationMatrix = mat4.rotateX(mat4.identity(), this.rotation[0] * Math.PI / 180);\r\n        this.rotationMatrix = mat4.rotateY(this.rotationMatrix, this.rotation[1] * Math.PI / 180);\r\n        this.rotationMatrix = mat4.rotateZ(this.rotationMatrix, this.rotation[2] * Math.PI / 180);\r\n        this.rotationMatrixX = mat4.rotateX(mat4.identity(), this.rotation[0] * Math.PI / 180);\r\n        this.rotationMatrixY = mat4.rotateY(mat4.identity(), this.rotation[1] * Math.PI / 180);\r\n        this.rotationMatrixZ = mat4.rotateZ(mat4.identity(), this.rotation[2] * Math.PI / 180);\r\n\r\n        // Vec x\r\n        this.right = new Float32Array(this.rotationMatrix.buffer, 4 * 0, 3);\r\n        // Vec y\r\n        this.up = new Float32Array(this.rotationMatrix.buffer, 4 * 4, 3);\r\n        // Vec z\r\n        this.back = new Float32Array(this.rotationMatrix.buffer, 4 * 8, 3);\r\n\r\n        if (objectDescriptor.lockAxis !== undefined) {\r\n            this.lockAxis = objectDescriptor.lockAxis;\r\n        } else {\r\n            this.lockAxis = { x: false, y: false, z: false }\r\n        }\r\n\r\n        if (objectDescriptor.velocity !== undefined) {\r\n            this.velocity = vec3.create(objectDescriptor.velocity.x, objectDescriptor.velocity.y, objectDescriptor.velocity.z)\r\n        } else {\r\n            this.velocity = vec3.create(0, 0, 0);\r\n        }\r\n\r\n        if (objectDescriptor.angularVelocity !== undefined) {\r\n            this.angularVelocity = vec3.create(objectDescriptor.angularVelocity.x, objectDescriptor.angularVelocity.y, objectDescriptor.angularVelocity.z)\r\n        } else {\r\n            this.angularVelocity = vec3.create(0, 0, 0);\r\n        }\r\n\r\n        this.yaw = Math.atan2(this.back[0], this.back[2]);\r\n        this.pitch = -Math.asin(this.back[1]);\r\n        this.roll = Math.atan2(-this.up[0], this.right[0]);\r\n    }\r\n\r\n    public localMove(x: number, y: number, z: number): void {\r\n        let relativeDirection = vec3.create(0, 0, 0);\r\n        relativeDirection = vec3.addScaled(relativeDirection, this.right, x);\r\n        relativeDirection = vec3.addScaled(relativeDirection, this.up, y);\r\n        relativeDirection = vec3.addScaled(relativeDirection, this.back, z);\r\n        mat4.translate(this.positionMatrix, relativeDirection, this.positionMatrix);\r\n\r\n        if (this.child !== undefined) {\r\n            mat4.translate(this.child.positionMatrix, relativeDirection, this.child.positionMatrix);\r\n        }\r\n    }\r\n\r\n    public globalMove(x: number, y: number, z: number): void {\r\n        mat4.translate(this.positionMatrix, [x, y, z], this.positionMatrix);\r\n        if (this.child !== undefined) {\r\n            mat4.translate(this.child.positionMatrix, [x, y, z], this.child.positionMatrix);\r\n        }\r\n    }\r\n\r\n    public localRotate(x: number, y: number, z: number): void {\r\n        if (!this.lockAxis.x) {\r\n            this.pitch += x * Math.PI / 180;\r\n            mat4.rotateX(this.rotationMatrixX, x * Math.PI / 180, this.rotationMatrixX);\r\n            mat4.rotateX(this.rotationMatrix, x * Math.PI / 180, this.rotationMatrix);\r\n        }\r\n        if (!this.lockAxis.y) {\r\n            this.yaw += y * Math.PI / 180;\r\n            mat4.rotateY(this.rotationMatrixY, y * Math.PI / 180, this.rotationMatrixY);\r\n            mat4.rotateY(this.rotationMatrix, y * Math.PI / 180, this.rotationMatrix);\r\n        }\r\n        if (!this.lockAxis.z) {\r\n            this.roll += z * Math.PI / 180;\r\n            mat4.rotateZ(this.rotationMatrixZ, z * Math.PI / 180, this.rotationMatrixZ);\r\n            mat4.rotateZ(this.rotationMatrix, z * Math.PI / 180, this.rotationMatrix);\r\n        }\r\n    }\r\n\r\n    public globalRotate(x: number, y: number, z: number): void {\r\n        if (!this.lockAxis.x && x != 0) {\r\n            this.pitch += x * Math.PI / 180;\r\n            let rotationMatrixX = mat4.rotationX(x * Math.PI / 180);\r\n            this.rotationMatrix = mat4.multiply(rotationMatrixX, this.rotationMatrix);\r\n            this.rotationMatrixX = mat4.multiply(rotationMatrixX, this.rotationMatrixX);\r\n        }\r\n        if (!this.lockAxis.y && y != 0) {\r\n            this.yaw += y * Math.PI / 180;\r\n            let rotationMatrixY = mat4.rotationY(y * Math.PI / 180);\r\n            this.rotationMatrix = mat4.multiply(rotationMatrixY, this.rotationMatrix);\r\n            this.rotationMatrixY = mat4.multiply(rotationMatrixY, this.rotationMatrixY);\r\n            // Napravljeno zbog kamere\r\n            if (this.child !== undefined) {\r\n                this.child.yaw += y * Math.PI / 180;\r\n                let childPos = new Float32Array([this.child.position[0], this.position[1], this.child.position[2]]);\r\n                let radius = vec3.distance(this.position, childPos);\r\n                let childBack = new Float32Array(this.child.rotationMatrix.buffer, 4 * 8, 3);\r\n                let angle = -y * Math.PI / 180 + this.angleBetween(new Float32Array([1, 0]), new Float32Array([childBack[0], childBack[2]]));\r\n\r\n                this.child.position[0] = radius * Math.cos(angle) + this.position[0];\r\n                this.child.position[2] = radius * Math.sin(angle) + this.position[2];\r\n\r\n                this.child.rotationMatrix = mat4.multiply(rotationMatrixY, this.child.rotationMatrix);\r\n                this.child.rotationMatrixY = mat4.multiply(rotationMatrixY, this.child.rotationMatrixY);\r\n            }\r\n        }\r\n        if (!this.lockAxis.z && z != 0) {\r\n            this.roll += z * Math.PI / 180;\r\n            let rotationMatrixZ = mat4.rotationZ(z * Math.PI / 180);\r\n            this.rotationMatrix = mat4.multiply(rotationMatrixZ, this.rotationMatrix);\r\n            this.rotationMatrixZ = mat4.multiply(rotationMatrixZ, this.rotationMatrixZ);\r\n        }\r\n\r\n        this.recalculateAngles();\r\n    }\r\n\r\n    public rotateRelative(childAxis: 'x' | 'y' | 'z', amount: number): void {\r\n        if (this.child !== undefined) {\r\n            // let rotation: Float32Array = new Float32Array(3);\r\n            if (childAxis == 'x') {\r\n                let right = new Float32Array(this.child.rotationMatrix.buffer, 4 * 0, 3);\r\n                // rotation = mat4.axisRotation(right, amount * Math.PI / 180);\r\n                // this.angularVelocity = vec3.add(this.angularVelocity, vec3.scale(right, -amount * Math.PI / 180));\r\n                this.angularVelocity = vec3.lerp(this.angularVelocity, vec3.scale(right, -amount * Math.PI / 180), 0.1);\r\n            } else if (childAxis == 'y') {\r\n                let up = new Float32Array(this.child.rotationMatrix.buffer, 4 * 4, 3);\r\n                // rotation = mat4.axisRotation(up, amount * Math.PI / 180);\r\n                // this.angularVelocity = vec3.add(this.angularVelocity, vec3.scale(up, -amount * Math.PI / 180));\r\n                this.angularVelocity = vec3.lerp(this.angularVelocity, vec3.scale(up, -amount * Math.PI / 180), 0.1);\r\n            } else {\r\n                let back = new Float32Array(this.child.rotationMatrix.buffer, 4 * 8, 3);\r\n                // rotation = mat4.axisRotation(back, amount * Math.PI / 180);\r\n                // this.angularVelocity = vec3.add(this.angularVelocity, vec3.scale(back, -amount * Math.PI / 180));\r\n                this.angularVelocity = vec3.lerp(this.angularVelocity, vec3.scale(back, -amount * Math.PI / 180), 0.1);\r\n            }\r\n            // this.rotationMatrix = mat4.multiply(rotation, this.rotationMatrix);\r\n        }\r\n\r\n    }\r\n\r\n    public addForce(x: number, y: number, z: number): void {\r\n        vec3.add(this.velocity, [x, y, z], this.velocity);\r\n    }\r\n\r\n    public addLocalForce(x: number, y: number, z: number): void {\r\n        let relativeDirection = vec3.create(0, 0, 0);\r\n        relativeDirection = vec3.addScaled(relativeDirection, this.right, x);\r\n        relativeDirection = vec3.addScaled(relativeDirection, this.up, y);\r\n        relativeDirection = vec3.addScaled(relativeDirection, this.back, z);\r\n        vec3.add(this.velocity, relativeDirection, this.velocity);\r\n    }\r\n\r\n    public addRelativeAngularForce(childAxis: 'x' | 'y' | 'z', amount: number) {\r\n        if (this.child !== undefined) {\r\n            if (childAxis == 'x') {\r\n                let right = new Float32Array(this.child.rotationMatrix.buffer, 4 * 0, 3);\r\n                vec3.add(this.angularVelocity, vec3.mulScalar(right, amount), this.angularVelocity);\r\n            } else if (childAxis == 'y') {\r\n                let up = new Float32Array(this.child.rotationMatrix.buffer, 4 * 4, 3);\r\n                vec3.add(this.angularVelocity, vec3.mulScalar(up, amount), this.angularVelocity);\r\n            } else {\r\n                let back = new Float32Array(this.child.rotationMatrix.buffer, 4 * 8, 3);\r\n                vec3.add(this.angularVelocity, vec3.mulScalar(back, amount), this.angularVelocity);\r\n            }\r\n        }\r\n    }\r\n\r\n    public addRelativeTorque(childAxis: 'x' | 'y' | 'z', amount: number, mass: number, radius: number, deltaTime: number) {\r\n        if (this.child !== undefined) {\r\n            const MAX_ANGULAR_ACCEL = 600;\r\n            let I = (2 / 5) * mass * radius * radius;\r\n            if (childAxis == 'x') {\r\n                let right = new Float32Array(this.child.rotationMatrix.buffer, 4 * 0, 3);\r\n                let torqueVec = vec3.scale(right, amount);\r\n                let angularAcc = vec3.scale(torqueVec, 1 / I);\r\n                if (vec3.len(angularAcc) > MAX_ANGULAR_ACCEL) {\r\n                    angularAcc = vec3.scale(angularAcc, MAX_ANGULAR_ACCEL / vec3.len(angularAcc));\r\n                }\r\n                let deltaOmega = vec3.scale(angularAcc, deltaTime);\r\n                this.angularVelocity = vec3.add(this.angularVelocity, deltaOmega);\r\n                // vec3.add(this.angularVelocity, vec3.mulScalar(right, amount), this.angularVelocity);\r\n            } else if (childAxis == 'y') {\r\n                let up = new Float32Array(this.child.rotationMatrix.buffer, 4 * 4, 3);\r\n                let torqueVec = vec3.scale(up, amount);\r\n                let angularAcc = vec3.scale(torqueVec, 1 / I);\r\n                if (vec3.len(angularAcc) > MAX_ANGULAR_ACCEL) {\r\n                    angularAcc = vec3.scale(angularAcc, MAX_ANGULAR_ACCEL / vec3.len(angularAcc));\r\n                }\r\n                let deltaOmega = vec3.scale(angularAcc, deltaTime);\r\n                this.angularVelocity = vec3.add(this.angularVelocity, deltaOmega);\r\n                // vec3.add(this.angularVelocity, vec3.mulScalar(up, amount), this.angularVelocity);\r\n            } else {\r\n                let back = new Float32Array(this.child.rotationMatrix.buffer, 4 * 8, 3);\r\n                let torqueVec = vec3.scale(back, amount);\r\n                let angularAcc = vec3.scale(torqueVec, 1 / I);\r\n                if (vec3.len(angularAcc) > MAX_ANGULAR_ACCEL) {\r\n                    angularAcc = vec3.scale(angularAcc, MAX_ANGULAR_ACCEL / vec3.len(angularAcc));\r\n                }\r\n                let deltaOmega = vec3.scale(angularAcc, deltaTime);\r\n                this.angularVelocity = vec3.add(this.angularVelocity, deltaOmega);\r\n                // vec3.add(this.angularVelocity, vec3.mulScalar(back, amount), this.angularVelocity);\r\n            }\r\n        }\r\n    }\r\n\r\n    public getPositionMatrix() {\r\n        return this.positionMatrix;\r\n    }\r\n\r\n    public getRotationMatrix() {\r\n        return this.rotationMatrix;\r\n    }\r\n\r\n    public getRotationMatrixX() {\r\n        return this.rotationMatrixX;\r\n    }\r\n\r\n    public getRotationMatrixY() {\r\n        return this.rotationMatrixY;\r\n    }\r\n\r\n    public getRotationMatrixZ() {\r\n        return this.rotationMatrixZ;\r\n    }\r\n\r\n    public setPositionMatrix(matrix: Mat4) {\r\n        this.positionMatrix = matrix;\r\n    }\r\n\r\n    public attachTo(parent: Object) {\r\n        this.parent = parent;\r\n    }\r\n\r\n    public attach(child: Object) {\r\n        this.child = child;\r\n    }\r\n\r\n    public getData() { };\r\n\r\n    public hashCode(): number {\r\n        return this.name.split('').reduce((hash, char) => {\r\n            return char.charCodeAt(0) + (hash << 6) + (hash << 16) - hash;\r\n        }, 0);\r\n    }\r\n\r\n    private recalculateAngles() {\r\n        this.yaw = Math.atan2(this.back[0], this.back[2]);\r\n        this.pitch = -Math.asin(this.back[1]);\r\n        this.roll = Math.atan2(-this.up[0], this.right[0]);\r\n    }\r\n\r\n    private angleBetween(vec1: Float32Array, vec2: Float32Array) {\r\n        let thetaU = Math.atan2(vec1[1], vec1[0])\r\n        let thetaV = Math.atan2(vec2[1], vec2[0])\r\n        let angle = thetaV - thetaU;\r\n        if (angle < 0) {\r\n            angle += 2 * Math.PI;\r\n        }\r\n        return angle;\r\n    }\r\n}\r\n","import { Mat4, Vec3, Vec4, mat3, mat4, vec3, vec4 } from \"wgpu-matrix\";\r\nimport { Object, ObjectDescriptor } from \"../object\";\r\nimport { Shape, ShapeDescriptor } from \"./shape\";\r\nimport { NotUndefined } from \"object-hash\";\r\n\r\nexport interface CubeDescriptor extends ShapeDescriptor {\r\n    lenght: [number, number, number];\r\n}\r\n\r\nexport class Cube extends Shape {\r\n    protected vertices: Float32Array;\r\n    protected sizeMatrix: Float32Array;\r\n    private length: [number, number, number];\r\n\r\n    constructor(\r\n        cubeDescriptor: CubeDescriptor\r\n    ) {\r\n        super(cubeDescriptor);\r\n\r\n        this.length = cubeDescriptor.lenght;\r\n        this.sizeMatrix = mat4.identity();\r\n        mat4.scale(this.sizeMatrix, this.length, this.sizeMatrix);\r\n\r\n        this.vertices = this.initVertices();\r\n    }\r\n\r\n    public getLength(): [number, number, number] {\r\n        return this.length;\r\n    }\r\n\r\n    public setLength(lenght: [number, number, number]) {\r\n        this.length = lenght;\r\n        mat4.scale(this.sizeMatrix, this.length, this.sizeMatrix);\r\n    }\r\n\r\n    public getNormal(x: number, y: number, z: number) {\r\n        const localPoint = vec3.subtract(vec3.create(x, y, z), this.position);\r\n        const invRotation = mat4.transpose(this.rotationMatrix);\r\n        const pointLocal = vec3.transformMat4Upper3x3(localPoint, invRotation);\r\n\r\n        const halfSize = [this.length[0] / 2, this.length[1] / 2, this.length[2] / 2];\r\n\r\n        // Step 2: Determine closest face in local space\r\n        const dx = Math.abs(pointLocal[0]) - halfSize[0];\r\n        const dy = Math.abs(pointLocal[1]) - halfSize[1];\r\n        const dz = Math.abs(pointLocal[2]) - halfSize[2];\r\n\r\n        const distances = [dx, dy, dz];\r\n        // console.log(maxAxis);\r\n        let minAxis = 0;\r\n        let minAbs = Math.abs(distances[0]);\r\n\r\n        for (let i = 1; i < 3; i++) {\r\n            const absVal = Math.abs(distances[i]);\r\n            if (absVal < minAbs) {\r\n                minAbs = absVal;\r\n                minAxis = i;\r\n            }\r\n        }\r\n        const localNormal = vec3.create(0, 0, 0);\r\n        localNormal[minAxis] = Math.sign(pointLocal[minAxis]);\r\n\r\n        // Step 3: Transform normal back to world space\r\n        const worldNormal = vec3.transformMat4Upper3x3(localNormal, this.rotationMatrix);\r\n        return vec3.normalize(worldNormal);\r\n    }\r\n\r\n    initVertices(): Float32Array {\r\n        let vertices = new Float32Array([\r\n            -0.5, 0.5, 0.5, // front face\r\n            -0.5, -0.5, 0.5,\r\n            0.5, 0.5, 0.5,\r\n            0.5, -0.5, 0.5,\r\n            0.5, 0.5, -0.5, // right f\r\n            0.5, 0.5, 0.5,\r\n            0.5, -0.5, -0.5,\r\n            0.5, -0.5, 0.5,\r\n            0.5, 0.5, -0.5, // back f\r\n            0.5, -0.5, -0.5,\r\n            -0.5, 0.5, -0.5,\r\n            -0.5, -0.5, -0.5,\r\n            -0.5, 0.5, 0.5, // left f\r\n            -0.5, 0.5, -0.5,\r\n            -0.5, -0.5, 0.5,\r\n            -0.5, -0.5, -0.5,\r\n            0.5, -0.5, 0.5, // bottom f\r\n            -0.5, -0.5, 0.5,\r\n            0.5, -0.5, -0.5,\r\n            -0.5, -0.5, -0.5,\r\n            -0.5, 0.5, 0.5, // top f\r\n            0.5, 0.5, 0.5,\r\n            -0.5, 0.5, -0.5,\r\n            0.5, 0.5, -0.5\r\n        ]);\r\n\r\n        let textureData = new Array(\r\n            0, 0.34, // front face (4)\r\n            1 / 4, 0.34,\r\n            0, 0.66,\r\n            1 / 4, 0.66,\r\n            2 / 4, 1, // right face (5)\r\n            1 / 4, 1,\r\n            2 / 4, 0.667,\r\n            1 / 4, 0.667,\r\n            3 / 4, 0.66, // back face (2)\r\n            2 / 4, 0.66,\r\n            3 / 4, 0.34,\r\n            2 / 4, 0.34,\r\n            1 / 4, 0, // left face (6)\r\n            2 / 4, 0,\r\n            1 / 4, 0.33,\r\n            2 / 4, 0.33,\r\n            2 / 4, 0.66, // bottom face (3)\r\n            2 / 4, 0.34,\r\n            1 / 4, 0.66,\r\n            1 / 4, 0.34,\r\n            1, 0.66, // top face (1)\r\n            1, 0.34,\r\n            3 / 4, 0.66,\r\n            3 / 4, 0.34,\r\n        );\r\n\r\n\r\n        if (this.texture !== undefined) {\r\n            textureData.forEach((el, id) => {\r\n                if (this.texture !== undefined) {\r\n                    if (id % 2 == 0) {\r\n                        textureData[id] = (el + this.texture.indexX) / this.texture.atlas.rowElements\r\n                    } else {\r\n                        textureData[id] = (el + this.texture.indexY) / this.texture.atlas.colElements\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n        let normalsData = new Float32Array([\r\n            0, 0, 1, // Front\r\n            1, 0, 0, // Right\r\n            0, 0, -1, // Back\r\n            -1, 0, 0, // Left\r\n            0, -1, 0, // Bottom\r\n            0, 1, 0 // Top\r\n        ]);\r\n\r\n        let indexData = new Uint16Array([\r\n            0, 1, 2, 2, 1, 3,  // front\r\n            4, 5, 6, 6, 5, 7,  // right\r\n            8, 9, 10, 10, 9, 11,  // back\r\n            12, 13, 14, 14, 13, 15,  // left\r\n            16, 17, 18, 18, 17, 19,  // bottom\r\n            20, 21, 22, 22, 21, 23,  // top\r\n        ]);\r\n\r\n        let out = new Float32Array(indexData.length * 8);\r\n\r\n        for (let i = 0; i < indexData.length; i++) {\r\n            const positionIdx = indexData[i] * 3;\r\n            const position = vertices.slice(positionIdx, positionIdx + 3);\r\n            out.set(position, i * 8);\r\n\r\n            const quadIdx = (i / 6 | 0) * 3;\r\n            const normal = normalsData.slice(quadIdx, quadIdx + 3);\r\n            out.set(normal, i * 8 + 3);\r\n\r\n            const texIdx = indexData[i] * 2;\r\n            const texture = textureData.slice(texIdx, texIdx + 2);\r\n            out.set(texture, i * 8 + 6);\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    private mat3frommat4(matrix4: Mat4) {\r\n        return new Float32Array([matrix4[0], matrix4[1], matrix4[2], matrix4[4], matrix4[5], matrix4[6], matrix4[8], matrix4[9], matrix4[10]]);\r\n    }\r\n}","import { mat4, Vec3 } from \"wgpu-matrix\";\r\nimport { Object, ObjectDescriptor } from \"../object\";\r\nimport { TextureAtlas } from \"../../textureAtlas\";\r\n\r\nexport interface TextureDescriptor {\r\n    atlas: TextureAtlas;\r\n    indexX: number;\r\n    indexY: number;\r\n}\r\n\r\nexport interface ShapeDescriptor extends ObjectDescriptor {\r\n    color?: [number, number, number, number];\r\n    texture?: TextureDescriptor;\r\n}\r\n\r\nexport interface RenderDataDescriptor {\r\n    name: string\r\n    vertices: Float32Array;\r\n    numberVertices: number;\r\n    matrix: Float32Array;\r\n    color: Float32Array;\r\n    containsTexture: boolean;\r\n    // texture?: TextureDescriptor;\r\n}\r\n\r\nexport abstract class Shape extends Object {\r\n    color: Float32Array;\r\n    texture?: TextureDescriptor;\r\n    containsTexture: boolean;\r\n    // image?: ImageBitmap;\r\n\r\n    protected abstract sizeMatrix: Float32Array;\r\n    protected abstract vertices: Float32Array;\r\n\r\n    constructor(shapeDescriptor: ShapeDescriptor) {\r\n        super(shapeDescriptor);\r\n        this.color = shapeDescriptor.color !== undefined ? new Float32Array(shapeDescriptor.color) : new Float32Array([0.8, 0.5, 0.2, 1]);\r\n        this.texture = shapeDescriptor.texture;\r\n        this.containsTexture = this.texture === undefined ? false : true;\r\n    }\r\n\r\n    protected abstract getNormal(x: number, y: number, z: number): Vec3;\r\n\r\n    public getScaleMatrix() {\r\n        return this.sizeMatrix;\r\n    }\r\n\r\n    getData(): RenderDataDescriptor { \r\n        let outMat = mat4.multiply(mat4.multiply(this.positionMatrix, this.rotationMatrix), this.sizeMatrix);\r\n        return {\r\n            name: this.name,\r\n            vertices: this.vertices,\r\n            numberVertices: this.vertices.byteLength / 8,\r\n            matrix: outMat,\r\n            color: this.color,\r\n            containsTexture: this.containsTexture,\r\n        }\r\n    }\r\n}","import { mat4, vec3, vec4, Vec4 } from \"wgpu-matrix\";\r\nimport { Shape, ShapeDescriptor } from \"./shape\";\r\n\r\nexport interface SphereDescriptor extends ShapeDescriptor {\r\n    radius: number,\r\n}\r\n\r\nexport class Sphere extends Shape {\r\n    private radius: number;\r\n    protected sizeMatrix: Float32Array;\r\n    protected vertices: Float32Array;\r\n\r\n    constructor(sphereDescriptor: SphereDescriptor) {\r\n        super(sphereDescriptor);\r\n\r\n        this.radius = sphereDescriptor.radius;\r\n        this.sizeMatrix = mat4.identity();\r\n        this.setRadius(this.radius);\r\n\r\n        this.vertices = this.initVertices(this.radius, 16, 16);\r\n    }\r\n\r\n    public setRadius(radius: number) : void {\r\n        this.radius = radius;\r\n        mat4.scale(this.sizeMatrix, [radius, radius, radius], this.sizeMatrix);\r\n    }\r\n\r\n    public getRadius() : number{\r\n        return this.radius;\r\n    }\r\n    \r\n    public getNormal(x: number, y: number, z: number) {\r\n        // console.log(vec3.create(x, y, z));\r\n        // console.log(this.position);\r\n        // console.log(vec3.subtract(vec3.create(x, y, z), this.position));\r\n        // console.log(vec3.subtract(this.position, vec3.create(x, y, z)));\r\n        return vec3.normalize(vec3.subtract(vec3.create(x, y, z), this.position));\r\n    }\r\n\r\n    private initVertices(radius: number, latSegments: number, lonSegments: number): Float32Array {\r\n        const data: number[] = [];\r\n        const vertexMap: number[][] = []; // Stores raw vertices\r\n\r\n        // Step 1: Generate unique vertices and normals\r\n        for (let lat = 0; lat <= latSegments; lat++) {\r\n            const theta = (lat * Math.PI) / latSegments; // Latitude angle (0 to π)\r\n            const sinTheta = Math.sin(theta);\r\n            const cosTheta = Math.cos(theta);\r\n            let v: number;\r\n            if (this.texture === undefined) {\r\n                v = lat / latSegments;\r\n            } else {\r\n                v = (lat / latSegments + this.texture.indexY) / this.texture.atlas.colElements;\r\n            }\r\n\r\n            for (let lon = 0; lon <= lonSegments; lon++) {\r\n                const phi = (lon * 2 * Math.PI) / lonSegments; // Longitude angle (0 to 2π)\r\n                const sinPhi = Math.sin(phi);\r\n                const cosPhi = Math.cos(phi);\r\n                let u: number;\r\n                if (this.texture === undefined) {\r\n                    u = 1 - lon / lonSegments;\r\n                } else {\r\n                    u = (1 - lon / lonSegments + this.texture?.indexX) / this.texture?.atlas.rowElements;\r\n                }\r\n\r\n                // Compute vertex position\r\n                const x = cosPhi * sinTheta;\r\n                const y = cosTheta;\r\n                const z = sinPhi * sinTheta;\r\n\r\n                // Store as an array entry\r\n                vertexMap.push([radius * x, radius * y, radius * z, x, y, z, u, v]); // Position + Normal + UV\r\n            }\r\n        }\r\n\r\n        // Step 2: Generate triangle data, duplicating vertices\r\n        for (let lat = 0; lat < latSegments; lat++) {\r\n            for (let lon = 0; lon < lonSegments; lon++) {\r\n                const i0 = lat * (lonSegments + 1) + lon;\r\n                const i1 = i0 + 1;\r\n                const i2 = i0 + (lonSegments + 1);\r\n                const i3 = i2 + 1;\r\n\r\n                // First triangle (i0, i2, i1)\r\n                data.push(...vertexMap[i0], ...vertexMap[i2], ...vertexMap[i1]);\r\n                // data.push(...vertexMap[i0], ...vertexMap[i1], ...vertexMap[i2]);\r\n\r\n                // Second triangle (i1, i2, i3)\r\n                data.push(...vertexMap[i1], ...vertexMap[i2], ...vertexMap[i3]);\r\n                // data.push(...vertexMap[i1], ...vertexMap[i2], ...vertexMap[i3]);\r\n            }\r\n        }\r\n\r\n        return new Float32Array(data);\r\n    }\r\n\r\n}","import { Camera } from \"./objects/camera\";\r\nimport { Scene } from \"./scene\";\r\nimport { Cube } from \"./objects/shapes/cube\";\r\nimport { Light } from \"./objects/light\";\r\nimport { Model } from \"./objects/shapes/model\";\r\nimport { Sphere } from \"./objects/shapes/sphere\";\r\n\r\nimport { RenderDataDescriptor } from \"./objects/shapes/shape\";\r\n\r\nimport objColorShader from \"./shaders/objColorShader.wgsl\";\r\nimport objTextureShader from \"./shaders/objTextureShader.wgsl\";\r\nimport debugShader from \"./shaders/debugShader.wgsl\";\r\nimport skyBoxShader from \"./shaders/skyboxShader.wgsl\"\r\nimport { TextureAtlas } from \"./textureAtlas\";\r\nimport { unwatchFile } from \"fs\";\r\nimport { mat4 } from \"wgpu-matrix\";\r\n\r\nexport class Renderer {\r\n    private canvas: HTMLCanvasElement;\r\n    private device!: GPUDevice;\r\n    private context!: GPUCanvasContext;\r\n    private presentationFormat!: GPUTextureFormat;\r\n    private colorRenderPipeline!: GPURenderPipeline;\r\n    private textureRenderPipeline!: GPURenderPipeline;\r\n    private debugRenderPipeline!: GPURenderPipeline;\r\n    private skyBoxRenderPipeline!: GPURenderPipeline;\r\n    private renderPassDescriptor!: GPURenderPassDescriptor;\r\n\r\n    private multisamlpeTexture!: GPUTexture;\r\n\r\n    private renderTarget!: GPUTexture;\r\n    private renderTargetView!: GPUTextureView;\r\n\r\n    private cameraBuffer!: GPUBuffer;\r\n    private lightBuffer!: GPUBuffer;\r\n    private objectsBindGroup!: GPUBindGroup;\r\n\r\n    private shapesMatrixBuffer!: GPUBuffer;\r\n    private shapesColorBuffer!: GPUBuffer;\r\n    private shapesTextureBuffer!: GPUTexture;\r\n    private debugColorBuffer!: GPUBuffer;\r\n    private sampler!: GPUSampler;\r\n    private shapesColorBindGroup!: GPUBindGroup;\r\n    private shapesTextureBindGroup!: GPUBindGroup;\r\n    private debugBindGroup!: GPUBindGroup;\r\n    private skyboxBindGroup!: GPUBindGroup;\r\n    private skyboxCameraBuffer!: GPUBuffer;\r\n\r\n    constructor(canvas: HTMLCanvasElement) {\r\n        this.canvas = canvas;\r\n    }\r\n\r\n    public async initialize(textureAtlas: TextureAtlas, skyboxPath: string) {\r\n        if (navigator.gpu === undefined) {\r\n            console.log(\"This browser/device doesn't support WebGPU...\");\r\n            alert(\"This browser/device doesn't support WebGPU...\");\r\n            return;\r\n        }\r\n\r\n        // Get device\r\n        let adapter = await navigator.gpu.requestAdapter();\r\n        console.log(adapter);\r\n        this.device = await adapter!.requestDevice();\r\n        if (this.device === undefined) {\r\n            console.log(\"Couldn't load device (not supported)\");\r\n            return;\r\n        }\r\n\r\n        // Configure context\r\n        this.context = this.canvas.getContext('webgpu') as GPUCanvasContext;\r\n        this.presentationFormat = navigator.gpu.getPreferredCanvasFormat();\r\n        this.context.configure({\r\n            device: this.device,\r\n            format: navigator.gpu.getPreferredCanvasFormat(),\r\n            alphaMode: 'premultiplied'\r\n        });\r\n\r\n        // Set canvas size\r\n        this.canvas.width = this.canvas.clientWidth * window.devicePixelRatio;\r\n        this.canvas.height = this.canvas.clientHeight * window.devicePixelRatio;\r\n\r\n        // ========== Create bind group layouts ==========\r\n        const objectsBindGroupLayoutDescriptor: GPUBindGroupLayoutDescriptor = {\r\n            label: 'Objects bind group layout desc',\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    visibility: GPUShaderStage.VERTEX,\r\n                    buffer: {\r\n                        type: \"uniform\",\r\n                        hasDynamicOffset: false,\r\n                    },\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    visibility: GPUShaderStage.FRAGMENT,\r\n                    buffer: {\r\n                        type: \"uniform\",\r\n                        hasDynamicOffset: false,\r\n                    },\r\n                },\r\n            ]\r\n        };\r\n        const objectsBindGroupLayout = this.device.createBindGroupLayout(objectsBindGroupLayoutDescriptor);\r\n\r\n        const shapesColorBindGroupLayoutDescriptor: GPUBindGroupLayoutDescriptor = {\r\n            label: 'Shapes bind group layout descriptor',\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    visibility: GPUShaderStage.VERTEX,\r\n                    buffer: {\r\n                        type: 'uniform',\r\n                        hasDynamicOffset: true,\r\n                    },\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    visibility: GPUShaderStage.FRAGMENT,\r\n                    buffer: {\r\n                        type: 'uniform',\r\n                        hasDynamicOffset: true,\r\n                    },\r\n                },\r\n            ]\r\n        }\r\n        const shapesColorBindGroupLayout = this.device.createBindGroupLayout(shapesColorBindGroupLayoutDescriptor);\r\n\r\n        const shapesTextureBindGroupLayoutDescriptor: GPUBindGroupLayoutDescriptor = {\r\n            label: 'Shapes texture bind group layout',\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    visibility: GPUShaderStage.VERTEX,\r\n                    buffer: {\r\n                        type: 'uniform',\r\n                        hasDynamicOffset: true,\r\n                    },\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    visibility: GPUShaderStage.FRAGMENT,\r\n                    sampler: {\r\n                        type: 'filtering',\r\n                    },\r\n                },\r\n                {\r\n                    binding: 2,\r\n                    visibility: GPUShaderStage.FRAGMENT,\r\n                    texture: {\r\n                        sampleType: 'float',\r\n                        viewDimension: '2d',\r\n                        multisampled: false,\r\n                    },\r\n                },\r\n            ]\r\n        }\r\n        const shapesTextureBindGroupLayout = this.device.createBindGroupLayout(shapesTextureBindGroupLayoutDescriptor);\r\n\r\n        // ========== Create render pipeline for solid colored objects ==========\r\n        const colorShaderModule = this.device.createShaderModule({ code: objColorShader });\r\n        const colorRenderPipelineDescriptor: GPURenderPipelineDescriptor = {\r\n            label: 'Color render pipeline',\r\n            layout: this.device.createPipelineLayout({ bindGroupLayouts: [objectsBindGroupLayout, shapesColorBindGroupLayout] }),\r\n            vertex: {\r\n                module: colorShaderModule,\r\n                buffers: [\r\n                    {\r\n                        arrayStride: (3 + 3 + 2) * 4, // 3 vertex coords & 3 normals coords & 2 texture coords\r\n                        attributes: [\r\n                            { shaderLocation: 0, offset: 0, format: 'float32x3' },\r\n                            { shaderLocation: 1, offset: 3 * 4, format: 'float32x3' },\r\n                            { shaderLocation: 2, offset: 6 * 4, format: 'float32x2' },\r\n                        ]\r\n                    }\r\n                ]\r\n            },\r\n            fragment: {\r\n                module: colorShaderModule,\r\n                targets: [{ format: this.presentationFormat }]\r\n            },\r\n            primitive: {\r\n                topology: 'triangle-list'\r\n            },\r\n            depthStencil: {\r\n                format: 'depth24plus',\r\n                depthWriteEnabled: true,\r\n                depthCompare: 'less',\r\n            },\r\n            multisample: { count: 4 },\r\n        }\r\n        this.colorRenderPipeline = this.device.createRenderPipeline(colorRenderPipelineDescriptor);\r\n\r\n        // ========= Create render pipeline for textured objects ============\r\n        const textureShaderModule = this.device.createShaderModule({ code: objTextureShader });\r\n        const textureRenderPipelineDescriptor: GPURenderPipelineDescriptor = {\r\n            label: 'Texture render pipeline',\r\n            layout: this.device.createPipelineLayout({ bindGroupLayouts: [objectsBindGroupLayout, shapesTextureBindGroupLayout] }),\r\n            vertex: {\r\n                module: textureShaderModule,\r\n                buffers: [\r\n                    {\r\n                        arrayStride: (3 + 3 + 2) * 4, // 3 vertex coords & 3 normals coords & 2 texture coords\r\n                        attributes: [\r\n                            { shaderLocation: 0, offset: 0, format: 'float32x3' },\r\n                            { shaderLocation: 1, offset: 3 * 4, format: 'float32x3' },\r\n                            { shaderLocation: 2, offset: 6 * 4, format: 'float32x2' },\r\n                        ]\r\n                    }\r\n                ]\r\n            },\r\n            fragment: {\r\n                module: textureShaderModule,\r\n                targets: [{ format: this.presentationFormat }]\r\n            },\r\n            primitive: {\r\n                topology: 'triangle-list'\r\n            },\r\n            depthStencil: {\r\n                format: 'depth24plus',\r\n                depthWriteEnabled: true,\r\n                depthCompare: 'less',\r\n            },\r\n            multisample: { count: 4 }\r\n        }\r\n        this.textureRenderPipeline = this.device.createRenderPipeline(textureRenderPipelineDescriptor);\r\n\r\n        const debugBindGroupLayoutDescriptor: GPUBindGroupLayoutDescriptor = {\r\n            label: 'Debug bind group layout descriptor',\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    visibility: GPUShaderStage.VERTEX,\r\n                    buffer: {\r\n                        type: 'uniform',\r\n                        hasDynamicOffset: false,\r\n                    },\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    visibility: GPUShaderStage.FRAGMENT,\r\n                    buffer: {\r\n                        type: 'uniform',\r\n                        hasDynamicOffset: true,\r\n                    },\r\n                },\r\n            ]\r\n        };\r\n        const debugBindGroupLayout = this.device.createBindGroupLayout(debugBindGroupLayoutDescriptor);\r\n\r\n        const debugShaderModule = this.device.createShaderModule({ code: debugShader });\r\n        const debugRenderPipelineDescriptor: GPURenderPipelineDescriptor = {\r\n            layout: this.device.createPipelineLayout({ bindGroupLayouts: [debugBindGroupLayout] }),\r\n            vertex: {\r\n                module: debugShaderModule,\r\n                buffers: [\r\n                    {\r\n                        arrayStride: 3 * 4,\r\n                        attributes: [\r\n                            { shaderLocation: 0, offset: 0, format: 'float32x3' },\r\n                        ]\r\n                    }\r\n                ]\r\n            },\r\n            fragment: {\r\n                module: debugShaderModule,\r\n                targets: [{ format: this.presentationFormat }]\r\n            },\r\n            primitive: {\r\n                topology: 'line-list'\r\n            },\r\n            depthStencil: {\r\n                format: 'depth24plus',\r\n                depthWriteEnabled: true,\r\n                depthCompare: 'less'\r\n            },\r\n            multisample: { count: 4 }\r\n        }\r\n        this.debugRenderPipeline = this.device.createRenderPipeline(debugRenderPipelineDescriptor);\r\n\r\n        const skyBoxShaderModule = this.device.createShaderModule({ code: skyBoxShader });\r\n        const skyboxRenderPipelineDescriptor: GPURenderPipelineDescriptor = {\r\n            label: 'skybox render pipeline',\r\n            layout: 'auto',\r\n            vertex: {\r\n                module: skyBoxShaderModule,\r\n            },\r\n            fragment: {\r\n                module: skyBoxShaderModule,\r\n                targets: [{ format: this.presentationFormat }],\r\n            },\r\n            depthStencil: {\r\n                depthWriteEnabled: true,\r\n                depthCompare: 'less-equal',\r\n                format: 'depth24plus',\r\n            },\r\n            multisample: {\r\n                count: 4,\r\n            }\r\n        };\r\n        this.skyBoxRenderPipeline = this.device.createRenderPipeline(skyboxRenderPipelineDescriptor);\r\n        const skyboxTexture = this.createTextureFromImages(\r\n            this.device,\r\n            [\r\n                skyboxPath + 'px.jpg',\r\n                skyboxPath + 'nx.jpg',\r\n                skyboxPath + 'py.jpg',\r\n                skyboxPath + 'ny.jpg',\r\n                skyboxPath + 'pz.jpg',\r\n                skyboxPath + 'nz.jpg',\r\n            ]\r\n        );\r\n        const skyboxSampler = this.device.createSampler({\r\n            magFilter: 'linear',\r\n            minFilter: 'linear',\r\n        });\r\n\r\n\r\n        // ========== Objects Bind Group ==========\r\n        this.cameraBuffer = this.device.createBuffer({\r\n            size: 4 * 4 * 4, // 4 x 4 float32 matrix\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\r\n        });\r\n        this.lightBuffer = this.device.createBuffer({\r\n            label: 'Meduspremnik za svjetlo',\r\n            size: 3 * 4 + 4,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\r\n        });\r\n        this.objectsBindGroup = this.device.createBindGroup({\r\n            layout: this.colorRenderPipeline.getBindGroupLayout(0),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: {\r\n                        buffer: this.cameraBuffer,\r\n                        offset: 0,\r\n                        size: 16 * 4,\r\n                    }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: {\r\n                        buffer: this.lightBuffer,\r\n                        offset: 0,\r\n                        size: 3 * 4 + 4,\r\n                    }\r\n                },\r\n            ],\r\n        });\r\n\r\n        // ========== Shape bind group ==========\r\n        this.shapesMatrixBuffer = this.device.createBuffer({\r\n            label: 'Meduspremnik za matrice oblika',\r\n            size: 4 * 16 * 1024,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\r\n        });\r\n        this.shapesColorBuffer = this.device.createBuffer({\r\n            label: 'Meduspremnik za boje oblika',\r\n            size: 4 * 4 * 1024,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\r\n        });\r\n        this.shapesTextureBuffer = this.device.createTexture({\r\n            label: 'Meduspremnik za teksture oblika',\r\n            format: 'rgba8unorm',\r\n            size: [textureAtlas.image.width, textureAtlas.image.height],\r\n            usage: GPUTextureUsage.TEXTURE_BINDING |\r\n                GPUTextureUsage.COPY_DST |\r\n                GPUTextureUsage.RENDER_ATTACHMENT,\r\n        });\r\n        this.device.queue.copyExternalImageToTexture(\r\n            { source: textureAtlas.image },\r\n            { texture: this.shapesTextureBuffer },\r\n            {\r\n                width: textureAtlas.image.width,\r\n                height: textureAtlas.image.height,\r\n            },\r\n        )\r\n        this.debugColorBuffer = this.device.createBuffer({\r\n            label: 'Meduspremnik za boje u debugu',\r\n            size: 4 * 4 * 1024,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\r\n        })\r\n        this.sampler = this.device.createSampler({\r\n            addressModeU: 'repeat',\r\n            addressModeV: 'repeat',\r\n        })\r\n        this.shapesColorBindGroup = this.device.createBindGroup({\r\n            layout: this.colorRenderPipeline.getBindGroupLayout(1),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: {\r\n                        buffer: this.shapesMatrixBuffer,\r\n                        size: 16 * 4,\r\n                    }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: {\r\n                        buffer: this.shapesColorBuffer,\r\n                        size: 4 * 4,\r\n                    }\r\n                }\r\n            ]\r\n        });\r\n        this.shapesTextureBindGroup = this.device.createBindGroup({\r\n            layout: this.textureRenderPipeline.getBindGroupLayout(1),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: {\r\n                        buffer: this.shapesMatrixBuffer,\r\n                        size: 16 * 4,\r\n                    }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: this.sampler,\r\n                }, {\r\n                    binding: 2,\r\n                    resource: this.shapesTextureBuffer.createView(),\r\n                },\r\n\r\n            ]\r\n        });\r\n        this.debugBindGroup = this.device.createBindGroup({\r\n            layout: this.debugRenderPipeline.getBindGroupLayout(0),\r\n            entries: [\r\n                { binding: 0, resource:  { buffer: this.cameraBuffer, size: 16 * 4 }},\r\n                { binding: 1, resource: { buffer: this.debugColorBuffer , size: 4 * 4} }\r\n            ]\r\n        })\r\n\r\n        this.skyboxCameraBuffer= this.device.createBuffer({\r\n            size: 4 * 4 * 4, // 4 x 4 float32 matrix\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\r\n        });\r\n\r\n        this.skyboxBindGroup = this.device.createBindGroup({\r\n            label: 'skybox bind group',\r\n            layout: this.skyBoxRenderPipeline.getBindGroupLayout(0),\r\n            entries: [\r\n                { binding: 0, resource: { buffer: this.skyboxCameraBuffer }},\r\n                { binding: 1, resource: skyboxSampler },\r\n                { binding: 2, resource: (await skyboxTexture).createView({dimension: 'cube'})},\r\n            ],\r\n        })\r\n\r\n        // Prepare depth texture\r\n        const depthTexture = this.device.createTexture({\r\n            size: [this.context.getCurrentTexture().width, this.context.getCurrentTexture().height],\r\n            format: 'depth24plus',\r\n            usage: GPUTextureUsage.RENDER_ATTACHMENT,\r\n            sampleCount: 4,\r\n        });\r\n\r\n        // Initialize and set render pass descriptor\r\n        this.renderPassDescriptor = {\r\n            // @ts-ignore\r\n            colorAttachments: [{\r\n                clearValue: [0.2, 0.2, 0.2, 1],\r\n                loadOp: 'clear',\r\n                storeOp: 'store',\r\n            }\r\n            ],\r\n            depthStencilAttachment: {\r\n                view: depthTexture.createView(),\r\n                depthClearValue: 1.0,\r\n                depthLoadOp: 'clear',\r\n                depthStoreOp: 'discard',\r\n            }\r\n        }\r\n    }\r\n\r\n    private copySourcesToTexture(device: GPUDevice, texture: GPUTexture, sources: ImageBitmap[]) {\r\n        sources.forEach((source, layer) => {\r\n            device.queue.copyExternalImageToTexture(\r\n                { source },\r\n                {texture, origin: [0, 0, layer] },\r\n                { width: source.width, height: source.height },\r\n            );\r\n        });\r\n    }\r\n\r\n    private createTextureFromSources(device: GPUDevice, sources: ImageBitmap[]) {\r\n        const source = sources[0];\r\n        const texture = device.createTexture({\r\n            format: 'rgba8unorm',\r\n            size: [source.width, source.height, sources.length],\r\n            usage: GPUTextureUsage.TEXTURE_BINDING |\r\n                GPUTextureUsage.COPY_DST |\r\n                GPUTextureUsage.RENDER_ATTACHMENT,\r\n        });\r\n        this.copySourcesToTexture(device, texture, sources);\r\n        return texture;\r\n    }\r\n\r\n    private async loadImageBitmap(url: string) {\r\n        const res = await fetch(url);\r\n        const blob = await res.blob();\r\n        return await createImageBitmap(blob);\r\n    }\r\n\r\n    private async createTextureFromImages(device: GPUDevice, urls: string[]) {\r\n        const images = await Promise.all(urls.map(this.loadImageBitmap));\r\n        return this.createTextureFromSources(device, images);\r\n    }\r\n\r\n    public render(scene: Scene) {\r\n        const canvasTexture = this.context.getCurrentTexture();\r\n        if (!this.multisamlpeTexture ||\r\n            this.multisamlpeTexture.width !== canvasTexture.width ||\r\n            this.multisamlpeTexture.height !== canvasTexture.height) {\r\n            if (this.multisamlpeTexture) {\r\n                this.multisamlpeTexture.destroy();\r\n            }\r\n            this.multisamlpeTexture = this.device.createTexture({\r\n                format: canvasTexture.format,\r\n                usage: GPUTextureUsage.RENDER_ATTACHMENT,\r\n                size: [canvasTexture.width, canvasTexture.height],\r\n                sampleCount: 4,\r\n            })\r\n        }\r\n\r\n        const encoder = this.device.createCommandEncoder({ label: 'Default encoder' });\r\n        (this.renderPassDescriptor.colorAttachments as GPURenderPassColorAttachment[])[0].view = this.multisamlpeTexture.createView();\r\n        (this.renderPassDescriptor.colorAttachments as GPURenderPassColorAttachment[])[0].resolveTarget = canvasTexture.createView();\r\n\r\n        const renderPass = encoder.beginRenderPass(this.renderPassDescriptor);\r\n\r\n        let cameraData = scene.camera.getData();\r\n        let projCamMatrix = mat4.multiply(cameraData.projection, cameraData.camera);\r\n        this.device.queue.writeBuffer(this.cameraBuffer, 0, projCamMatrix);\r\n        this.device.queue.writeBuffer(this.lightBuffer, 0, scene.light.getData());\r\n\r\n        scene.vectors.forEach((vec, idx) => {\r\n            renderPass.setBindGroup(0, this.debugBindGroup, [idx * 256]);\r\n            renderPass.setPipeline(this.debugRenderPipeline);\r\n            let pos = vec.getData();\r\n            const vertexBuffer = this.device.createBuffer({\r\n                label: 'Vertex buffer for debugging',\r\n                size: pos.data.byteLength,\r\n                usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\r\n            });\r\n            this.device.queue.writeBuffer(vertexBuffer, 0, pos.data);\r\n            this.device.queue.writeBuffer(this.debugColorBuffer, idx * 256, pos.color);\r\n            renderPass.setVertexBuffer(0, vertexBuffer);\r\n            renderPass.draw(2);\r\n        });\r\n\r\n        renderPass.setBindGroup(0, this.objectsBindGroup);\r\n\r\n        let offset = 0;\r\n        scene.shapes.forEach((shape) => {\r\n            let renderData = shape.getData();\r\n            // If image is not set, render with color\r\n            if (!renderData.containsTexture) {\r\n                renderPass.setPipeline(this.colorRenderPipeline);\r\n                renderPass.setBindGroup(1, this.shapesColorBindGroup, [offset * 256, offset * 256]);\r\n                this.device.queue.writeBuffer(this.shapesMatrixBuffer, offset * 256, renderData.matrix);\r\n                this.device.queue.writeBuffer(this.shapesColorBuffer, offset * 256, renderData.color);\r\n            }\r\n            else {\r\n                renderPass.setPipeline(this.textureRenderPipeline);\r\n                renderPass.setBindGroup(1, this.shapesTextureBindGroup, [offset * 256]);\r\n                this.device.queue.writeBuffer(this.shapesMatrixBuffer, offset * 256, renderData.matrix);\r\n            }\r\n\r\n            const vertexBuffer = this.device.createBuffer({\r\n                label: `Vertex buffer for ${renderData.name}`,\r\n                size: renderData.vertices.byteLength * 4,\r\n                usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\r\n            });\r\n            this.device.queue.writeBuffer(vertexBuffer, 0, renderData.vertices);\r\n            renderPass.setVertexBuffer(0, vertexBuffer);\r\n\r\n            renderPass.draw(renderData.numberVertices);\r\n\r\n            offset += 1;\r\n        });\r\n\r\n        let sCameraData = new Float32Array(cameraData.camera);\r\n        sCameraData.set([0, 0, 0], 12);\r\n        let proj = mat4.multiply(cameraData.projection, sCameraData);\r\n        this.device.queue.writeBuffer(this.skyboxCameraBuffer, 0, proj);\r\n        renderPass.setPipeline(this.skyBoxRenderPipeline);\r\n        renderPass.setBindGroup(0, this.skyboxBindGroup);\r\n        renderPass.draw(3);\r\n\r\n        renderPass.end();\r\n\r\n        const commandBuffer = encoder.finish();\r\n        this.device.queue.submit([commandBuffer]);\r\n    }\r\n};\r\n","export default \"struct Camera {\\r\\n    matrix: mat4x4f,\\r\\n};\\r\\n\\r\\nstruct Light {\\r\\n    direction: vec3f,\\r\\n}\\r\\n\\r\\nstruct VertexOutput {\\r\\n    @builtin(position) position: vec4f,\\r\\n    @location(0) normal: vec3f,\\r\\n    @location(1) texcoord: vec2f,\\r\\n};\\r\\n\\r\\n// Bind group for world\\r\\n@group(0) @binding(0) var<uniform> camera: Camera;\\r\\n@group(0) @binding(1) var<uniform> light: Light;\\r\\n\\r\\n// Bind group for objects\\r\\n@group(1) @binding(0) var<uniform> objTran: mat4x4f;\\r\\n@group(1) @binding(1) var<uniform> color: vec4f;\\r\\n\\r\\n@vertex\\r\\nfn vert(\\r\\n    @location(0) position: vec4f,\\r\\n    @location(1) normal: vec3f,\\r\\n    @location(2) texcoord: vec2f,\\r\\n    @builtin(vertex_index) vertIndex: u32\\r\\n) -> VertexOutput {\\r\\n    var vsOut: VertexOutput;\\r\\n    vsOut.position = camera.matrix * objTran * position;\\r\\n    vsOut.normal = (objTran * vec4f(normal, 0)).xyz;\\r\\n    vsOut.texcoord = texcoord;\\r\\n    return vsOut;\\r\\n}\\r\\n\\r\\n@fragment\\r\\nfn frag(vsOut: VertexOutput) -> @location(0) vec4f {\\r\\n    let normal = normalize(vsOut.normal);\\r\\n    let lgh = max(dot(normal, -light.direction), 0.25);\\r\\n    let col = color.rgb * lgh; // Multiply only color (not alpha)\\r\\n    // let col = color.rgb; // Multiply only color (not alpha)\\r\\n    return vec4f(col, color.a);\\r\\n}\\r\\n\"","export default \"struct Camera {\\r\\n    matrix: mat4x4f,\\r\\n};\\r\\n\\r\\nstruct Light {\\r\\n    direction: vec3f,\\r\\n}\\r\\n\\r\\nstruct VertexOutput {\\r\\n    @builtin(position) position: vec4f,\\r\\n    @location(0) normal: vec3f,\\r\\n    @location(1) texcoord: vec2f,\\r\\n};\\r\\n\\r\\n@group(0) @binding(0) var<uniform> camera: Camera;\\r\\n@group(0) @binding(1) var<uniform> light: Light;\\r\\n\\r\\n@group(1) @binding(0) var<uniform> objectTransform: mat4x4f;\\r\\n@group(1) @binding(1) var linSampler: sampler;\\r\\n@group(1) @binding(2) var tex: texture_2d<f32>;\\r\\n// @group(1) @binding(3) var<uniform> textureElements: vec2f;\\r\\n\\r\\n@vertex\\r\\nfn vert(\\r\\n    @location(0) position: vec4f,\\r\\n    @location(1) normal: vec3f,\\r\\n    @location(2) texcoord: vec2f,\\r\\n) -> VertexOutput {\\r\\n    var vsOut: VertexOutput;\\r\\n    vsOut.position = camera.matrix * objectTransform * position;\\r\\n    vsOut.normal = (objectTransform * vec4f(normal, 0)).xyz;\\r\\n    vsOut.texcoord = texcoord;\\r\\n    return vsOut;\\r\\n}\\r\\n\\r\\n\\r\\n@fragment\\r\\nfn frag(vsOut: VertexOutput) -> @location(0) vec4f {\\r\\n    let normal = normalize(vsOut.normal);\\r\\n    let texcolor = textureSample(tex, linSampler, vsOut.texcoord);\\r\\n    let lgh = max(dot(normal, -light.direction), 0.25);\\r\\n    let finalcolor = texcolor.rgb * lgh;\\r\\n    return vec4f(finalcolor, texcolor.a);\\r\\n}\"","export default \"struct Camera {\\r\\n    matrix: mat4x4f,\\r\\n};\\r\\n\\r\\nstruct VertexOutput {\\r\\n    @builtin(position) position: vec4f,\\r\\n};\\r\\n\\r\\n@group(0) @binding(0) var<uniform> camera: Camera;\\r\\n@group(0) @binding(1) var<uniform> color: vec3f;\\r\\n\\r\\n@vertex\\r\\nfn vert(\\r\\n    @location(0) position: vec4f,\\r\\n) -> VertexOutput {\\r\\n    var vsOut: VertexOutput;\\r\\n    vsOut.position = camera.matrix * position;\\r\\n    return vsOut;\\r\\n}\\r\\n\\r\\n@fragment\\r\\nfn frag() -> @location(0) vec4f {\\r\\n    return vec4f(color.rgb, 1);\\r\\n}\\r\\n\"","export default \"struct Uniforms {\\r\\n  viewDirectionProjectionInverse: mat4x4f,\\r\\n};\\r\\n\\r\\nstruct VSOutput {\\r\\n  @builtin(position) position: vec4f,\\r\\n  @location(0) ndc: vec2f, // Normalized Device Coordinates (range -1 to 1)\\r\\n};\\r\\n\\r\\n@group(0) @binding(0) var<uniform> uni: Uniforms;\\r\\n@group(0) @binding(1) var ourSampler: sampler;\\r\\n@group(0) @binding(2) var ourTexture: texture_cube<f32>;\\r\\n\\r\\n@vertex fn vs(@builtin(vertex_index) vNdx: u32) -> VSOutput {\\r\\n  let pos = array(\\r\\n    vec2f(-1.0,  3.0),\\r\\n    vec2f(-1.0, -1.0),\\r\\n    vec2f( 3.0, -1.0),\\r\\n  );\\r\\n\\r\\n  let ndc = array(\\r\\n    vec2f(-1.0,  3.0),\\r\\n    vec2f(-1.0, -1.0),\\r\\n    vec2f( 3.0, -1.0),\\r\\n  );\\r\\n\\r\\n  var out: VSOutput;\\r\\n  out.position = vec4f(pos[vNdx], 1.0, 1.0);\\r\\n  out.ndc = ndc[vNdx];\\r\\n  return out;\\r\\n}\\r\\n\\r\\n@fragment fn fs(vsOut: VSOutput) -> @location(0) vec4f {\\r\\n  let clip = vec4f(vsOut.ndc.xy, 1.0, 1.0);\\r\\n  let worldDir = (uni.viewDirectionProjectionInverse * clip).xyz;\\r\\n  return textureSample(ourTexture, ourSampler, worldDir);\\r\\n}\\r\\n\"","import { Camera } from \"./objects/camera\";\r\nimport { Light } from \"./objects/light\";\r\n// import { Object } from \"./Objects/object\";\r\nimport { Shape } from \"./objects/shapes/shape\";\r\nimport { Vector } from \"./objects/vector\";\r\n\r\nexport class Scene {\r\n    public shapes: Array<Shape>;\r\n    public vectors: Array<Vector>;\r\n    public light!: Light;\r\n    public camera!: Camera;\r\n    \r\n    public constructor() {\r\n        this.shapes = new Array<Shape>();\r\n        this.vectors = new Array<Vector>();\r\n    }\r\n\r\n    public addShapes(...shapes: Shape[]) {\r\n        for (let shape of shapes) {\r\n            if (this.shapes.includes(shape)) continue;\r\n            this.shapes.push(shape);\r\n        }\r\n    }\r\n\r\n    public removeShapes(...shapes: Shape[]) {\r\n        for (let shape of shapes) {\r\n            this.shapes = this.shapes.splice(this.shapes.indexOf(shape));\r\n        }\r\n    }\r\n\r\n    public setLight(light: Light) {\r\n        this.light = light;\r\n    }\r\n\r\n    public setCamera(camera: Camera) {\r\n        this.camera = camera;\r\n    }\r\n}","export class TextureAtlas {\r\n    image!: ImageBitmap;\r\n    rowElements!: number;\r\n    colElements!: number;\r\n\r\n    async loadImage(src: string, rowElements: number, colElements: number) {\r\n        this.image = await this.loadImageBitmap(src);\r\n        this.rowElements = rowElements;\r\n        this.colElements = colElements;\r\n    }\r\n\r\n    private async loadImageBitmap(url: string) {\r\n        const res = await fetch(url);\r\n        const blob = await res.blob();\r\n        return await createImageBitmap(blob, { colorSpaceConversion: 'none' });\r\n    }\r\n}","/* wgpu-matrix@3.3.0, license MIT */\nfunction wrapConstructor(OriginalConstructor, modifier) {\n    return class extends OriginalConstructor {\n        constructor(...args) {\n            super(...args);\n            modifier(this);\n        }\n    }; // Type assertion is necessary here\n}\nconst ZeroArray = wrapConstructor((Array), a => a.fill(0));\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nlet EPSILON = 0.000001;\n/**\n * Set the value for EPSILON for various checks\n * @param v - Value to use for EPSILON.\n * @returns previous value of EPSILON;\n */\nfunction setEpsilon(v) {\n    const old = EPSILON;\n    EPSILON = v;\n    return old;\n}\n/**\n * Convert degrees to radians\n * @param degrees - Angle in degrees\n * @returns angle converted to radians\n */\nfunction degToRad(degrees) {\n    return degrees * Math.PI / 180;\n}\n/**\n * Convert radians to degrees\n * @param radians - Angle in radians\n * @returns angle converted to degrees\n */\nfunction radToDeg(radians) {\n    return radians * 180 / Math.PI;\n}\n/**\n * Lerps between a and b via t\n * @param a - starting value\n * @param b - ending value\n * @param t - value where 0 = a and 1 = b\n * @returns a + (b - a) * t\n */\nfunction lerp(a, b, t) {\n    return a + (b - a) * t;\n}\n/**\n * Compute the opposite of lerp. Given a and b and a value between\n * a and b returns a value between 0 and 1. 0 if a, 1 if b.\n * Note: no clamping is done.\n * @param a - start value\n * @param b - end value\n * @param v - value between a and b\n * @returns (v - a) / (b - a)\n */\nfunction inverseLerp(a, b, v) {\n    const d = b - a;\n    return (Math.abs(b - a) < EPSILON)\n        ? a\n        : (v - a) / d;\n}\n/**\n * Compute the euclidean modulo\n *\n * ```\n * // table for n / 3\n * -5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5   <- n\n * ------------------------------------\n * -2  -1  -0  -2  -1   0,  1,  2,  0,  1,  2   <- n % 3\n *  1   2   0   1   2   0,  1,  2,  0,  1,  2   <- euclideanModule(n, 3)\n * ```\n *\n * @param n - dividend\n * @param m - divisor\n * @returns the euclidean modulo of n / m\n */\nfunction euclideanModulo(n, m) {\n    return ((n % m) + m) % m;\n}\n\nvar utils = {\n    __proto__: null,\n    get EPSILON () { return EPSILON; },\n    degToRad: degToRad,\n    euclideanModulo: euclideanModulo,\n    inverseLerp: inverseLerp,\n    lerp: lerp,\n    radToDeg: radToDeg,\n    setEpsilon: setEpsilon\n};\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates am typed API for Vec3\n */\nfunction getAPIImpl$5(Ctor) {\n    /**\n     * Creates a Vec2; may be called with x, y, z to set initial values.\n     *\n     * Note: Since passing in a raw JavaScript array\n     * is valid in all circumstances, if you want to\n     * force a JavaScript array into a Vec2's specified type\n     * it would be faster to use\n     *\n     * ```\n     * const v = vec2.clone(someJSArray);\n     * ```\n     *\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @returns the created vector\n     */\n    function create(x = 0, y = 0) {\n        const newDst = new Ctor(2);\n        if (x !== undefined) {\n            newDst[0] = x;\n            if (y !== undefined) {\n                newDst[1] = y;\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Creates a Vec2; may be called with x, y, z to set initial values. (same as create)\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @returns the created vector\n     */\n    const fromValues = create;\n    /**\n     * Sets the values of a Vec2\n     * Also see {@link vec2.create} and {@link vec2.copy}\n     *\n     * @param x first value\n     * @param y second value\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector with its elements set.\n     */\n    function set(x, y, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = x;\n        newDst[1] = y;\n        return newDst;\n    }\n    /**\n     * Applies Math.ceil to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the ceil of each element of v.\n     */\n    function ceil(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.ceil(v[0]);\n        newDst[1] = Math.ceil(v[1]);\n        return newDst;\n    }\n    /**\n     * Applies Math.floor to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the floor of each element of v.\n     */\n    function floor(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.floor(v[0]);\n        newDst[1] = Math.floor(v[1]);\n        return newDst;\n    }\n    /**\n     * Applies Math.round to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the round of each element of v.\n     */\n    function round(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.round(v[0]);\n        newDst[1] = Math.round(v[1]);\n        return newDst;\n    }\n    /**\n     * Clamp each element of vector between min and max\n     * @param v - Operand vector.\n     * @param max - Min value, default 0\n     * @param min - Max value, default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that the clamped value of each element of v.\n     */\n    function clamp(v, min = 0, max = 1, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.min(max, Math.max(min, v[0]));\n        newDst[1] = Math.min(max, Math.max(min, v[1]));\n        return newDst;\n    }\n    /**\n     * Adds two vectors; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a and b.\n     */\n    function add(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] + b[0];\n        newDst[1] = a[1] + b[1];\n        return newDst;\n    }\n    /**\n     * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param scale - Amount to scale b\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a + b * scale.\n     */\n    function addScaled(a, b, scale, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] + b[0] * scale;\n        newDst[1] = a[1] + b[1] * scale;\n        return newDst;\n    }\n    /**\n     * Returns the angle in radians between two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns The angle in radians between the 2 vectors.\n     */\n    function angle(a, b) {\n        const ax = a[0];\n        const ay = a[1];\n        const bx = b[0];\n        const by = b[1];\n        const mag1 = Math.sqrt(ax * ax + ay * ay);\n        const mag2 = Math.sqrt(bx * bx + by * by);\n        const mag = mag1 * mag2;\n        const cosine = mag && dot(a, b) / mag;\n        return Math.acos(cosine);\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    function subtract(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] - b[0];\n        newDst[1] = a[1] - b[1];\n        return newDst;\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    const sub = subtract;\n    /**\n     * Check if 2 vectors are approximately equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON;\n    }\n    /**\n     * Check if 2 vectors are exactly equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] && a[1] === b[1];\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficient.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The linear interpolated result.\n     */\n    function lerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] + t * (b[0] - a[0]);\n        newDst[1] = a[1] + t * (b[1] - a[1]);\n        return newDst;\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient vector t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficients vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns the linear interpolated result.\n     */\n    function lerpV(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] + t[0] * (b[0] - a[0]);\n        newDst[1] = a[1] + t[1] * (b[1] - a[1]);\n        return newDst;\n    }\n    /**\n     * Return max values of two vectors.\n     * Given vectors a and b returns\n     * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The max components vector.\n     */\n    function max(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.max(a[0], b[0]);\n        newDst[1] = Math.max(a[1], b[1]);\n        return newDst;\n    }\n    /**\n     * Return min values of two vectors.\n     * Given vectors a and b returns\n     * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The min components vector.\n     */\n    function min(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.min(a[0], b[0]);\n        newDst[1] = Math.min(a[1], b[1]);\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function mulScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = v[0] * k;\n        newDst[1] = v[1] * k;\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar. (same as mulScalar)\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    const scale = mulScalar;\n    /**\n     * Divides a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function divScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = v[0] / k;\n        newDst[1] = v[1] / k;\n        return newDst;\n    }\n    /**\n     * Inverse a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    function inverse(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = 1 / v[0];\n        newDst[1] = 1 / v[1];\n        return newDst;\n    }\n    /**\n     * Invert a vector. (same as inverse)\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    const invert = inverse;\n    /**\n     * Computes the cross product of two vectors; assumes both vectors have\n     * three entries.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of a cross b.\n     */\n    function cross(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const z = a[0] * b[1] - a[1] * b[0];\n        newDst[0] = 0;\n        newDst[1] = 0;\n        newDst[2] = z;\n        return newDst;\n    }\n    /**\n     * Computes the dot product of two vectors; assumes both vectors have\n     * three entries.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns dot product\n     */\n    function dot(a, b) {\n        return a[0] * b[0] + a[1] * b[1];\n    }\n    /**\n     * Computes the length of vector\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    function length(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        return Math.sqrt(v0 * v0 + v1 * v1);\n    }\n    /**\n     * Computes the length of vector (same as length)\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    const len = length;\n    /**\n     * Computes the square of the length of vector\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    function lengthSq(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        return v0 * v0 + v1 * v1;\n    }\n    /**\n     * Computes the square of the length of vector (same as lengthSq)\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    const lenSq = lengthSq;\n    /**\n     * Computes the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    function distance(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n    /**\n     * Computes the distance between 2 points (same as distance)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    const dist = distance;\n    /**\n     * Computes the square of the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    function distanceSq(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        return dx * dx + dy * dy;\n    }\n    /**\n     * Computes the square of the distance between 2 points (same as distanceSq)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    const distSq = distanceSq;\n    /**\n     * Divides a vector by its Euclidean length and returns the quotient.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The normalized vector.\n     */\n    function normalize(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        const v0 = v[0];\n        const v1 = v[1];\n        const len = Math.sqrt(v0 * v0 + v1 * v1);\n        if (len > 0.00001) {\n            newDst[0] = v0 / len;\n            newDst[1] = v1 / len;\n        }\n        else {\n            newDst[0] = 0;\n            newDst[1] = 0;\n        }\n        return newDst;\n    }\n    /**\n     * Negates a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns -v.\n     */\n    function negate(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = -v[0];\n        newDst[1] = -v[1];\n        return newDst;\n    }\n    /**\n     * Copies a vector. (same as {@link vec2.clone})\n     * Also see {@link vec2.create} and {@link vec2.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    function copy(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = v[0];\n        newDst[1] = v[1];\n        return newDst;\n    }\n    /**\n     * Clones a vector. (same as {@link vec2.copy})\n     * Also see {@link vec2.create} and {@link vec2.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    const clone = copy;\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] * b[0];\n        newDst[1] = a[1] * b[1];\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as mul)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    function divide(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] / b[0];\n        newDst[1] = a[1] / b[1];\n        return newDst;\n    }\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as divide)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    const div = divide;\n    /**\n     * Creates a random unit vector * scale\n     * @param scale - Default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The random vector.\n     */\n    function random(scale = 1, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        const angle = Math.random() * 2 * Math.PI;\n        newDst[0] = Math.cos(angle) * scale;\n        newDst[1] = Math.sin(angle) * scale;\n        return newDst;\n    }\n    /**\n     * Zero's a vector\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The zeroed vector.\n     */\n    function zero(dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = 0;\n        newDst[1] = 0;\n        return newDst;\n    }\n    /**\n     * transform Vec2 by 4x4 matrix\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional Vec2 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat4(v, m, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        const x = v[0];\n        const y = v[1];\n        newDst[0] = x * m[0] + y * m[4] + m[12];\n        newDst[1] = x * m[1] + y * m[5] + m[13];\n        return newDst;\n    }\n    /**\n     * Transforms vec4 by 3x3 matrix\n     *\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional Vec2 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat3(v, m, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        const x = v[0];\n        const y = v[1];\n        newDst[0] = m[0] * x + m[4] * y + m[8];\n        newDst[1] = m[1] * x + m[5] * y + m[9];\n        return newDst;\n    }\n    /**\n     * Rotate a 2D vector\n     *\n     * @param a The vec2 point to rotate\n     * @param b The origin of the rotation\n     * @param rad The angle of rotation in radians\n     * @returns the rotated vector\n     */\n    function rotate(a, b, rad, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        // Translate point to the origin\n        const p0 = a[0] - b[0];\n        const p1 = a[1] - b[1];\n        const sinC = Math.sin(rad);\n        const cosC = Math.cos(rad);\n        //perform rotation and translate to correct position\n        newDst[0] = p0 * cosC - p1 * sinC + b[0];\n        newDst[1] = p0 * sinC + p1 * cosC + b[1];\n        return newDst;\n    }\n    /**\n     * Treat a 2D vector as a direction and set it's length\n     *\n     * @param a The vec2 to lengthen\n     * @param len The length of the resulting vector\n     * @returns The lengthened vector\n     */\n    function setLength(a, len, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        normalize(a, newDst);\n        return mulScalar(newDst, len, newDst);\n    }\n    /**\n     * Ensure a vector is not longer than a max length\n     *\n     * @param a The vec2 to limit\n     * @param maxLen The longest length of the resulting vector\n     * @returns The vector, shortened to maxLen if it's too long\n     */\n    function truncate(a, maxLen, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        if (length(a) > maxLen) {\n            return setLength(a, maxLen, newDst);\n        }\n        return copy(a, newDst);\n    }\n    /**\n     * Return the vector exactly between 2 endpoint vectors\n     *\n     * @param a Endpoint 1\n     * @param b Endpoint 2\n     * @returns The vector exactly residing between endpoints 1 and 2\n     */\n    function midpoint(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        return lerp(a, b, 0.5, newDst);\n    }\n    return {\n        create,\n        fromValues,\n        set,\n        ceil,\n        floor,\n        round,\n        clamp,\n        add,\n        addScaled,\n        angle,\n        subtract,\n        sub,\n        equalsApproximately,\n        equals,\n        lerp,\n        lerpV,\n        max,\n        min,\n        mulScalar,\n        scale,\n        divScalar,\n        inverse,\n        invert,\n        cross,\n        dot,\n        length,\n        len,\n        lengthSq,\n        lenSq,\n        distance,\n        dist,\n        distanceSq,\n        distSq,\n        normalize,\n        negate,\n        copy,\n        clone,\n        multiply,\n        mul,\n        divide,\n        div,\n        random,\n        zero,\n        transformMat4,\n        transformMat3,\n        rotate,\n        setLength,\n        truncate,\n        midpoint,\n    };\n}\nconst cache$5 = new Map();\nfunction getAPI$5(Ctor) {\n    let api = cache$5.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$5(Ctor);\n        cache$5.set(Ctor, api);\n    }\n    return api;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates am typed API for Vec3\n * */\nfunction getAPIImpl$4(Ctor) {\n    /**\n     * Creates a vec3; may be called with x, y, z to set initial values.\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @returns the created vector\n     */\n    function create(x, y, z) {\n        const newDst = new Ctor(3);\n        if (x !== undefined) {\n            newDst[0] = x;\n            if (y !== undefined) {\n                newDst[1] = y;\n                if (z !== undefined) {\n                    newDst[2] = z;\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Creates a vec3; may be called with x, y, z to set initial values. (same as create)\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @returns the created vector\n     */\n    const fromValues = create;\n    /**\n     * Sets the values of a Vec3\n     * Also see {@link vec3.create} and {@link vec3.copy}\n     *\n     * @param x first value\n     * @param y second value\n     * @param z third value\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector with its elements set.\n     */\n    function set(x, y, z, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = x;\n        newDst[1] = y;\n        newDst[2] = z;\n        return newDst;\n    }\n    /**\n     * Applies Math.ceil to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the ceil of each element of v.\n     */\n    function ceil(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.ceil(v[0]);\n        newDst[1] = Math.ceil(v[1]);\n        newDst[2] = Math.ceil(v[2]);\n        return newDst;\n    }\n    /**\n     * Applies Math.floor to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the floor of each element of v.\n     */\n    function floor(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.floor(v[0]);\n        newDst[1] = Math.floor(v[1]);\n        newDst[2] = Math.floor(v[2]);\n        return newDst;\n    }\n    /**\n     * Applies Math.round to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the round of each element of v.\n     */\n    function round(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.round(v[0]);\n        newDst[1] = Math.round(v[1]);\n        newDst[2] = Math.round(v[2]);\n        return newDst;\n    }\n    /**\n     * Clamp each element of vector between min and max\n     * @param v - Operand vector.\n     * @param max - Min value, default 0\n     * @param min - Max value, default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that the clamped value of each element of v.\n     */\n    function clamp(v, min = 0, max = 1, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.min(max, Math.max(min, v[0]));\n        newDst[1] = Math.min(max, Math.max(min, v[1]));\n        newDst[2] = Math.min(max, Math.max(min, v[2]));\n        return newDst;\n    }\n    /**\n     * Adds two vectors; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a and b.\n     */\n    function add(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] + b[0];\n        newDst[1] = a[1] + b[1];\n        newDst[2] = a[2] + b[2];\n        return newDst;\n    }\n    /**\n     * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param scale - Amount to scale b\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a + b * scale.\n     */\n    function addScaled(a, b, scale, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] + b[0] * scale;\n        newDst[1] = a[1] + b[1] * scale;\n        newDst[2] = a[2] + b[2] * scale;\n        return newDst;\n    }\n    /**\n     * Returns the angle in radians between two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns The angle in radians between the 2 vectors.\n     */\n    function angle(a, b) {\n        const ax = a[0];\n        const ay = a[1];\n        const az = a[2];\n        const bx = b[0];\n        const by = b[1];\n        const bz = b[2];\n        const mag1 = Math.sqrt(ax * ax + ay * ay + az * az);\n        const mag2 = Math.sqrt(bx * bx + by * by + bz * bz);\n        const mag = mag1 * mag2;\n        const cosine = mag && dot(a, b) / mag;\n        return Math.acos(cosine);\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    function subtract(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] - b[0];\n        newDst[1] = a[1] - b[1];\n        newDst[2] = a[2] - b[2];\n        return newDst;\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    const sub = subtract;\n    /**\n     * Check if 2 vectors are approximately equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON;\n    }\n    /**\n     * Check if 2 vectors are exactly equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficient.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The linear interpolated result.\n     */\n    function lerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] + t * (b[0] - a[0]);\n        newDst[1] = a[1] + t * (b[1] - a[1]);\n        newDst[2] = a[2] + t * (b[2] - a[2]);\n        return newDst;\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient vector t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficients vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns the linear interpolated result.\n     */\n    function lerpV(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] + t[0] * (b[0] - a[0]);\n        newDst[1] = a[1] + t[1] * (b[1] - a[1]);\n        newDst[2] = a[2] + t[2] * (b[2] - a[2]);\n        return newDst;\n    }\n    /**\n     * Return max values of two vectors.\n     * Given vectors a and b returns\n     * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The max components vector.\n     */\n    function max(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.max(a[0], b[0]);\n        newDst[1] = Math.max(a[1], b[1]);\n        newDst[2] = Math.max(a[2], b[2]);\n        return newDst;\n    }\n    /**\n     * Return min values of two vectors.\n     * Given vectors a and b returns\n     * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The min components vector.\n     */\n    function min(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.min(a[0], b[0]);\n        newDst[1] = Math.min(a[1], b[1]);\n        newDst[2] = Math.min(a[2], b[2]);\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function mulScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = v[0] * k;\n        newDst[1] = v[1] * k;\n        newDst[2] = v[2] * k;\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar. (same as mulScalar)\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    const scale = mulScalar;\n    /**\n     * Divides a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function divScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = v[0] / k;\n        newDst[1] = v[1] / k;\n        newDst[2] = v[2] / k;\n        return newDst;\n    }\n    /**\n     * Inverse a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    function inverse(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = 1 / v[0];\n        newDst[1] = 1 / v[1];\n        newDst[2] = 1 / v[2];\n        return newDst;\n    }\n    /**\n     * Invert a vector. (same as inverse)\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    const invert = inverse;\n    /**\n     * Computes the cross product of two vectors; assumes both vectors have\n     * three entries.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of a cross b.\n     */\n    function cross(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const t1 = a[2] * b[0] - a[0] * b[2];\n        const t2 = a[0] * b[1] - a[1] * b[0];\n        newDst[0] = a[1] * b[2] - a[2] * b[1];\n        newDst[1] = t1;\n        newDst[2] = t2;\n        return newDst;\n    }\n    /**\n     * Computes the dot product of two vectors; assumes both vectors have\n     * three entries.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns dot product\n     */\n    function dot(a, b) {\n        return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);\n    }\n    /**\n     * Computes the length of vector\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    function length(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2);\n    }\n    /**\n     * Computes the length of vector (same as length)\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    const len = length;\n    /**\n     * Computes the square of the length of vector\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    function lengthSq(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        return v0 * v0 + v1 * v1 + v2 * v2;\n    }\n    /**\n     * Computes the square of the length of vector (same as lengthSq)\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    const lenSq = lengthSq;\n    /**\n     * Computes the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    function distance(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        const dz = a[2] - b[2];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\n    }\n    /**\n     * Computes the distance between 2 points (same as distance)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    const dist = distance;\n    /**\n     * Computes the square of the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    function distanceSq(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        const dz = a[2] - b[2];\n        return dx * dx + dy * dy + dz * dz;\n    }\n    /**\n     * Computes the square of the distance between 2 points (same as distanceSq)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    const distSq = distanceSq;\n    /**\n     * Divides a vector by its Euclidean length and returns the quotient.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The normalized vector.\n     */\n    function normalize(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2);\n        if (len > 0.00001) {\n            newDst[0] = v0 / len;\n            newDst[1] = v1 / len;\n            newDst[2] = v2 / len;\n        }\n        else {\n            newDst[0] = 0;\n            newDst[1] = 0;\n            newDst[2] = 0;\n        }\n        return newDst;\n    }\n    /**\n     * Negates a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns -v.\n     */\n    function negate(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = -v[0];\n        newDst[1] = -v[1];\n        newDst[2] = -v[2];\n        return newDst;\n    }\n    /**\n     * Copies a vector. (same as {@link vec3.clone})\n     * Also see {@link vec3.create} and {@link vec3.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    function copy(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = v[0];\n        newDst[1] = v[1];\n        newDst[2] = v[2];\n        return newDst;\n    }\n    /**\n     * Clones a vector. (same as {@link vec3.copy})\n     * Also see {@link vec3.create} and {@link vec3.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    const clone = copy;\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] * b[0];\n        newDst[1] = a[1] * b[1];\n        newDst[2] = a[2] * b[2];\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as mul)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    function divide(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] / b[0];\n        newDst[1] = a[1] / b[1];\n        newDst[2] = a[2] / b[2];\n        return newDst;\n    }\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as divide)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    const div = divide;\n    /**\n     * Creates a random vector\n     * @param scale - Default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The random vector.\n     */\n    function random(scale = 1, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const angle = Math.random() * 2 * Math.PI;\n        const z = Math.random() * 2 - 1;\n        const zScale = Math.sqrt(1 - z * z) * scale;\n        newDst[0] = Math.cos(angle) * zScale;\n        newDst[1] = Math.sin(angle) * zScale;\n        newDst[2] = z * scale;\n        return newDst;\n    }\n    /**\n     * Zero's a vector\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The zeroed vector.\n     */\n    function zero(dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = 0;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        return newDst;\n    }\n    /**\n     * transform vec3 by 4x4 matrix\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional vec3 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat4(v, m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const x = v[0];\n        const y = v[1];\n        const z = v[2];\n        const w = (m[3] * x + m[7] * y + m[11] * z + m[15]) || 1;\n        newDst[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n        newDst[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n        newDst[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n        return newDst;\n    }\n    /**\n     * Transform vec3 by upper 3x3 matrix inside 4x4 matrix.\n     * @param v - The direction.\n     * @param m - The matrix.\n     * @param dst - optional vec3 to store result. If not passed a new one is created.\n     * @returns The transformed vector.\n     */\n    function transformMat4Upper3x3(v, m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        newDst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n        newDst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n        newDst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n        return newDst;\n    }\n    /**\n     * Transforms vec3 by 3x3 matrix\n     *\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional vec3 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat3(v, m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const x = v[0];\n        const y = v[1];\n        const z = v[2];\n        newDst[0] = x * m[0] + y * m[4] + z * m[8];\n        newDst[1] = x * m[1] + y * m[5] + z * m[9];\n        newDst[2] = x * m[2] + y * m[6] + z * m[10];\n        return newDst;\n    }\n    /**\n     * Transforms vec3 by Quaternion\n     * @param v - the vector to transform\n     * @param q - the quaternion to transform by\n     * @param dst - optional vec3 to store result. If not passed a new one is created.\n     * @returns the transformed\n     */\n    function transformQuat(v, q, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const w2 = q[3] * 2;\n        const x = v[0];\n        const y = v[1];\n        const z = v[2];\n        const uvX = qy * z - qz * y;\n        const uvY = qz * x - qx * z;\n        const uvZ = qx * y - qy * x;\n        newDst[0] = x + uvX * w2 + (qy * uvZ - qz * uvY) * 2;\n        newDst[1] = y + uvY * w2 + (qz * uvX - qx * uvZ) * 2;\n        newDst[2] = z + uvZ * w2 + (qx * uvY - qy * uvX) * 2;\n        return newDst;\n    }\n    /**\n     * Returns the translation component of a 4-by-4 matrix as a vector with 3\n     * entries.\n     * @param m - The matrix.\n     * @param dst - vector to hold result. If not passed a new one is created.\n     * @returns The translation component of m.\n     */\n    function getTranslation(m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = m[12];\n        newDst[1] = m[13];\n        newDst[2] = m[14];\n        return newDst;\n    }\n    /**\n     * Returns an axis of a 4x4 matrix as a vector with 3 entries\n     * @param m - The matrix.\n     * @param axis - The axis 0 = x, 1 = y, 2 = z;\n     * @returns The axis component of m.\n     */\n    function getAxis(m, axis, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const off = axis * 4;\n        newDst[0] = m[off + 0];\n        newDst[1] = m[off + 1];\n        newDst[2] = m[off + 2];\n        return newDst;\n    }\n    /**\n     * Returns the scaling component of the matrix\n     * @param m - The Matrix\n     * @param dst - The vector to set. If not passed a new one is created.\n     */\n    function getScaling(m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const xx = m[0];\n        const xy = m[1];\n        const xz = m[2];\n        const yx = m[4];\n        const yy = m[5];\n        const yz = m[6];\n        const zx = m[8];\n        const zy = m[9];\n        const zz = m[10];\n        newDst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n        newDst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n        newDst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n        return newDst;\n    }\n    /**\n     * Rotate a 3D vector around the x-axis\n     *\n     * @param {ReadonlyVec3} a The vec3 point to rotate\n     * @param {ReadonlyVec3} b The origin of the rotation\n     * @param {Number} rad The angle of rotation in radians\n     * @param dst - The vector to set. If not passed a new one is created.\n     * @returns the rotated vector\n     */\n    function rotateX(a, b, rad, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const p = [];\n        const r = [];\n        //Translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n        //perform rotation\n        r[0] = p[0];\n        r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n        r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);\n        //translate to correct position\n        newDst[0] = r[0] + b[0];\n        newDst[1] = r[1] + b[1];\n        newDst[2] = r[2] + b[2];\n        return newDst;\n    }\n    /**\n     * Rotate a 3D vector around the y-axis\n     *\n     * @param {ReadonlyVec3} a The vec3 point to rotate\n     * @param {ReadonlyVec3} b The origin of the rotation\n     * @param {Number} rad The angle of rotation in radians\n     * @param dst - The vector to set. If not passed a new one is created.\n     * @returns the rotated vector\n     */\n    function rotateY(a, b, rad, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const p = [];\n        const r = [];\n        // translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n        // perform rotation\n        r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n        r[1] = p[1];\n        r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);\n        // translate to correct position\n        newDst[0] = r[0] + b[0];\n        newDst[1] = r[1] + b[1];\n        newDst[2] = r[2] + b[2];\n        return newDst;\n    }\n    /**\n     * Rotate a 3D vector around the z-axis\n     *\n     * @param {ReadonlyVec3} a The vec3 point to rotate\n     * @param {ReadonlyVec3} b The origin of the rotation\n     * @param {Number} rad The angle of rotation in radians\n     * @param dst - The vector to set. If not passed a new one is created.\n     * @returns {vec3} out\n     */\n    function rotateZ(a, b, rad, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const p = [];\n        const r = [];\n        // translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n        // perform rotation\n        r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n        r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n        r[2] = p[2];\n        // translate to correct position\n        newDst[0] = r[0] + b[0];\n        newDst[1] = r[1] + b[1];\n        newDst[2] = r[2] + b[2];\n        return newDst;\n    }\n    /**\n     * Treat a 3D vector as a direction and set it's length\n     *\n     * @param a The vec3 to lengthen\n     * @param len The length of the resulting vector\n     * @returns The lengthened vector\n     */\n    function setLength(a, len, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        normalize(a, newDst);\n        return mulScalar(newDst, len, newDst);\n    }\n    /**\n     * Ensure a vector is not longer than a max length\n     *\n     * @param a The vec3 to limit\n     * @param maxLen The longest length of the resulting vector\n     * @returns The vector, shortened to maxLen if it's too long\n     */\n    function truncate(a, maxLen, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        if (length(a) > maxLen) {\n            return setLength(a, maxLen, newDst);\n        }\n        return copy(a, newDst);\n    }\n    /**\n     * Return the vector exactly between 2 endpoint vectors\n     *\n     * @param a Endpoint 1\n     * @param b Endpoint 2\n     * @returns The vector exactly residing between endpoints 1 and 2\n     */\n    function midpoint(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        return lerp(a, b, 0.5, newDst);\n    }\n    return {\n        create,\n        fromValues,\n        set,\n        ceil,\n        floor,\n        round,\n        clamp,\n        add,\n        addScaled,\n        angle,\n        subtract,\n        sub,\n        equalsApproximately,\n        equals,\n        lerp,\n        lerpV,\n        max,\n        min,\n        mulScalar,\n        scale,\n        divScalar,\n        inverse,\n        invert,\n        cross,\n        dot,\n        length,\n        len,\n        lengthSq,\n        lenSq,\n        distance,\n        dist,\n        distanceSq,\n        distSq,\n        normalize,\n        negate,\n        copy,\n        clone,\n        multiply,\n        mul,\n        divide,\n        div,\n        random,\n        zero,\n        transformMat4,\n        transformMat4Upper3x3,\n        transformMat3,\n        transformQuat,\n        getTranslation,\n        getAxis,\n        getScaling,\n        rotateX,\n        rotateY,\n        rotateZ,\n        setLength,\n        truncate,\n        midpoint,\n    };\n}\nconst cache$4 = new Map();\nfunction getAPI$4(Ctor) {\n    let api = cache$4.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$4(Ctor);\n        cache$4.set(Ctor, api);\n    }\n    return api;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates a typed API for Mat3\n * */\nfunction getAPIImpl$3(Ctor) {\n    const vec2 = getAPI$5(Ctor);\n    const vec3 = getAPI$4(Ctor);\n    /**\n     * Create a Mat3 from values\n     *\n     * Note: Since passing in a raw JavaScript array\n     * is valid in all circumstances, if you want to\n     * force a JavaScript array into a Mat3's specified type\n     * it would be faster to use\n     *\n     * ```\n     * const m = mat3.clone(someJSArray);\n     * ```\n     *\n     * @param v0 - value for element 0\n     * @param v1 - value for element 1\n     * @param v2 - value for element 2\n     * @param v3 - value for element 3\n     * @param v4 - value for element 4\n     * @param v5 - value for element 5\n     * @param v6 - value for element 6\n     * @param v7 - value for element 7\n     * @param v8 - value for element 8\n     * @returns matrix created from values.\n     */\n    function create(v0, v1, v2, v3, v4, v5, v6, v7, v8) {\n        const newDst = new Ctor(12);\n        // to make the array homogenous\n        newDst[3] = 0;\n        newDst[7] = 0;\n        newDst[11] = 0;\n        if (v0 !== undefined) {\n            newDst[0] = v0;\n            if (v1 !== undefined) {\n                newDst[1] = v1;\n                if (v2 !== undefined) {\n                    newDst[2] = v2;\n                    if (v3 !== undefined) {\n                        newDst[4] = v3;\n                        if (v4 !== undefined) {\n                            newDst[5] = v4;\n                            if (v5 !== undefined) {\n                                newDst[6] = v5;\n                                if (v6 !== undefined) {\n                                    newDst[8] = v6;\n                                    if (v7 !== undefined) {\n                                        newDst[9] = v7;\n                                        if (v8 !== undefined) {\n                                            newDst[10] = v8;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Sets the values of a Mat3\n     * Also see {@link mat3.create} and {@link mat3.copy}\n     *\n     * @param v0 - value for element 0\n     * @param v1 - value for element 1\n     * @param v2 - value for element 2\n     * @param v3 - value for element 3\n     * @param v4 - value for element 4\n     * @param v5 - value for element 5\n     * @param v6 - value for element 6\n     * @param v7 - value for element 7\n     * @param v8 - value for element 8\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat3 set from values.\n     */\n    function set(v0, v1, v2, v3, v4, v5, v6, v7, v8, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = v0;\n        newDst[1] = v1;\n        newDst[2] = v2;\n        newDst[3] = 0;\n        newDst[4] = v3;\n        newDst[5] = v4;\n        newDst[6] = v5;\n        newDst[7] = 0;\n        newDst[8] = v6;\n        newDst[9] = v7;\n        newDst[10] = v8;\n        newDst[11] = 0;\n        return newDst;\n    }\n    /**\n     * Creates a Mat3 from the upper left 3x3 part of a Mat4\n     * @param m4 - source matrix\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat3 made from m4\n     */\n    function fromMat4(m4, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = m4[0];\n        newDst[1] = m4[1];\n        newDst[2] = m4[2];\n        newDst[3] = 0;\n        newDst[4] = m4[4];\n        newDst[5] = m4[5];\n        newDst[6] = m4[6];\n        newDst[7] = 0;\n        newDst[8] = m4[8];\n        newDst[9] = m4[9];\n        newDst[10] = m4[10];\n        newDst[11] = 0;\n        return newDst;\n    }\n    /**\n     * Creates a Mat3 rotation matrix from a quaternion\n     * @param q - quaternion to create matrix from\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat3 made from q\n     */\n    function fromQuat(q, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const x = q[0];\n        const y = q[1];\n        const z = q[2];\n        const w = q[3];\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const yx = y * x2;\n        const yy = y * y2;\n        const zx = z * x2;\n        const zy = z * y2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n        newDst[0] = 1 - yy - zz;\n        newDst[1] = yx + wz;\n        newDst[2] = zx - wy;\n        newDst[3] = 0;\n        newDst[4] = yx - wz;\n        newDst[5] = 1 - xx - zz;\n        newDst[6] = zy + wx;\n        newDst[7] = 0;\n        newDst[8] = zx + wy;\n        newDst[9] = zy - wx;\n        newDst[10] = 1 - xx - yy;\n        newDst[11] = 0;\n        return newDst;\n    }\n    /**\n     * Negates a matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns -m.\n     */\n    function negate(m, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = -m[0];\n        newDst[1] = -m[1];\n        newDst[2] = -m[2];\n        newDst[4] = -m[4];\n        newDst[5] = -m[5];\n        newDst[6] = -m[6];\n        newDst[8] = -m[8];\n        newDst[9] = -m[9];\n        newDst[10] = -m[10];\n        return newDst;\n    }\n    /**\n     * Copies a matrix. (same as {@link mat3.clone})\n     * Also see {@link mat3.create} and {@link mat3.set}\n     * @param m - The matrix.\n     * @param dst - The matrix. If not passed a new one is created.\n     * @returns A copy of m.\n     */\n    function copy(m, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = m[0];\n        newDst[1] = m[1];\n        newDst[2] = m[2];\n        newDst[4] = m[4];\n        newDst[5] = m[5];\n        newDst[6] = m[6];\n        newDst[8] = m[8];\n        newDst[9] = m[9];\n        newDst[10] = m[10];\n        return newDst;\n    }\n    /**\n     * Copies a matrix (same as {@link mat3.copy})\n     * Also see {@link mat3.create} and {@link mat3.set}\n     * @param m - The matrix.\n     * @param dst - The matrix. If not passed a new one is created.\n     * @returns A copy of m.\n     */\n    const clone = copy;\n    /**\n     * Check if 2 matrices are approximately equal\n     * @param a Operand matrix.\n     * @param b Operand matrix.\n     * @returns true if matrices are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON &&\n            Math.abs(a[4] - b[4]) < EPSILON &&\n            Math.abs(a[5] - b[5]) < EPSILON &&\n            Math.abs(a[6] - b[6]) < EPSILON &&\n            Math.abs(a[8] - b[8]) < EPSILON &&\n            Math.abs(a[9] - b[9]) < EPSILON &&\n            Math.abs(a[10] - b[10]) < EPSILON;\n    }\n    /**\n     * Check if 2 matrices are exactly equal\n     * @param a Operand matrix.\n     * @param b Operand matrix.\n     * @returns true if matrices are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] &&\n            a[1] === b[1] &&\n            a[2] === b[2] &&\n            a[4] === b[4] &&\n            a[5] === b[5] &&\n            a[6] === b[6] &&\n            a[8] === b[8] &&\n            a[9] === b[9] &&\n            a[10] === b[10];\n    }\n    /**\n     * Creates a 3-by-3 identity matrix.\n     *\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns A 3-by-3 identity matrix.\n     */\n    function identity(dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Takes the transpose of a matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The transpose of m.\n     */\n    function transpose(m, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        if (newDst === m) {\n            let t;\n            // 0 1 2\n            // 4 5 6\n            // 8 9 10\n            t = m[1];\n            m[1] = m[4];\n            m[4] = t;\n            t = m[2];\n            m[2] = m[8];\n            m[8] = t;\n            t = m[6];\n            m[6] = m[9];\n            m[9] = t;\n            return newDst;\n        }\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        newDst[0] = m00;\n        newDst[1] = m10;\n        newDst[2] = m20;\n        newDst[4] = m01;\n        newDst[5] = m11;\n        newDst[6] = m21;\n        newDst[8] = m02;\n        newDst[9] = m12;\n        newDst[10] = m22;\n        return newDst;\n    }\n    /**\n     * Computes the inverse of a 3-by-3 matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The inverse of m.\n     */\n    function inverse(m, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const b01 = m22 * m11 - m12 * m21;\n        const b11 = -m22 * m10 + m12 * m20;\n        const b21 = m21 * m10 - m11 * m20;\n        const invDet = 1 / (m00 * b01 + m01 * b11 + m02 * b21);\n        newDst[0] = b01 * invDet;\n        newDst[1] = (-m22 * m01 + m02 * m21) * invDet;\n        newDst[2] = (m12 * m01 - m02 * m11) * invDet;\n        newDst[4] = b11 * invDet;\n        newDst[5] = (m22 * m00 - m02 * m20) * invDet;\n        newDst[6] = (-m12 * m00 + m02 * m10) * invDet;\n        newDst[8] = b21 * invDet;\n        newDst[9] = (-m21 * m00 + m01 * m20) * invDet;\n        newDst[10] = (m11 * m00 - m01 * m10) * invDet;\n        return newDst;\n    }\n    /**\n     * Compute the determinant of a matrix\n     * @param m - the matrix\n     * @returns the determinant\n     */\n    function determinant(m) {\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        return m00 * (m11 * m22 - m21 * m12) -\n            m10 * (m01 * m22 - m21 * m02) +\n            m20 * (m01 * m12 - m11 * m02);\n    }\n    /**\n     * Computes the inverse of a 3-by-3 matrix. (same as inverse)\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The inverse of m.\n     */\n    const invert = inverse;\n    /**\n     * Multiplies two 3-by-3 matrices with a on the left and b on the right\n     * @param a - The matrix on the left.\n     * @param b - The matrix on the right.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix product of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const a00 = a[0];\n        const a01 = a[1];\n        const a02 = a[2];\n        const a10 = a[4 + 0];\n        const a11 = a[4 + 1];\n        const a12 = a[4 + 2];\n        const a20 = a[8 + 0];\n        const a21 = a[8 + 1];\n        const a22 = a[8 + 2];\n        const b00 = b[0];\n        const b01 = b[1];\n        const b02 = b[2];\n        const b10 = b[4 + 0];\n        const b11 = b[4 + 1];\n        const b12 = b[4 + 2];\n        const b20 = b[8 + 0];\n        const b21 = b[8 + 1];\n        const b22 = b[8 + 2];\n        newDst[0] = a00 * b00 + a10 * b01 + a20 * b02;\n        newDst[1] = a01 * b00 + a11 * b01 + a21 * b02;\n        newDst[2] = a02 * b00 + a12 * b01 + a22 * b02;\n        newDst[4] = a00 * b10 + a10 * b11 + a20 * b12;\n        newDst[5] = a01 * b10 + a11 * b11 + a21 * b12;\n        newDst[6] = a02 * b10 + a12 * b11 + a22 * b12;\n        newDst[8] = a00 * b20 + a10 * b21 + a20 * b22;\n        newDst[9] = a01 * b20 + a11 * b21 + a21 * b22;\n        newDst[10] = a02 * b20 + a12 * b21 + a22 * b22;\n        return newDst;\n    }\n    /**\n     * Multiplies two 3-by-3 matrices with a on the left and b on the right (same as multiply)\n     * @param a - The matrix on the left.\n     * @param b - The matrix on the right.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix product of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Sets the translation component of a 3-by-3 matrix to the given\n     * vector.\n     * @param a - The matrix.\n     * @param v - The vector.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix with translation set.\n     */\n    function setTranslation(a, v, dst) {\n        const newDst = (dst ?? identity());\n        if (a !== newDst) {\n            newDst[0] = a[0];\n            newDst[1] = a[1];\n            newDst[2] = a[2];\n            newDst[4] = a[4];\n            newDst[5] = a[5];\n            newDst[6] = a[6];\n        }\n        newDst[8] = v[0];\n        newDst[9] = v[1];\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Returns the translation component of a 3-by-3 matrix as a vector with 3\n     * entries.\n     * @param m - The matrix.\n     * @param dst - vector to hold result. If not passed a new one is created.\n     * @returns The translation component of m.\n     */\n    function getTranslation(m, dst) {\n        const newDst = (dst ?? vec2.create());\n        newDst[0] = m[8];\n        newDst[1] = m[9];\n        return newDst;\n    }\n    /**\n     * Returns an axis of a 3x3 matrix as a vector with 2 entries\n     * @param m - The matrix.\n     * @param axis - The axis 0 = x, 1 = y,\n     * @returns The axis component of m.\n     */\n    function getAxis(m, axis, dst) {\n        const newDst = (dst ?? vec2.create());\n        const off = axis * 4;\n        newDst[0] = m[off + 0];\n        newDst[1] = m[off + 1];\n        return newDst;\n    }\n    /**\n     * Sets an axis of a 3x3 matrix as a vector with 2 entries\n     * @param m - The matrix.\n     * @param v - the axis vector\n     * @param axis - The axis  0 = x, 1 = y;\n     * @param dst - The matrix to set. If not passed a new one is created.\n     * @returns The matrix with axis set.\n     */\n    function setAxis(m, v, axis, dst) {\n        const newDst = (dst === m ? m : copy(m, dst));\n        const off = axis * 4;\n        newDst[off + 0] = v[0];\n        newDst[off + 1] = v[1];\n        return newDst;\n    }\n    /**\n     * Returns the \"2d\" scaling component of the matrix\n     * @param m - The Matrix\n     * @param dst - The vector to set. If not passed a new one is created.\n     */\n    function getScaling(m, dst) {\n        const newDst = (dst ?? vec2.create());\n        const xx = m[0];\n        const xy = m[1];\n        const yx = m[4];\n        const yy = m[5];\n        newDst[0] = Math.sqrt(xx * xx + xy * xy);\n        newDst[1] = Math.sqrt(yx * yx + yy * yy);\n        return newDst;\n    }\n    /**\n     * Returns the \"3d\" scaling component of the matrix\n     * @param m - The Matrix\n     * @param dst - The vector to set. If not passed a new one is created.\n     */\n    function get3DScaling(m, dst) {\n        const newDst = (dst ?? vec3.create());\n        const xx = m[0];\n        const xy = m[1];\n        const xz = m[2];\n        const yx = m[4];\n        const yy = m[5];\n        const yz = m[6];\n        const zx = m[8];\n        const zy = m[9];\n        const zz = m[10];\n        newDst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n        newDst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n        newDst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which translates by the given vector v.\n     * @param v - The vector by which to translate.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The translation matrix.\n     */\n    function translation(v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[8] = v[0];\n        newDst[9] = v[1];\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Translates the given 3-by-3 matrix by the given vector v.\n     * @param m - The matrix.\n     * @param v - The vector by which to translate.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The translated matrix.\n     */\n    function translate(m, v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const v0 = v[0];\n        const v1 = v[1];\n        const m00 = m[0];\n        const m01 = m[1];\n        const m02 = m[2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        if (m !== newDst) {\n            newDst[0] = m00;\n            newDst[1] = m01;\n            newDst[2] = m02;\n            newDst[4] = m10;\n            newDst[5] = m11;\n            newDst[6] = m12;\n        }\n        newDst[8] = m00 * v0 + m10 * v1 + m20;\n        newDst[9] = m01 * v0 + m11 * v1 + m21;\n        newDst[10] = m02 * v0 + m12 * v1 + m22;\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which rotates  by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotation(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c;\n        newDst[1] = s;\n        newDst[2] = 0;\n        newDst[4] = -s;\n        newDst[5] = c;\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Rotates the given 3-by-3 matrix  by the given angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotate(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c * m00 + s * m10;\n        newDst[1] = c * m01 + s * m11;\n        newDst[2] = c * m02 + s * m12;\n        newDst[4] = c * m10 - s * m00;\n        newDst[5] = c * m11 - s * m01;\n        newDst[6] = c * m12 - s * m02;\n        if (m !== newDst) {\n            newDst[8] = m[8];\n            newDst[9] = m[9];\n            newDst[10] = m[10];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which rotates around the x-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotationX(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = c;\n        newDst[6] = s;\n        newDst[8] = 0;\n        newDst[9] = -s;\n        newDst[10] = c;\n        return newDst;\n    }\n    /**\n     * Rotates the given 3-by-3 matrix around the x-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotateX(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const m10 = m[4];\n        const m11 = m[5];\n        const m12 = m[6];\n        const m20 = m[8];\n        const m21 = m[9];\n        const m22 = m[10];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[4] = c * m10 + s * m20;\n        newDst[5] = c * m11 + s * m21;\n        newDst[6] = c * m12 + s * m22;\n        newDst[8] = c * m20 - s * m10;\n        newDst[9] = c * m21 - s * m11;\n        newDst[10] = c * m22 - s * m12;\n        if (m !== newDst) {\n            newDst[0] = m[0];\n            newDst[1] = m[1];\n            newDst[2] = m[2];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which rotates around the y-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotationY(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c;\n        newDst[1] = 0;\n        newDst[2] = -s;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[8] = s;\n        newDst[9] = 0;\n        newDst[10] = c;\n        return newDst;\n    }\n    /**\n     * Rotates the given 3-by-3 matrix around the y-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotateY(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c * m00 - s * m20;\n        newDst[1] = c * m01 - s * m21;\n        newDst[2] = c * m02 - s * m22;\n        newDst[8] = c * m20 + s * m00;\n        newDst[9] = c * m21 + s * m01;\n        newDst[10] = c * m22 + s * m02;\n        if (m !== newDst) {\n            newDst[4] = m[4];\n            newDst[5] = m[5];\n            newDst[6] = m[6];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which rotates around the z-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    const rotationZ = rotation;\n    /**\n     * Rotates the given 3-by-3 matrix around the z-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    const rotateZ = rotate;\n    /**\n     * Creates a 3-by-3 matrix which scales in each dimension by an amount given by\n     * the corresponding entry in the given vector; assumes the vector has two\n     * entries.\n     * @param v - A vector of\n     *     2 entries specifying the factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function scaling(v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = v[0];\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = v[1];\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Scales the given 3-by-3 matrix in each dimension by an amount\n     * given by the corresponding entry in the given vector; assumes the vector has\n     * two entries.\n     * @param m - The matrix to be modified.\n     * @param v - A vector of 2 entries specifying the\n     *     factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function scale(m, v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const v0 = v[0];\n        const v1 = v[1];\n        newDst[0] = v0 * m[0 * 4 + 0];\n        newDst[1] = v0 * m[0 * 4 + 1];\n        newDst[2] = v0 * m[0 * 4 + 2];\n        newDst[4] = v1 * m[1 * 4 + 0];\n        newDst[5] = v1 * m[1 * 4 + 1];\n        newDst[6] = v1 * m[1 * 4 + 2];\n        if (m !== newDst) {\n            newDst[8] = m[8];\n            newDst[9] = m[9];\n            newDst[10] = m[10];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which scales in each dimension by an amount given by\n     * the corresponding entry in the given vector; assumes the vector has three\n     * entries.\n     * @param v - A vector of\n     *     3 entries specifying the factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function scaling3D(v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = v[0];\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = v[1];\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = v[2];\n        return newDst;\n    }\n    /**\n     * Scales the given 3-by-3 matrix in each dimension by an amount\n     * given by the corresponding entry in the given vector; assumes the vector has\n     * three entries.\n     * @param m - The matrix to be modified.\n     * @param v - A vector of 3 entries specifying the\n     *     factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function scale3D(m, v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        newDst[0] = v0 * m[0 * 4 + 0];\n        newDst[1] = v0 * m[0 * 4 + 1];\n        newDst[2] = v0 * m[0 * 4 + 2];\n        newDst[4] = v1 * m[1 * 4 + 0];\n        newDst[5] = v1 * m[1 * 4 + 1];\n        newDst[6] = v1 * m[1 * 4 + 2];\n        newDst[8] = v2 * m[2 * 4 + 0];\n        newDst[9] = v2 * m[2 * 4 + 1];\n        newDst[10] = v2 * m[2 * 4 + 2];\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which scales uniformly in the X and Y dimensions\n     * @param s - Amount to scale\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function uniformScaling(s, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = s;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = s;\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Scales the given 3-by-3 matrix in the X and Y dimension by an amount\n     * given.\n     * @param m - The matrix to be modified.\n     * @param s - Amount to scale.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function uniformScale(m, s, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = s * m[0 * 4 + 0];\n        newDst[1] = s * m[0 * 4 + 1];\n        newDst[2] = s * m[0 * 4 + 2];\n        newDst[4] = s * m[1 * 4 + 0];\n        newDst[5] = s * m[1 * 4 + 1];\n        newDst[6] = s * m[1 * 4 + 2];\n        if (m !== newDst) {\n            newDst[8] = m[8];\n            newDst[9] = m[9];\n            newDst[10] = m[10];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which scales uniformly in each dimension\n     * @param s - Amount to scale\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function uniformScaling3D(s, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = s;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = s;\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = s;\n        return newDst;\n    }\n    /**\n     * Scales the given 3-by-3 matrix in each dimension by an amount\n     * given.\n     * @param m - The matrix to be modified.\n     * @param s - Amount to scale.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function uniformScale3D(m, s, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = s * m[0 * 4 + 0];\n        newDst[1] = s * m[0 * 4 + 1];\n        newDst[2] = s * m[0 * 4 + 2];\n        newDst[4] = s * m[1 * 4 + 0];\n        newDst[5] = s * m[1 * 4 + 1];\n        newDst[6] = s * m[1 * 4 + 2];\n        newDst[8] = s * m[2 * 4 + 0];\n        newDst[9] = s * m[2 * 4 + 1];\n        newDst[10] = s * m[2 * 4 + 2];\n        return newDst;\n    }\n    return {\n        clone,\n        create,\n        set,\n        fromMat4,\n        fromQuat,\n        negate,\n        copy,\n        equalsApproximately,\n        equals,\n        identity,\n        transpose,\n        inverse,\n        invert,\n        determinant,\n        mul,\n        multiply,\n        setTranslation,\n        getTranslation,\n        getAxis,\n        setAxis,\n        getScaling,\n        get3DScaling,\n        translation,\n        translate,\n        rotation,\n        rotate,\n        rotationX,\n        rotateX,\n        rotationY,\n        rotateY,\n        rotationZ,\n        rotateZ,\n        scaling,\n        scale,\n        uniformScaling,\n        uniformScale,\n        scaling3D,\n        scale3D,\n        uniformScaling3D,\n        uniformScale3D,\n    };\n}\nconst cache$3 = new Map();\nfunction getAPI$3(Ctor) {\n    let api = cache$3.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$3(Ctor);\n        cache$3.set(Ctor, api);\n    }\n    return api;\n}\n\n/**\n * Generates a typed API for Mat4\n * */\nfunction getAPIImpl$2(Ctor) {\n    const vec3 = getAPI$4(Ctor);\n    /**\n     * 4x4 Matrix math math functions.\n     *\n     * Almost all functions take an optional `newDst` argument. If it is not passed in the\n     * functions will create a new matrix. In other words you can do this\n     *\n     *     const mat = mat4.translation([1, 2, 3]);  // Creates a new translation matrix\n     *\n     * or\n     *\n     *     const mat = mat4.create();\n     *     mat4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n     *\n     * The first style is often easier but depending on where it's used it generates garbage where\n     * as there is almost never allocation with the second style.\n     *\n     * It is always save to pass any matrix as the destination. So for example\n     *\n     *     const mat = mat4.identity();\n     *     const trans = mat4.translation([1, 2, 3]);\n     *     mat4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n     *\n     */\n    /**\n     * Create a Mat4 from values\n     *\n     * Note: Since passing in a raw JavaScript array\n     * is valid in all circumstances, if you want to\n     * force a JavaScript array into a Mat4's specified type\n     * it would be faster to use\n     *\n     * ```\n     * const m = mat4.clone(someJSArray);\n     * ```\n     *\n     * @param v0 - value for element 0\n     * @param v1 - value for element 1\n     * @param v2 - value for element 2\n     * @param v3 - value for element 3\n     * @param v4 - value for element 4\n     * @param v5 - value for element 5\n     * @param v6 - value for element 6\n     * @param v7 - value for element 7\n     * @param v8 - value for element 8\n     * @param v9 - value for element 9\n     * @param v10 - value for element 10\n     * @param v11 - value for element 11\n     * @param v12 - value for element 12\n     * @param v13 - value for element 13\n     * @param v14 - value for element 14\n     * @param v15 - value for element 15\n     * @returns created from values.\n     */\n    function create(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) {\n        const newDst = new Ctor(16);\n        if (v0 !== undefined) {\n            newDst[0] = v0;\n            if (v1 !== undefined) {\n                newDst[1] = v1;\n                if (v2 !== undefined) {\n                    newDst[2] = v2;\n                    if (v3 !== undefined) {\n                        newDst[3] = v3;\n                        if (v4 !== undefined) {\n                            newDst[4] = v4;\n                            if (v5 !== undefined) {\n                                newDst[5] = v5;\n                                if (v6 !== undefined) {\n                                    newDst[6] = v6;\n                                    if (v7 !== undefined) {\n                                        newDst[7] = v7;\n                                        if (v8 !== undefined) {\n                                            newDst[8] = v8;\n                                            if (v9 !== undefined) {\n                                                newDst[9] = v9;\n                                                if (v10 !== undefined) {\n                                                    newDst[10] = v10;\n                                                    if (v11 !== undefined) {\n                                                        newDst[11] = v11;\n                                                        if (v12 !== undefined) {\n                                                            newDst[12] = v12;\n                                                            if (v13 !== undefined) {\n                                                                newDst[13] = v13;\n                                                                if (v14 !== undefined) {\n                                                                    newDst[14] = v14;\n                                                                    if (v15 !== undefined) {\n                                                                        newDst[15] = v15;\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Sets the values of a Mat4\n     * Also see {@link mat4.create} and {@link mat4.copy}\n     *\n     * @param v0 - value for element 0\n     * @param v1 - value for element 1\n     * @param v2 - value for element 2\n     * @param v3 - value for element 3\n     * @param v4 - value for element 4\n     * @param v5 - value for element 5\n     * @param v6 - value for element 6\n     * @param v7 - value for element 7\n     * @param v8 - value for element 8\n     * @param v9 - value for element 9\n     * @param v10 - value for element 10\n     * @param v11 - value for element 11\n     * @param v12 - value for element 12\n     * @param v13 - value for element 13\n     * @param v14 - value for element 14\n     * @param v15 - value for element 15\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat4 created from values.\n     */\n    function set(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = v0;\n        newDst[1] = v1;\n        newDst[2] = v2;\n        newDst[3] = v3;\n        newDst[4] = v4;\n        newDst[5] = v5;\n        newDst[6] = v6;\n        newDst[7] = v7;\n        newDst[8] = v8;\n        newDst[9] = v9;\n        newDst[10] = v10;\n        newDst[11] = v11;\n        newDst[12] = v12;\n        newDst[13] = v13;\n        newDst[14] = v14;\n        newDst[15] = v15;\n        return newDst;\n    }\n    /**\n     * Creates a Mat4 from a Mat3\n     * @param m3 - source matrix\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat4 made from m3\n     */\n    function fromMat3(m3, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = m3[0];\n        newDst[1] = m3[1];\n        newDst[2] = m3[2];\n        newDst[3] = 0;\n        newDst[4] = m3[4];\n        newDst[5] = m3[5];\n        newDst[6] = m3[6];\n        newDst[7] = 0;\n        newDst[8] = m3[8];\n        newDst[9] = m3[9];\n        newDst[10] = m3[10];\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Creates a Mat4 rotation matrix from a quaternion\n     * @param q - quaternion to create matrix from\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat4 made from q\n     */\n    function fromQuat(q, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const x = q[0];\n        const y = q[1];\n        const z = q[2];\n        const w = q[3];\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const yx = y * x2;\n        const yy = y * y2;\n        const zx = z * x2;\n        const zy = z * y2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n        newDst[0] = 1 - yy - zz;\n        newDst[1] = yx + wz;\n        newDst[2] = zx - wy;\n        newDst[3] = 0;\n        newDst[4] = yx - wz;\n        newDst[5] = 1 - xx - zz;\n        newDst[6] = zy + wx;\n        newDst[7] = 0;\n        newDst[8] = zx + wy;\n        newDst[9] = zy - wx;\n        newDst[10] = 1 - xx - yy;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Negates a matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns -m.\n     */\n    function negate(m, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = -m[0];\n        newDst[1] = -m[1];\n        newDst[2] = -m[2];\n        newDst[3] = -m[3];\n        newDst[4] = -m[4];\n        newDst[5] = -m[5];\n        newDst[6] = -m[6];\n        newDst[7] = -m[7];\n        newDst[8] = -m[8];\n        newDst[9] = -m[9];\n        newDst[10] = -m[10];\n        newDst[11] = -m[11];\n        newDst[12] = -m[12];\n        newDst[13] = -m[13];\n        newDst[14] = -m[14];\n        newDst[15] = -m[15];\n        return newDst;\n    }\n    /**\n     * Copies a matrix. (same as {@link mat4.clone})\n     * Also see {@link mat4.create} and {@link mat4.set}\n     * @param m - The matrix.\n     * @param dst - The matrix. If not passed a new one is created.\n     * @returns A copy of m.\n     */\n    function copy(m, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = m[0];\n        newDst[1] = m[1];\n        newDst[2] = m[2];\n        newDst[3] = m[3];\n        newDst[4] = m[4];\n        newDst[5] = m[5];\n        newDst[6] = m[6];\n        newDst[7] = m[7];\n        newDst[8] = m[8];\n        newDst[9] = m[9];\n        newDst[10] = m[10];\n        newDst[11] = m[11];\n        newDst[12] = m[12];\n        newDst[13] = m[13];\n        newDst[14] = m[14];\n        newDst[15] = m[15];\n        return newDst;\n    }\n    /**\n     * Copies a matrix (same as {@link mat4.copy})\n     * Also see {@link mat4.create} and {@link mat4.set}\n     * @param m - The matrix.\n     * @param dst - The matrix. If not passed a new one is created.\n     * @returns A copy of m.\n     */\n    const clone = copy;\n    /**\n     * Check if 2 matrices are approximately equal\n     * @param a - Operand matrix.\n     * @param b - Operand matrix.\n     * @returns true if matrices are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON &&\n            Math.abs(a[3] - b[3]) < EPSILON &&\n            Math.abs(a[4] - b[4]) < EPSILON &&\n            Math.abs(a[5] - b[5]) < EPSILON &&\n            Math.abs(a[6] - b[6]) < EPSILON &&\n            Math.abs(a[7] - b[7]) < EPSILON &&\n            Math.abs(a[8] - b[8]) < EPSILON &&\n            Math.abs(a[9] - b[9]) < EPSILON &&\n            Math.abs(a[10] - b[10]) < EPSILON &&\n            Math.abs(a[11] - b[11]) < EPSILON &&\n            Math.abs(a[12] - b[12]) < EPSILON &&\n            Math.abs(a[13] - b[13]) < EPSILON &&\n            Math.abs(a[14] - b[14]) < EPSILON &&\n            Math.abs(a[15] - b[15]) < EPSILON;\n    }\n    /**\n     * Check if 2 matrices are exactly equal\n     * @param a - Operand matrix.\n     * @param b - Operand matrix.\n     * @returns true if matrices are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] &&\n            a[1] === b[1] &&\n            a[2] === b[2] &&\n            a[3] === b[3] &&\n            a[4] === b[4] &&\n            a[5] === b[5] &&\n            a[6] === b[6] &&\n            a[7] === b[7] &&\n            a[8] === b[8] &&\n            a[9] === b[9] &&\n            a[10] === b[10] &&\n            a[11] === b[11] &&\n            a[12] === b[12] &&\n            a[13] === b[13] &&\n            a[14] === b[14] &&\n            a[15] === b[15];\n    }\n    /**\n     * Creates a 4-by-4 identity matrix.\n     *\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns A 4-by-4 identity matrix.\n     */\n    function identity(dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Takes the transpose of a matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The transpose of m.\n     */\n    function transpose(m, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        if (newDst === m) {\n            let t;\n            t = m[1];\n            m[1] = m[4];\n            m[4] = t;\n            t = m[2];\n            m[2] = m[8];\n            m[8] = t;\n            t = m[3];\n            m[3] = m[12];\n            m[12] = t;\n            t = m[6];\n            m[6] = m[9];\n            m[9] = t;\n            t = m[7];\n            m[7] = m[13];\n            m[13] = t;\n            t = m[11];\n            m[11] = m[14];\n            m[14] = t;\n            return newDst;\n        }\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const m30 = m[3 * 4 + 0];\n        const m31 = m[3 * 4 + 1];\n        const m32 = m[3 * 4 + 2];\n        const m33 = m[3 * 4 + 3];\n        newDst[0] = m00;\n        newDst[1] = m10;\n        newDst[2] = m20;\n        newDst[3] = m30;\n        newDst[4] = m01;\n        newDst[5] = m11;\n        newDst[6] = m21;\n        newDst[7] = m31;\n        newDst[8] = m02;\n        newDst[9] = m12;\n        newDst[10] = m22;\n        newDst[11] = m32;\n        newDst[12] = m03;\n        newDst[13] = m13;\n        newDst[14] = m23;\n        newDst[15] = m33;\n        return newDst;\n    }\n    /**\n     * Computes the inverse of a 4-by-4 matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The inverse of m.\n     */\n    function inverse(m, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const m30 = m[3 * 4 + 0];\n        const m31 = m[3 * 4 + 1];\n        const m32 = m[3 * 4 + 2];\n        const m33 = m[3 * 4 + 3];\n        const tmp0 = m22 * m33;\n        const tmp1 = m32 * m23;\n        const tmp2 = m12 * m33;\n        const tmp3 = m32 * m13;\n        const tmp4 = m12 * m23;\n        const tmp5 = m22 * m13;\n        const tmp6 = m02 * m33;\n        const tmp7 = m32 * m03;\n        const tmp8 = m02 * m23;\n        const tmp9 = m22 * m03;\n        const tmp10 = m02 * m13;\n        const tmp11 = m12 * m03;\n        const tmp12 = m20 * m31;\n        const tmp13 = m30 * m21;\n        const tmp14 = m10 * m31;\n        const tmp15 = m30 * m11;\n        const tmp16 = m10 * m21;\n        const tmp17 = m20 * m11;\n        const tmp18 = m00 * m31;\n        const tmp19 = m30 * m01;\n        const tmp20 = m00 * m21;\n        const tmp21 = m20 * m01;\n        const tmp22 = m00 * m11;\n        const tmp23 = m10 * m01;\n        const t0 = (tmp0 * m11 + tmp3 * m21 + tmp4 * m31) -\n            (tmp1 * m11 + tmp2 * m21 + tmp5 * m31);\n        const t1 = (tmp1 * m01 + tmp6 * m21 + tmp9 * m31) -\n            (tmp0 * m01 + tmp7 * m21 + tmp8 * m31);\n        const t2 = (tmp2 * m01 + tmp7 * m11 + tmp10 * m31) -\n            (tmp3 * m01 + tmp6 * m11 + tmp11 * m31);\n        const t3 = (tmp5 * m01 + tmp8 * m11 + tmp11 * m21) -\n            (tmp4 * m01 + tmp9 * m11 + tmp10 * m21);\n        const d = 1 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n        newDst[0] = d * t0;\n        newDst[1] = d * t1;\n        newDst[2] = d * t2;\n        newDst[3] = d * t3;\n        newDst[4] = d * ((tmp1 * m10 + tmp2 * m20 + tmp5 * m30) -\n            (tmp0 * m10 + tmp3 * m20 + tmp4 * m30));\n        newDst[5] = d * ((tmp0 * m00 + tmp7 * m20 + tmp8 * m30) -\n            (tmp1 * m00 + tmp6 * m20 + tmp9 * m30));\n        newDst[6] = d * ((tmp3 * m00 + tmp6 * m10 + tmp11 * m30) -\n            (tmp2 * m00 + tmp7 * m10 + tmp10 * m30));\n        newDst[7] = d * ((tmp4 * m00 + tmp9 * m10 + tmp10 * m20) -\n            (tmp5 * m00 + tmp8 * m10 + tmp11 * m20));\n        newDst[8] = d * ((tmp12 * m13 + tmp15 * m23 + tmp16 * m33) -\n            (tmp13 * m13 + tmp14 * m23 + tmp17 * m33));\n        newDst[9] = d * ((tmp13 * m03 + tmp18 * m23 + tmp21 * m33) -\n            (tmp12 * m03 + tmp19 * m23 + tmp20 * m33));\n        newDst[10] = d * ((tmp14 * m03 + tmp19 * m13 + tmp22 * m33) -\n            (tmp15 * m03 + tmp18 * m13 + tmp23 * m33));\n        newDst[11] = d * ((tmp17 * m03 + tmp20 * m13 + tmp23 * m23) -\n            (tmp16 * m03 + tmp21 * m13 + tmp22 * m23));\n        newDst[12] = d * ((tmp14 * m22 + tmp17 * m32 + tmp13 * m12) -\n            (tmp16 * m32 + tmp12 * m12 + tmp15 * m22));\n        newDst[13] = d * ((tmp20 * m32 + tmp12 * m02 + tmp19 * m22) -\n            (tmp18 * m22 + tmp21 * m32 + tmp13 * m02));\n        newDst[14] = d * ((tmp18 * m12 + tmp23 * m32 + tmp15 * m02) -\n            (tmp22 * m32 + tmp14 * m02 + tmp19 * m12));\n        newDst[15] = d * ((tmp22 * m22 + tmp16 * m02 + tmp21 * m12) -\n            (tmp20 * m12 + tmp23 * m22 + tmp17 * m02));\n        return newDst;\n    }\n    /**\n     * Compute the determinant of a matrix\n     * @param m - the matrix\n     * @returns the determinant\n     */\n    function determinant(m) {\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const m30 = m[3 * 4 + 0];\n        const m31 = m[3 * 4 + 1];\n        const m32 = m[3 * 4 + 2];\n        const m33 = m[3 * 4 + 3];\n        const tmp0 = m22 * m33;\n        const tmp1 = m32 * m23;\n        const tmp2 = m12 * m33;\n        const tmp3 = m32 * m13;\n        const tmp4 = m12 * m23;\n        const tmp5 = m22 * m13;\n        const tmp6 = m02 * m33;\n        const tmp7 = m32 * m03;\n        const tmp8 = m02 * m23;\n        const tmp9 = m22 * m03;\n        const tmp10 = m02 * m13;\n        const tmp11 = m12 * m03;\n        const t0 = (tmp0 * m11 + tmp3 * m21 + tmp4 * m31) -\n            (tmp1 * m11 + tmp2 * m21 + tmp5 * m31);\n        const t1 = (tmp1 * m01 + tmp6 * m21 + tmp9 * m31) -\n            (tmp0 * m01 + tmp7 * m21 + tmp8 * m31);\n        const t2 = (tmp2 * m01 + tmp7 * m11 + tmp10 * m31) -\n            (tmp3 * m01 + tmp6 * m11 + tmp11 * m31);\n        const t3 = (tmp5 * m01 + tmp8 * m11 + tmp11 * m21) -\n            (tmp4 * m01 + tmp9 * m11 + tmp10 * m21);\n        return m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3;\n    }\n    /**\n     * Computes the inverse of a 4-by-4 matrix. (same as inverse)\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The inverse of m.\n     */\n    const invert = inverse;\n    /**\n     * Multiplies two 4-by-4 matrices with a on the left and b on the right\n     * @param a - The matrix on the left.\n     * @param b - The matrix on the right.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix product of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const a00 = a[0];\n        const a01 = a[1];\n        const a02 = a[2];\n        const a03 = a[3];\n        const a10 = a[4 + 0];\n        const a11 = a[4 + 1];\n        const a12 = a[4 + 2];\n        const a13 = a[4 + 3];\n        const a20 = a[8 + 0];\n        const a21 = a[8 + 1];\n        const a22 = a[8 + 2];\n        const a23 = a[8 + 3];\n        const a30 = a[12 + 0];\n        const a31 = a[12 + 1];\n        const a32 = a[12 + 2];\n        const a33 = a[12 + 3];\n        const b00 = b[0];\n        const b01 = b[1];\n        const b02 = b[2];\n        const b03 = b[3];\n        const b10 = b[4 + 0];\n        const b11 = b[4 + 1];\n        const b12 = b[4 + 2];\n        const b13 = b[4 + 3];\n        const b20 = b[8 + 0];\n        const b21 = b[8 + 1];\n        const b22 = b[8 + 2];\n        const b23 = b[8 + 3];\n        const b30 = b[12 + 0];\n        const b31 = b[12 + 1];\n        const b32 = b[12 + 2];\n        const b33 = b[12 + 3];\n        newDst[0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n        newDst[1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n        newDst[2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n        newDst[3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n        newDst[4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n        newDst[5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n        newDst[6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n        newDst[7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n        newDst[8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n        newDst[9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n        newDst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n        newDst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n        newDst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n        newDst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n        newDst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n        newDst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n        return newDst;\n    }\n    /**\n     * Multiplies two 4-by-4 matrices with a on the left and b on the right (same as multiply)\n     * @param a - The matrix on the left.\n     * @param b - The matrix on the right.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix product of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Sets the translation component of a 4-by-4 matrix to the given\n     * vector.\n     * @param a - The matrix.\n     * @param v - The vector.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix with translation set.\n     */\n    function setTranslation(a, v, dst) {\n        const newDst = (dst ?? identity());\n        if (a !== newDst) {\n            newDst[0] = a[0];\n            newDst[1] = a[1];\n            newDst[2] = a[2];\n            newDst[3] = a[3];\n            newDst[4] = a[4];\n            newDst[5] = a[5];\n            newDst[6] = a[6];\n            newDst[7] = a[7];\n            newDst[8] = a[8];\n            newDst[9] = a[9];\n            newDst[10] = a[10];\n            newDst[11] = a[11];\n        }\n        newDst[12] = v[0];\n        newDst[13] = v[1];\n        newDst[14] = v[2];\n        newDst[15] = 1;\n        return newDst;\n    }\n    ///**\n    // * Returns the translation component of a 4-by-4 matrix as a vector with 3\n    // * entries.\n    // * @param m - The matrix.\n    // * @param dst - vector to hold result. If not passed a new one is created.\n    // * @returns The translation component of m.\n    // */\n    function getTranslation(m, dst) {\n        const newDst = (dst ?? vec3.create());\n        newDst[0] = m[12];\n        newDst[1] = m[13];\n        newDst[2] = m[14];\n        return newDst;\n    }\n    /**\n     * Returns an axis of a 4x4 matrix as a vector with 3 entries\n     * @param m - The matrix.\n     * @param axis - The axis 0 = x, 1 = y, 2 = z;\n     * @returns The axis component of m.\n     */\n    function getAxis(m, axis, dst) {\n        const newDst = (dst ?? vec3.create());\n        const off = axis * 4;\n        newDst[0] = m[off + 0];\n        newDst[1] = m[off + 1];\n        newDst[2] = m[off + 2];\n        return newDst;\n    }\n    /**\n     * Sets an axis of a 4x4 matrix as a vector with 3 entries\n     * @param m - The matrix.\n     * @param v - the axis vector\n     * @param axis - The axis  0 = x, 1 = y, 2 = z;\n     * @param dst - The matrix to set. If not passed a new one is created.\n     * @returns The matrix with axis set.\n     */\n    function setAxis(m, v, axis, dst) {\n        const newDst = (dst === m) ? dst : copy(m, dst);\n        const off = axis * 4;\n        newDst[off + 0] = v[0];\n        newDst[off + 1] = v[1];\n        newDst[off + 2] = v[2];\n        return newDst;\n    }\n    /**\n     * Returns the \"3d\" scaling component of the matrix\n     * @param m - The Matrix\n     * @param dst - The vector to set. If not passed a new one is created.\n     */\n    function getScaling(m, dst) {\n        const newDst = (dst ?? vec3.create());\n        const xx = m[0];\n        const xy = m[1];\n        const xz = m[2];\n        const yx = m[4];\n        const yy = m[5];\n        const yz = m[6];\n        const zx = m[8];\n        const zy = m[9];\n        const zz = m[10];\n        newDst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n        newDst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n        newDst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 perspective transformation matrix given the angular height\n     * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n     * arguments define a frustum extending in the negative z direction.  The given\n     * angle is the vertical angle of the frustum, and the horizontal angle is\n     * determined to produce the given aspect ratio.  The arguments near and far are\n     * the distances to the near and far clipping planes.  Note that near and far\n     * are not z coordinates, but rather they are distances along the negative\n     * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n     * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n     * from 0 to 1 in the z dimension.\n     *\n     * Note: If you pass `Infinity` for zFar then it will produce a projection matrix\n     * returns -Infinity for Z when transforming coordinates with Z <= 0 and +Infinity for Z\n     * otherwise.\n     *\n     * @param fieldOfViewYInRadians - The camera angle from top to bottom (in radians).\n     * @param aspect - The aspect ratio width / height.\n     * @param zNear - The depth (negative z coordinate)\n     *     of the near clipping plane.\n     * @param zFar - The depth (negative z coordinate)\n     *     of the far clipping plane.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The perspective matrix.\n     */\n    function perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n        newDst[0] = f / aspect;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = f;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[11] = -1;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[15] = 0;\n        if (Number.isFinite(zFar)) {\n            const rangeInv = 1 / (zNear - zFar);\n            newDst[10] = zFar * rangeInv;\n            newDst[14] = zFar * zNear * rangeInv;\n        }\n        else {\n            newDst[10] = -1;\n            newDst[14] = -zNear;\n        }\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 reverse-z perspective transformation matrix given the angular height\n     * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n     * arguments define a frustum extending in the negative z direction.  The given\n     * angle is the vertical angle of the frustum, and the horizontal angle is\n     * determined to produce the given aspect ratio.  The arguments near and far are\n     * the distances to the near and far clipping planes.  Note that near and far\n     * are not z coordinates, but rather they are distances along the negative\n     * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n     * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n     * from 1 (at -zNear) to 0 (at -zFar) in the z dimension.\n     *\n     * @param fieldOfViewYInRadians - The camera angle from top to bottom (in radians).\n     * @param aspect - The aspect ratio width / height.\n     * @param zNear - The depth (negative z coordinate)\n     *     of the near clipping plane.\n     * @param zFar - The depth (negative z coordinate)\n     *     of the far clipping plane. (default = Infinity)\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The perspective matrix.\n     */ function perspectiveReverseZ(fieldOfViewYInRadians, aspect, zNear, zFar = Infinity, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const f = 1 / Math.tan(fieldOfViewYInRadians * 0.5);\n        newDst[0] = f / aspect;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = f;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[11] = -1;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[15] = 0;\n        if (zFar === Infinity) {\n            newDst[10] = 0;\n            newDst[14] = zNear;\n        }\n        else {\n            const rangeInv = 1 / (zFar - zNear);\n            newDst[10] = zNear * rangeInv;\n            newDst[14] = zFar * zNear * rangeInv;\n        }\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 orthogonal transformation matrix that transforms from\n     * the given the left, right, bottom, and top dimensions to -1 +1 in x, and y\n     * and 0 to +1 in z.\n     * @param left - Left side of the near clipping plane viewport.\n     * @param right - Right side of the near clipping plane viewport.\n     * @param bottom - Bottom of the near clipping plane viewport.\n     * @param top - Top of the near clipping plane viewport.\n     * @param near - The depth (negative z coordinate)\n     *     of the near clipping plane.\n     * @param far - The depth (negative z coordinate)\n     *     of the far clipping plane.\n     * @param dst - Output matrix. If not passed a new one is created.\n     * @returns The orthographic projection matrix.\n     */\n    function ortho(left, right, bottom, top, near, far, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = 2 / (right - left);\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 2 / (top - bottom);\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1 / (near - far);\n        newDst[11] = 0;\n        newDst[12] = (right + left) / (left - right);\n        newDst[13] = (top + bottom) / (bottom - top);\n        newDst[14] = near / (near - far);\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 perspective transformation matrix given the left, right,\n     * top, bottom, near and far clipping planes. The arguments define a frustum\n     * extending in the negative z direction. The arguments near and far are the\n     * distances to the near and far clipping planes. Note that near and far are not\n     * z coordinates, but rather they are distances along the negative z-axis. The\n     * matrix generated sends the viewing frustum to the unit box. We assume a unit\n     * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n     * dimension.\n     * @param left - The x coordinate of the left plane of the box.\n     * @param right - The x coordinate of the right plane of the box.\n     * @param bottom - The y coordinate of the bottom plane of the box.\n     * @param top - The y coordinate of the right plane of the box.\n     * @param near - The negative z coordinate of the near plane of the box.\n     * @param far - The negative z coordinate of the far plane of the box.\n     * @param dst - Output matrix. If not passed a new one is created.\n     * @returns The perspective projection matrix.\n     */\n    function frustum(left, right, bottom, top, near, far, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const dx = (right - left);\n        const dy = (top - bottom);\n        const dz = (near - far);\n        newDst[0] = 2 * near / dx;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 2 * near / dy;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = (left + right) / dx;\n        newDst[9] = (top + bottom) / dy;\n        newDst[10] = far / dz;\n        newDst[11] = -1;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = near * far / dz;\n        newDst[15] = 0;\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 reverse-z perspective transformation matrix given the left, right,\n     * top, bottom, near and far clipping planes. The arguments define a frustum\n     * extending in the negative z direction. The arguments near and far are the\n     * distances to the near and far clipping planes. Note that near and far are not\n     * z coordinates, but rather they are distances along the negative z-axis. The\n     * matrix generated sends the viewing frustum to the unit box. We assume a unit\n     * box extending from -1 to 1 in the x and y dimensions and from 1 (-near) to 0 (-far) in the z\n     * dimension.\n     * @param left - The x coordinate of the left plane of the box.\n     * @param right - The x coordinate of the right plane of the box.\n     * @param bottom - The y coordinate of the bottom plane of the box.\n     * @param top - The y coordinate of the right plane of the box.\n     * @param near - The negative z coordinate of the near plane of the box.\n     * @param far - The negative z coordinate of the far plane of the box.\n     * @param dst - Output matrix. If not passed a new one is created.\n     * @returns The perspective projection matrix.\n     */\n    function frustumReverseZ(left, right, bottom, top, near, far = Infinity, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const dx = (right - left);\n        const dy = (top - bottom);\n        newDst[0] = 2 * near / dx;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 2 * near / dy;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = (left + right) / dx;\n        newDst[9] = (top + bottom) / dy;\n        newDst[11] = -1;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[15] = 0;\n        if (far === Infinity) {\n            newDst[10] = 0;\n            newDst[14] = near;\n        }\n        else {\n            const rangeInv = 1 / (far - near);\n            newDst[10] = near * rangeInv;\n            newDst[14] = far * near * rangeInv;\n        }\n        return newDst;\n    }\n    const xAxis = vec3.create();\n    const yAxis = vec3.create();\n    const zAxis = vec3.create();\n    /**\n     * Computes a 4-by-4 aim transformation.\n     *\n     * This is a matrix which positions an object aiming down positive Z.\n     * toward the target.\n     *\n     * Note: this is **NOT** the inverse of lookAt as lookAt looks at negative Z.\n     *\n     * @param position - The position of the object.\n     * @param target - The position meant to be aimed at.\n     * @param up - A vector pointing up.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The aim matrix.\n     */\n    function aim(position, target, up, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        vec3.normalize(vec3.subtract(target, position, zAxis), zAxis);\n        vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n        vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n        newDst[0] = xAxis[0];\n        newDst[1] = xAxis[1];\n        newDst[2] = xAxis[2];\n        newDst[3] = 0;\n        newDst[4] = yAxis[0];\n        newDst[5] = yAxis[1];\n        newDst[6] = yAxis[2];\n        newDst[7] = 0;\n        newDst[8] = zAxis[0];\n        newDst[9] = zAxis[1];\n        newDst[10] = zAxis[2];\n        newDst[11] = 0;\n        newDst[12] = position[0];\n        newDst[13] = position[1];\n        newDst[14] = position[2];\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 camera aim transformation.\n     *\n     * This is a matrix which positions an object aiming down negative Z.\n     * toward the target.\n     *\n     * Note: this is the inverse of `lookAt`\n     *\n     * @param eye - The position of the object.\n     * @param target - The position meant to be aimed at.\n     * @param up - A vector pointing up.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The aim matrix.\n     */\n    function cameraAim(eye, target, up, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        vec3.normalize(vec3.subtract(eye, target, zAxis), zAxis);\n        vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n        vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n        newDst[0] = xAxis[0];\n        newDst[1] = xAxis[1];\n        newDst[2] = xAxis[2];\n        newDst[3] = 0;\n        newDst[4] = yAxis[0];\n        newDst[5] = yAxis[1];\n        newDst[6] = yAxis[2];\n        newDst[7] = 0;\n        newDst[8] = zAxis[0];\n        newDst[9] = zAxis[1];\n        newDst[10] = zAxis[2];\n        newDst[11] = 0;\n        newDst[12] = eye[0];\n        newDst[13] = eye[1];\n        newDst[14] = eye[2];\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 view transformation.\n     *\n     * This is a view matrix which transforms all other objects\n     * to be in the space of the view defined by the parameters.\n     *\n     * @param eye - The position of the object.\n     * @param target - The position meant to be aimed at.\n     * @param up - A vector pointing up.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The look-at matrix.\n     */\n    function lookAt(eye, target, up, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        vec3.normalize(vec3.subtract(eye, target, zAxis), zAxis);\n        vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n        vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n        newDst[0] = xAxis[0];\n        newDst[1] = yAxis[0];\n        newDst[2] = zAxis[0];\n        newDst[3] = 0;\n        newDst[4] = xAxis[1];\n        newDst[5] = yAxis[1];\n        newDst[6] = zAxis[1];\n        newDst[7] = 0;\n        newDst[8] = xAxis[2];\n        newDst[9] = yAxis[2];\n        newDst[10] = zAxis[2];\n        newDst[11] = 0;\n        newDst[12] = -(xAxis[0] * eye[0] + xAxis[1] * eye[1] + xAxis[2] * eye[2]);\n        newDst[13] = -(yAxis[0] * eye[0] + yAxis[1] * eye[1] + yAxis[2] * eye[2]);\n        newDst[14] = -(zAxis[0] * eye[0] + zAxis[1] * eye[1] + zAxis[2] * eye[2]);\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which translates by the given vector v.\n     * @param v - The vector by\n     *     which to translate.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The translation matrix.\n     */\n    function translation(v, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        newDst[11] = 0;\n        newDst[12] = v[0];\n        newDst[13] = v[1];\n        newDst[14] = v[2];\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Translates the given 4-by-4 matrix by the given vector v.\n     * @param m - The matrix.\n     * @param v - The vector by\n     *     which to translate.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The translated matrix.\n     */\n    function translate(m, v, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const m00 = m[0];\n        const m01 = m[1];\n        const m02 = m[2];\n        const m03 = m[3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const m30 = m[3 * 4 + 0];\n        const m31 = m[3 * 4 + 1];\n        const m32 = m[3 * 4 + 2];\n        const m33 = m[3 * 4 + 3];\n        if (m !== newDst) {\n            newDst[0] = m00;\n            newDst[1] = m01;\n            newDst[2] = m02;\n            newDst[3] = m03;\n            newDst[4] = m10;\n            newDst[5] = m11;\n            newDst[6] = m12;\n            newDst[7] = m13;\n            newDst[8] = m20;\n            newDst[9] = m21;\n            newDst[10] = m22;\n            newDst[11] = m23;\n        }\n        newDst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n        newDst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n        newDst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n        newDst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotationX(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = c;\n        newDst[6] = s;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = -s;\n        newDst[10] = c;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Rotates the given 4-by-4 matrix around the x-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotateX(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const m10 = m[4];\n        const m11 = m[5];\n        const m12 = m[6];\n        const m13 = m[7];\n        const m20 = m[8];\n        const m21 = m[9];\n        const m22 = m[10];\n        const m23 = m[11];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[4] = c * m10 + s * m20;\n        newDst[5] = c * m11 + s * m21;\n        newDst[6] = c * m12 + s * m22;\n        newDst[7] = c * m13 + s * m23;\n        newDst[8] = c * m20 - s * m10;\n        newDst[9] = c * m21 - s * m11;\n        newDst[10] = c * m22 - s * m12;\n        newDst[11] = c * m23 - s * m13;\n        if (m !== newDst) {\n            newDst[0] = m[0];\n            newDst[1] = m[1];\n            newDst[2] = m[2];\n            newDst[3] = m[3];\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotationY(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c;\n        newDst[1] = 0;\n        newDst[2] = -s;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = s;\n        newDst[9] = 0;\n        newDst[10] = c;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Rotates the given 4-by-4 matrix around the y-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotateY(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c * m00 - s * m20;\n        newDst[1] = c * m01 - s * m21;\n        newDst[2] = c * m02 - s * m22;\n        newDst[3] = c * m03 - s * m23;\n        newDst[8] = c * m20 + s * m00;\n        newDst[9] = c * m21 + s * m01;\n        newDst[10] = c * m22 + s * m02;\n        newDst[11] = c * m23 + s * m03;\n        if (m !== newDst) {\n            newDst[4] = m[4];\n            newDst[5] = m[5];\n            newDst[6] = m[6];\n            newDst[7] = m[7];\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotationZ(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c;\n        newDst[1] = s;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = -s;\n        newDst[5] = c;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Rotates the given 4-by-4 matrix around the z-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotateZ(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c * m00 + s * m10;\n        newDst[1] = c * m01 + s * m11;\n        newDst[2] = c * m02 + s * m12;\n        newDst[3] = c * m03 + s * m13;\n        newDst[4] = c * m10 - s * m00;\n        newDst[5] = c * m11 - s * m01;\n        newDst[6] = c * m12 - s * m02;\n        newDst[7] = c * m13 - s * m03;\n        if (m !== newDst) {\n            newDst[8] = m[8];\n            newDst[9] = m[9];\n            newDst[10] = m[10];\n            newDst[11] = m[11];\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the given axis by the given\n     * angle.\n     * @param axis - The axis\n     *     about which to rotate.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns A matrix which rotates angle radians\n     *     around the axis.\n     */\n    function axisRotation(axis, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        let x = axis[0];\n        let y = axis[1];\n        let z = axis[2];\n        const n = Math.sqrt(x * x + y * y + z * z);\n        x /= n;\n        y /= n;\n        z /= n;\n        const xx = x * x;\n        const yy = y * y;\n        const zz = z * z;\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        const oneMinusCosine = 1 - c;\n        newDst[0] = xx + (1 - xx) * c;\n        newDst[1] = x * y * oneMinusCosine + z * s;\n        newDst[2] = x * z * oneMinusCosine - y * s;\n        newDst[3] = 0;\n        newDst[4] = x * y * oneMinusCosine - z * s;\n        newDst[5] = yy + (1 - yy) * c;\n        newDst[6] = y * z * oneMinusCosine + x * s;\n        newDst[7] = 0;\n        newDst[8] = x * z * oneMinusCosine + y * s;\n        newDst[9] = y * z * oneMinusCosine - x * s;\n        newDst[10] = zz + (1 - zz) * c;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the given axis by the given\n     * angle. (same as axisRotation)\n     * @param axis - The axis\n     *     about which to rotate.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns A matrix which rotates angle radians\n     *     around the axis.\n     */\n    const rotation = axisRotation;\n    /**\n     * Rotates the given 4-by-4 matrix around the given axis by the\n     * given angle.\n     * @param m - The matrix.\n     * @param axis - The axis\n     *     about which to rotate.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function axisRotate(m, axis, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        let x = axis[0];\n        let y = axis[1];\n        let z = axis[2];\n        const n = Math.sqrt(x * x + y * y + z * z);\n        x /= n;\n        y /= n;\n        z /= n;\n        const xx = x * x;\n        const yy = y * y;\n        const zz = z * z;\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        const oneMinusCosine = 1 - c;\n        const r00 = xx + (1 - xx) * c;\n        const r01 = x * y * oneMinusCosine + z * s;\n        const r02 = x * z * oneMinusCosine - y * s;\n        const r10 = x * y * oneMinusCosine - z * s;\n        const r11 = yy + (1 - yy) * c;\n        const r12 = y * z * oneMinusCosine + x * s;\n        const r20 = x * z * oneMinusCosine + y * s;\n        const r21 = y * z * oneMinusCosine - x * s;\n        const r22 = zz + (1 - zz) * c;\n        const m00 = m[0];\n        const m01 = m[1];\n        const m02 = m[2];\n        const m03 = m[3];\n        const m10 = m[4];\n        const m11 = m[5];\n        const m12 = m[6];\n        const m13 = m[7];\n        const m20 = m[8];\n        const m21 = m[9];\n        const m22 = m[10];\n        const m23 = m[11];\n        newDst[0] = r00 * m00 + r01 * m10 + r02 * m20;\n        newDst[1] = r00 * m01 + r01 * m11 + r02 * m21;\n        newDst[2] = r00 * m02 + r01 * m12 + r02 * m22;\n        newDst[3] = r00 * m03 + r01 * m13 + r02 * m23;\n        newDst[4] = r10 * m00 + r11 * m10 + r12 * m20;\n        newDst[5] = r10 * m01 + r11 * m11 + r12 * m21;\n        newDst[6] = r10 * m02 + r11 * m12 + r12 * m22;\n        newDst[7] = r10 * m03 + r11 * m13 + r12 * m23;\n        newDst[8] = r20 * m00 + r21 * m10 + r22 * m20;\n        newDst[9] = r20 * m01 + r21 * m11 + r22 * m21;\n        newDst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n        newDst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n        if (m !== newDst) {\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Rotates the given 4-by-4 matrix around the given axis by the\n     * given angle. (same as rotate)\n     * @param m - The matrix.\n     * @param axis - The axis\n     *     about which to rotate.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    const rotate = axisRotate;\n    /**\n     * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n     * the corresponding entry in the given vector; assumes the vector has three\n     * entries.\n     * @param v - A vector of\n     *     three entries specifying the factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function scaling(v, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = v[0];\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = v[1];\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = v[2];\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Scales the given 4-by-4 matrix in each dimension by an amount\n     * given by the corresponding entry in the given vector; assumes the vector has\n     * three entries.\n     * @param m - The matrix to be modified.\n     * @param v - A vector of three entries specifying the\n     *     factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function scale(m, v, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        newDst[0] = v0 * m[0 * 4 + 0];\n        newDst[1] = v0 * m[0 * 4 + 1];\n        newDst[2] = v0 * m[0 * 4 + 2];\n        newDst[3] = v0 * m[0 * 4 + 3];\n        newDst[4] = v1 * m[1 * 4 + 0];\n        newDst[5] = v1 * m[1 * 4 + 1];\n        newDst[6] = v1 * m[1 * 4 + 2];\n        newDst[7] = v1 * m[1 * 4 + 3];\n        newDst[8] = v2 * m[2 * 4 + 0];\n        newDst[9] = v2 * m[2 * 4 + 1];\n        newDst[10] = v2 * m[2 * 4 + 2];\n        newDst[11] = v2 * m[2 * 4 + 3];\n        if (m !== newDst) {\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which scales a uniform amount in each dimension.\n     * @param s - the amount to scale\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function uniformScaling(s, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = s;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = s;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = s;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Scales the given 4-by-4 matrix in each dimension by a uniform scale.\n     * @param m - The matrix to be modified.\n     * @param s - The amount to scale.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function uniformScale(m, s, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = s * m[0 * 4 + 0];\n        newDst[1] = s * m[0 * 4 + 1];\n        newDst[2] = s * m[0 * 4 + 2];\n        newDst[3] = s * m[0 * 4 + 3];\n        newDst[4] = s * m[1 * 4 + 0];\n        newDst[5] = s * m[1 * 4 + 1];\n        newDst[6] = s * m[1 * 4 + 2];\n        newDst[7] = s * m[1 * 4 + 3];\n        newDst[8] = s * m[2 * 4 + 0];\n        newDst[9] = s * m[2 * 4 + 1];\n        newDst[10] = s * m[2 * 4 + 2];\n        newDst[11] = s * m[2 * 4 + 3];\n        if (m !== newDst) {\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    return {\n        create,\n        set,\n        fromMat3,\n        fromQuat,\n        negate,\n        copy,\n        clone,\n        equalsApproximately,\n        equals,\n        identity,\n        transpose,\n        inverse,\n        determinant,\n        invert,\n        multiply,\n        mul,\n        setTranslation,\n        getTranslation,\n        getAxis,\n        setAxis,\n        getScaling,\n        perspective,\n        perspectiveReverseZ,\n        ortho,\n        frustum,\n        frustumReverseZ,\n        aim,\n        cameraAim,\n        lookAt,\n        translation,\n        translate,\n        rotationX,\n        rotateX,\n        rotationY,\n        rotateY,\n        rotationZ,\n        rotateZ,\n        axisRotation,\n        rotation,\n        axisRotate,\n        rotate,\n        scaling,\n        scale,\n        uniformScaling,\n        uniformScale,\n    };\n}\nconst cache$2 = new Map();\nfunction getAPI$2(Ctor) {\n    let api = cache$2.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$2(Ctor);\n        cache$2.set(Ctor, api);\n    }\n    return api;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates am typed API for Qud\n * */\nfunction getAPIImpl$1(Ctor) {\n    const vec3 = getAPI$4(Ctor);\n    /**\n     * Creates a quat4; may be called with x, y, z to set initial values.\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @param w - Initial w value.\n     * @returns the created vector\n     */\n    function create(x, y, z, w) {\n        const newDst = new Ctor(4);\n        if (x !== undefined) {\n            newDst[0] = x;\n            if (y !== undefined) {\n                newDst[1] = y;\n                if (z !== undefined) {\n                    newDst[2] = z;\n                    if (w !== undefined) {\n                        newDst[3] = w;\n                    }\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Creates a Quat; may be called with x, y, z to set initial values. (same as create)\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @param z - Initial w value.\n     * @returns the created vector\n     */\n    const fromValues = create;\n    /**\n     * Sets the values of a Quat\n     * Also see {@link quat.create} and {@link quat.copy}\n     *\n     * @param x first value\n     * @param y second value\n     * @param z third value\n     * @param w fourth value\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector with its elements set.\n     */\n    function set(x, y, z, w, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = x;\n        newDst[1] = y;\n        newDst[2] = z;\n        newDst[3] = w;\n        return newDst;\n    }\n    /**\n     * Sets a quaternion from the given angle and  axis,\n     * then returns it.\n     *\n     * @param axis - the axis to rotate around\n     * @param angleInRadians - the angle\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The quaternion that represents the given axis and angle\n     **/\n    function fromAxisAngle(axis, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const halfAngle = angleInRadians * 0.5;\n        const s = Math.sin(halfAngle);\n        newDst[0] = s * axis[0];\n        newDst[1] = s * axis[1];\n        newDst[2] = s * axis[2];\n        newDst[3] = Math.cos(halfAngle);\n        return newDst;\n    }\n    /**\n     * Gets the rotation axis and angle\n     * @param q - quaternion to compute from\n     * @param dst - Vec3 to hold result. If not passed in a new one is created.\n     * @return angle and axis\n     */\n    function toAxisAngle(q, dst) {\n        const newDst = (dst ?? vec3.create(3));\n        const angle = Math.acos(q[3]) * 2;\n        const s = Math.sin(angle * 0.5);\n        if (s > EPSILON) {\n            newDst[0] = q[0] / s;\n            newDst[1] = q[1] / s;\n            newDst[2] = q[2] / s;\n        }\n        else {\n            newDst[0] = 1;\n            newDst[1] = 0;\n            newDst[2] = 0;\n        }\n        return { angle, axis: newDst };\n    }\n    /**\n     * Returns the angle in degrees between two rotations a and b.\n     * @param a - quaternion a\n     * @param b - quaternion b\n     * @return angle in radians between the two quaternions\n     */\n    function angle(a, b) {\n        const d = dot(a, b);\n        return Math.acos(2 * d * d - 1);\n    }\n    /**\n     * Multiplies two quaternions\n     *\n     * @param a - the first quaternion\n     * @param b - the second quaternion\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const ax = a[0];\n        const ay = a[1];\n        const az = a[2];\n        const aw = a[3];\n        const bx = b[0];\n        const by = b[1];\n        const bz = b[2];\n        const bw = b[3];\n        newDst[0] = ax * bw + aw * bx + ay * bz - az * by;\n        newDst[1] = ay * bw + aw * by + az * bx - ax * bz;\n        newDst[2] = az * bw + aw * bz + ax * by - ay * bx;\n        newDst[3] = aw * bw - ax * bx - ay * by - az * bz;\n        return newDst;\n    }\n    /**\n     * Multiplies two quaternions\n     *\n     * @param a - the first quaternion\n     * @param b - the second quaternion\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    const mul = multiply;\n    /**\n     * Rotates the given quaternion around the X axis by the given angle.\n     * @param q - quaternion to rotate\n     * @param angleInRadians - The angle by which to rotate\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function rotateX(q, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const halfAngle = angleInRadians * 0.5;\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const qw = q[3];\n        const bx = Math.sin(halfAngle);\n        const bw = Math.cos(halfAngle);\n        newDst[0] = qx * bw + qw * bx;\n        newDst[1] = qy * bw + qz * bx;\n        newDst[2] = qz * bw - qy * bx;\n        newDst[3] = qw * bw - qx * bx;\n        return newDst;\n    }\n    /**\n     * Rotates the given quaternion around the Y axis by the given angle.\n     * @param q - quaternion to rotate\n     * @param angleInRadians - The angle by which to rotate\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function rotateY(q, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const halfAngle = angleInRadians * 0.5;\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const qw = q[3];\n        const by = Math.sin(halfAngle);\n        const bw = Math.cos(halfAngle);\n        newDst[0] = qx * bw - qz * by;\n        newDst[1] = qy * bw + qw * by;\n        newDst[2] = qz * bw + qx * by;\n        newDst[3] = qw * bw - qy * by;\n        return newDst;\n    }\n    /**\n     * Rotates the given quaternion around the Z axis by the given angle.\n     * @param q - quaternion to rotate\n     * @param angleInRadians - The angle by which to rotate\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function rotateZ(q, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const halfAngle = angleInRadians * 0.5;\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const qw = q[3];\n        const bz = Math.sin(halfAngle);\n        const bw = Math.cos(halfAngle);\n        newDst[0] = qx * bw + qy * bz;\n        newDst[1] = qy * bw - qx * bz;\n        newDst[2] = qz * bw + qw * bz;\n        newDst[3] = qw * bw - qz * bz;\n        return newDst;\n    }\n    /**\n     * Spherically linear interpolate between two quaternions\n     *\n     * @param a - starting value\n     * @param b - ending value\n     * @param t - value where 0 = a and 1 = b\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function slerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const ax = a[0];\n        const ay = a[1];\n        const az = a[2];\n        const aw = a[3];\n        let bx = b[0];\n        let by = b[1];\n        let bz = b[2];\n        let bw = b[3];\n        let cosOmega = ax * bx + ay * by + az * bz + aw * bw;\n        if (cosOmega < 0) {\n            cosOmega = -cosOmega;\n            bx = -bx;\n            by = -by;\n            bz = -bz;\n            bw = -bw;\n        }\n        let scale0;\n        let scale1;\n        if (1.0 - cosOmega > EPSILON) {\n            const omega = Math.acos(cosOmega);\n            const sinOmega = Math.sin(omega);\n            scale0 = Math.sin((1 - t) * omega) / sinOmega;\n            scale1 = Math.sin(t * omega) / sinOmega;\n        }\n        else {\n            scale0 = 1.0 - t;\n            scale1 = t;\n        }\n        newDst[0] = scale0 * ax + scale1 * bx;\n        newDst[1] = scale0 * ay + scale1 * by;\n        newDst[2] = scale0 * az + scale1 * bz;\n        newDst[3] = scale0 * aw + scale1 * bw;\n        return newDst;\n    }\n    /**\n     * Compute the inverse of a quaternion\n     *\n     * @param q - quaternion to compute the inverse of\n     * @returns A quaternion that is the result of a * b\n     */\n    function inverse(q, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const a0 = q[0];\n        const a1 = q[1];\n        const a2 = q[2];\n        const a3 = q[3];\n        const dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n        const invDot = dot ? 1 / dot : 0;\n        newDst[0] = -a0 * invDot;\n        newDst[1] = -a1 * invDot;\n        newDst[2] = -a2 * invDot;\n        newDst[3] = a3 * invDot;\n        return newDst;\n    }\n    /**\n     * Compute the conjugate of a quaternion\n     * For quaternions with a magnitude of 1 (a unit quaternion)\n     * this returns the same as the inverse but is faster to calculate.\n     *\n     * @param q - quaternion to compute the conjugate of.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The conjugate of q\n     */\n    function conjugate(q, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = -q[0];\n        newDst[1] = -q[1];\n        newDst[2] = -q[2];\n        newDst[3] = q[3];\n        return newDst;\n    }\n    /**\n     * Creates a quaternion from the given rotation matrix.\n     *\n     * The created quaternion is not normalized.\n     *\n     * @param m - rotation matrix\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns the result\n     */\n    function fromMat(m, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        /*\n        0 1 2\n        3 4 5\n        6 7 8\n      \n        0 1 2\n        4 5 6\n        8 9 10\n         */\n        // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n        // article \"Quaternion Calculus and Fast Animation\".\n        const trace = m[0] + m[5] + m[10];\n        if (trace > 0.0) {\n            // |w| > 1/2, may as well choose w > 1/2\n            const root = Math.sqrt(trace + 1); // 2w\n            newDst[3] = 0.5 * root;\n            const invRoot = 0.5 / root; // 1/(4w)\n            newDst[0] = (m[6] - m[9]) * invRoot;\n            newDst[1] = (m[8] - m[2]) * invRoot;\n            newDst[2] = (m[1] - m[4]) * invRoot;\n        }\n        else {\n            // |w| <= 1/2\n            let i = 0;\n            if (m[5] > m[0]) {\n                i = 1;\n            }\n            if (m[10] > m[i * 4 + i]) {\n                i = 2;\n            }\n            const j = (i + 1) % 3;\n            const k = (i + 2) % 3;\n            const root = Math.sqrt(m[i * 4 + i] - m[j * 4 + j] - m[k * 4 + k] + 1.0);\n            newDst[i] = 0.5 * root;\n            const invRoot = 0.5 / root;\n            newDst[3] = (m[j * 4 + k] - m[k * 4 + j]) * invRoot;\n            newDst[j] = (m[j * 4 + i] + m[i * 4 + j]) * invRoot;\n            newDst[k] = (m[k * 4 + i] + m[i * 4 + k]) * invRoot;\n        }\n        return newDst;\n    }\n    /**\n     * Creates a quaternion from the given euler angle x, y, z using the provided intrinsic order for the conversion.\n     *\n     * @param xAngleInRadians - angle to rotate around X axis in radians.\n     * @param yAngleInRadians - angle to rotate around Y axis in radians.\n     * @param zAngleInRadians - angle to rotate around Z axis in radians.\n     * @param order - order to apply euler angles\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion representing the same rotation as the euler angles applied in the given order\n     */\n    function fromEuler(xAngleInRadians, yAngleInRadians, zAngleInRadians, order, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const xHalfAngle = xAngleInRadians * 0.5;\n        const yHalfAngle = yAngleInRadians * 0.5;\n        const zHalfAngle = zAngleInRadians * 0.5;\n        const sx = Math.sin(xHalfAngle);\n        const cx = Math.cos(xHalfAngle);\n        const sy = Math.sin(yHalfAngle);\n        const cy = Math.cos(yHalfAngle);\n        const sz = Math.sin(zHalfAngle);\n        const cz = Math.cos(zHalfAngle);\n        switch (order) {\n            case 'xyz':\n                newDst[0] = sx * cy * cz + cx * sy * sz;\n                newDst[1] = cx * sy * cz - sx * cy * sz;\n                newDst[2] = cx * cy * sz + sx * sy * cz;\n                newDst[3] = cx * cy * cz - sx * sy * sz;\n                break;\n            case 'xzy':\n                newDst[0] = sx * cy * cz - cx * sy * sz;\n                newDst[1] = cx * sy * cz - sx * cy * sz;\n                newDst[2] = cx * cy * sz + sx * sy * cz;\n                newDst[3] = cx * cy * cz + sx * sy * sz;\n                break;\n            case 'yxz':\n                newDst[0] = sx * cy * cz + cx * sy * sz;\n                newDst[1] = cx * sy * cz - sx * cy * sz;\n                newDst[2] = cx * cy * sz - sx * sy * cz;\n                newDst[3] = cx * cy * cz + sx * sy * sz;\n                break;\n            case 'yzx':\n                newDst[0] = sx * cy * cz + cx * sy * sz;\n                newDst[1] = cx * sy * cz + sx * cy * sz;\n                newDst[2] = cx * cy * sz - sx * sy * cz;\n                newDst[3] = cx * cy * cz - sx * sy * sz;\n                break;\n            case 'zxy':\n                newDst[0] = sx * cy * cz - cx * sy * sz;\n                newDst[1] = cx * sy * cz + sx * cy * sz;\n                newDst[2] = cx * cy * sz + sx * sy * cz;\n                newDst[3] = cx * cy * cz - sx * sy * sz;\n                break;\n            case 'zyx':\n                newDst[0] = sx * cy * cz - cx * sy * sz;\n                newDst[1] = cx * sy * cz + sx * cy * sz;\n                newDst[2] = cx * cy * sz - sx * sy * cz;\n                newDst[3] = cx * cy * cz + sx * sy * sz;\n                break;\n            default:\n                throw new Error(`Unknown rotation order: ${order}`);\n        }\n        return newDst;\n    }\n    /**\n     * Copies a quaternion. (same as {@link quat.clone})\n     * Also see {@link quat.create} and {@link quat.set}\n     * @param q - The quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is a copy of q\n     */\n    function copy(q, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = q[0];\n        newDst[1] = q[1];\n        newDst[2] = q[2];\n        newDst[3] = q[3];\n        return newDst;\n    }\n    /**\n     * Clones a quaternion. (same as {@link quat.copy})\n     * Also see {@link quat.create} and {@link quat.set}\n     * @param q - The quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A copy of q.\n     */\n    const clone = copy;\n    /**\n     * Adds two quaternions; assumes a and b have the same dimension.\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the sum of a and b.\n     */\n    function add(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + b[0];\n        newDst[1] = a[1] + b[1];\n        newDst[2] = a[2] + b[2];\n        newDst[3] = a[3] + b[3];\n        return newDst;\n    }\n    /**\n     * Subtracts two quaternions.\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the difference of a and b.\n     */\n    function subtract(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] - b[0];\n        newDst[1] = a[1] - b[1];\n        newDst[2] = a[2] - b[2];\n        newDst[3] = a[3] - b[3];\n        return newDst;\n    }\n    /**\n     * Subtracts two quaternions.\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the difference of a and b.\n     */\n    const sub = subtract;\n    /**\n     * Multiplies a quaternion by a scalar.\n     * @param v - The quaternion.\n     * @param k - The scalar.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The scaled quaternion.\n     */\n    function mulScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0] * k;\n        newDst[1] = v[1] * k;\n        newDst[2] = v[2] * k;\n        newDst[3] = v[3] * k;\n        return newDst;\n    }\n    /**\n     * Multiplies a quaternion by a scalar. (same as mulScalar)\n     * @param v - The quaternion.\n     * @param k - The scalar.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The scaled quaternion.\n     */\n    const scale = mulScalar;\n    /**\n     * Divides a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The scaled quaternion.\n     */\n    function divScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0] / k;\n        newDst[1] = v[1] / k;\n        newDst[2] = v[2] / k;\n        newDst[3] = v[3] / k;\n        return newDst;\n    }\n    /**\n     * Computes the dot product of two quaternions\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @returns dot product\n     */\n    function dot(a, b) {\n        return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]) + (a[3] * b[3]);\n    }\n    /**\n     * Performs linear interpolation on two quaternions.\n     * Given quaternions a and b and interpolation coefficient t, returns\n     * a + t * (b - a).\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @param t - Interpolation coefficient.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The linear interpolated result.\n     */\n    function lerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + t * (b[0] - a[0]);\n        newDst[1] = a[1] + t * (b[1] - a[1]);\n        newDst[2] = a[2] + t * (b[2] - a[2]);\n        newDst[3] = a[3] + t * (b[3] - a[3]);\n        return newDst;\n    }\n    /**\n     * Computes the length of quaternion\n     * @param v - quaternion.\n     * @returns length of quaternion.\n     */\n    function length(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n    }\n    /**\n     * Computes the length of quaternion (same as length)\n     * @param v - quaternion.\n     * @returns length of quaternion.\n     */\n    const len = length;\n    /**\n     * Computes the square of the length of quaternion\n     * @param v - quaternion.\n     * @returns square of the length of quaternion.\n     */\n    function lengthSq(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        return v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3;\n    }\n    /**\n     * Computes the square of the length of quaternion (same as lengthSq)\n     * @param v - quaternion.\n     * @returns square of the length of quaternion.\n     */\n    const lenSq = lengthSq;\n    /**\n     * Divides a quaternion by its Euclidean length and returns the quotient.\n     * @param v - The quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The normalized quaternion.\n     */\n    function normalize(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n        if (len > 0.00001) {\n            newDst[0] = v0 / len;\n            newDst[1] = v1 / len;\n            newDst[2] = v2 / len;\n            newDst[3] = v3 / len;\n        }\n        else {\n            newDst[0] = 0;\n            newDst[1] = 0;\n            newDst[2] = 0;\n            newDst[3] = 1;\n        }\n        return newDst;\n    }\n    /**\n     * Check if 2 quaternions are approximately equal\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @returns true if quaternions are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON &&\n            Math.abs(a[3] - b[3]) < EPSILON;\n    }\n    /**\n     * Check if 2 quaternions are exactly equal\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @returns true if quaternions are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n    }\n    /**\n     * Creates an identity quaternion\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns an identity quaternion\n     */\n    function identity(dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = 0;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 1;\n        return newDst;\n    }\n    const tempVec3 = vec3.create();\n    const xUnitVec3 = vec3.create();\n    const yUnitVec3 = vec3.create();\n    /**\n     * Computes a quaternion to represent the shortest rotation from one vector to another.\n     *\n     * @param aUnit - the start vector\n     * @param bUnit - the end vector\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns the result\n     */\n    function rotationTo(aUnit, bUnit, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const dot = vec3.dot(aUnit, bUnit);\n        if (dot < -0.999999) {\n            vec3.cross(xUnitVec3, aUnit, tempVec3);\n            if (vec3.len(tempVec3) < 0.000001) {\n                vec3.cross(yUnitVec3, aUnit, tempVec3);\n            }\n            vec3.normalize(tempVec3, tempVec3);\n            fromAxisAngle(tempVec3, Math.PI, newDst);\n            return newDst;\n        }\n        else if (dot > 0.999999) {\n            newDst[0] = 0;\n            newDst[1] = 0;\n            newDst[2] = 0;\n            newDst[3] = 1;\n            return newDst;\n        }\n        else {\n            vec3.cross(aUnit, bUnit, tempVec3);\n            newDst[0] = tempVec3[0];\n            newDst[1] = tempVec3[1];\n            newDst[2] = tempVec3[2];\n            newDst[3] = 1 + dot;\n            return normalize(newDst, newDst);\n        }\n    }\n    const tempQuat1 = new Ctor(4);\n    const tempQuat2 = new Ctor(4);\n    /**\n     * Performs a spherical linear interpolation with two control points\n     *\n     * @param a - the first quaternion\n     * @param b - the second quaternion\n     * @param c - the third quaternion\n     * @param d - the fourth quaternion\n     * @param t - Interpolation coefficient 0 to 1\n     * @returns result\n     */\n    function sqlerp(a, b, c, d, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        slerp(a, d, t, tempQuat1);\n        slerp(b, c, t, tempQuat2);\n        slerp(tempQuat1, tempQuat2, 2 * t * (1 - t), newDst);\n        return newDst;\n    }\n    return {\n        create,\n        fromValues,\n        set,\n        fromAxisAngle,\n        toAxisAngle,\n        angle,\n        multiply,\n        mul,\n        rotateX,\n        rotateY,\n        rotateZ,\n        slerp,\n        inverse,\n        conjugate,\n        fromMat,\n        fromEuler,\n        copy,\n        clone,\n        add,\n        subtract,\n        sub,\n        mulScalar,\n        scale,\n        divScalar,\n        dot,\n        lerp,\n        length,\n        len,\n        lengthSq,\n        lenSq,\n        normalize,\n        equalsApproximately,\n        equals,\n        identity,\n        rotationTo,\n        sqlerp,\n    };\n}\nconst cache$1 = new Map();\n/**\n *\n * Quat4 math functions.\n *\n * Almost all functions take an optional `newDst` argument. If it is not passed in the\n * functions will create a new `Quat4`. In other words you can do this\n *\n *     const v = quat4.cross(v1, v2);  // Creates a new Quat4 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = quat4.create();\n *     quat4.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     quat4.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\nfunction getAPI$1(Ctor) {\n    let api = cache$1.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$1(Ctor);\n        cache$1.set(Ctor, api);\n    }\n    return api;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates am typed API for Vec4\n * */\nfunction getAPIImpl(Ctor) {\n    /**\n     * Creates a vec4; may be called with x, y, z to set initial values.\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @param w - Initial w value.\n     * @returns the created vector\n     */\n    function create(x, y, z, w) {\n        const newDst = new Ctor(4);\n        if (x !== undefined) {\n            newDst[0] = x;\n            if (y !== undefined) {\n                newDst[1] = y;\n                if (z !== undefined) {\n                    newDst[2] = z;\n                    if (w !== undefined) {\n                        newDst[3] = w;\n                    }\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Creates a vec4; may be called with x, y, z to set initial values. (same as create)\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @param z - Initial w value.\n     * @returns the created vector\n     */\n    const fromValues = create;\n    /**\n     * Sets the values of a Vec4\n     * Also see {@link vec4.create} and {@link vec4.copy}\n     *\n     * @param x first value\n     * @param y second value\n     * @param z third value\n     * @param w fourth value\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector with its elements set.\n     */\n    function set(x, y, z, w, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = x;\n        newDst[1] = y;\n        newDst[2] = z;\n        newDst[3] = w;\n        return newDst;\n    }\n    /**\n     * Applies Math.ceil to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the ceil of each element of v.\n     */\n    function ceil(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.ceil(v[0]);\n        newDst[1] = Math.ceil(v[1]);\n        newDst[2] = Math.ceil(v[2]);\n        newDst[3] = Math.ceil(v[3]);\n        return newDst;\n    }\n    /**\n     * Applies Math.floor to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the floor of each element of v.\n     */\n    function floor(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.floor(v[0]);\n        newDst[1] = Math.floor(v[1]);\n        newDst[2] = Math.floor(v[2]);\n        newDst[3] = Math.floor(v[3]);\n        return newDst;\n    }\n    /**\n     * Applies Math.round to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the round of each element of v.\n     */\n    function round(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.round(v[0]);\n        newDst[1] = Math.round(v[1]);\n        newDst[2] = Math.round(v[2]);\n        newDst[3] = Math.round(v[3]);\n        return newDst;\n    }\n    /**\n     * Clamp each element of vector between min and max\n     * @param v - Operand vector.\n     * @param max - Min value, default 0\n     * @param min - Max value, default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that the clamped value of each element of v.\n     */\n    function clamp(v, min = 0, max = 1, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.min(max, Math.max(min, v[0]));\n        newDst[1] = Math.min(max, Math.max(min, v[1]));\n        newDst[2] = Math.min(max, Math.max(min, v[2]));\n        newDst[3] = Math.min(max, Math.max(min, v[3]));\n        return newDst;\n    }\n    /**\n     * Adds two vectors; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a and b.\n     */\n    function add(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + b[0];\n        newDst[1] = a[1] + b[1];\n        newDst[2] = a[2] + b[2];\n        newDst[3] = a[3] + b[3];\n        return newDst;\n    }\n    /**\n     * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param scale - Amount to scale b\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a + b * scale.\n     */\n    function addScaled(a, b, scale, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + b[0] * scale;\n        newDst[1] = a[1] + b[1] * scale;\n        newDst[2] = a[2] + b[2] * scale;\n        newDst[3] = a[3] + b[3] * scale;\n        return newDst;\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    function subtract(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] - b[0];\n        newDst[1] = a[1] - b[1];\n        newDst[2] = a[2] - b[2];\n        newDst[3] = a[3] - b[3];\n        return newDst;\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    const sub = subtract;\n    /**\n     * Check if 2 vectors are approximately equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON &&\n            Math.abs(a[3] - b[3]) < EPSILON;\n    }\n    /**\n     * Check if 2 vectors are exactly equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficient.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The linear interpolated result.\n     */\n    function lerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + t * (b[0] - a[0]);\n        newDst[1] = a[1] + t * (b[1] - a[1]);\n        newDst[2] = a[2] + t * (b[2] - a[2]);\n        newDst[3] = a[3] + t * (b[3] - a[3]);\n        return newDst;\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient vector t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficients vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns the linear interpolated result.\n     */\n    function lerpV(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + t[0] * (b[0] - a[0]);\n        newDst[1] = a[1] + t[1] * (b[1] - a[1]);\n        newDst[2] = a[2] + t[2] * (b[2] - a[2]);\n        newDst[3] = a[3] + t[3] * (b[3] - a[3]);\n        return newDst;\n    }\n    /**\n     * Return max values of two vectors.\n     * Given vectors a and b returns\n     * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The max components vector.\n     */\n    function max(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.max(a[0], b[0]);\n        newDst[1] = Math.max(a[1], b[1]);\n        newDst[2] = Math.max(a[2], b[2]);\n        newDst[3] = Math.max(a[3], b[3]);\n        return newDst;\n    }\n    /**\n     * Return min values of two vectors.\n     * Given vectors a and b returns\n     * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The min components vector.\n     */\n    function min(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.min(a[0], b[0]);\n        newDst[1] = Math.min(a[1], b[1]);\n        newDst[2] = Math.min(a[2], b[2]);\n        newDst[3] = Math.min(a[3], b[3]);\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function mulScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0] * k;\n        newDst[1] = v[1] * k;\n        newDst[2] = v[2] * k;\n        newDst[3] = v[3] * k;\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar. (same as mulScalar)\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    const scale = mulScalar;\n    /**\n     * Divides a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function divScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0] / k;\n        newDst[1] = v[1] / k;\n        newDst[2] = v[2] / k;\n        newDst[3] = v[3] / k;\n        return newDst;\n    }\n    /**\n     * Inverse a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    function inverse(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = 1 / v[0];\n        newDst[1] = 1 / v[1];\n        newDst[2] = 1 / v[2];\n        newDst[3] = 1 / v[3];\n        return newDst;\n    }\n    /**\n     * Invert a vector. (same as inverse)\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    const invert = inverse;\n    /**\n     * Computes the dot product of two vectors\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns dot product\n     */\n    function dot(a, b) {\n        return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]) + (a[3] * b[3]);\n    }\n    /**\n     * Computes the length of vector\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    function length(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n    }\n    /**\n     * Computes the length of vector (same as length)\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    const len = length;\n    /**\n     * Computes the square of the length of vector\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    function lengthSq(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        return v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3;\n    }\n    /**\n     * Computes the square of the length of vector (same as lengthSq)\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    const lenSq = lengthSq;\n    /**\n     * Computes the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    function distance(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        const dz = a[2] - b[2];\n        const dw = a[3] - b[3];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz + dw * dw);\n    }\n    /**\n     * Computes the distance between 2 points (same as distance)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    const dist = distance;\n    /**\n     * Computes the square of the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    function distanceSq(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        const dz = a[2] - b[2];\n        const dw = a[3] - b[3];\n        return dx * dx + dy * dy + dz * dz + dw * dw;\n    }\n    /**\n     * Computes the square of the distance between 2 points (same as distanceSq)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    const distSq = distanceSq;\n    /**\n     * Divides a vector by its Euclidean length and returns the quotient.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The normalized vector.\n     */\n    function normalize(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n        if (len > 0.00001) {\n            newDst[0] = v0 / len;\n            newDst[1] = v1 / len;\n            newDst[2] = v2 / len;\n            newDst[3] = v3 / len;\n        }\n        else {\n            newDst[0] = 0;\n            newDst[1] = 0;\n            newDst[2] = 0;\n            newDst[3] = 0;\n        }\n        return newDst;\n    }\n    /**\n     * Negates a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns -v.\n     */\n    function negate(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = -v[0];\n        newDst[1] = -v[1];\n        newDst[2] = -v[2];\n        newDst[3] = -v[3];\n        return newDst;\n    }\n    /**\n     * Copies a vector. (same as {@link vec4.clone})\n     * Also see {@link vec4.create} and {@link vec4.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    function copy(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0];\n        newDst[1] = v[1];\n        newDst[2] = v[2];\n        newDst[3] = v[3];\n        return newDst;\n    }\n    /**\n     * Clones a vector. (same as {@link vec4.copy})\n     * Also see {@link vec4.create} and {@link vec4.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    const clone = copy;\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] * b[0];\n        newDst[1] = a[1] * b[1];\n        newDst[2] = a[2] * b[2];\n        newDst[3] = a[3] * b[3];\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as mul)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    function divide(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] / b[0];\n        newDst[1] = a[1] / b[1];\n        newDst[2] = a[2] / b[2];\n        newDst[3] = a[3] / b[3];\n        return newDst;\n    }\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as divide)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    const div = divide;\n    /**\n     * Zero's a vector\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The zeroed vector.\n     */\n    function zero(dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = 0;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        return newDst;\n    }\n    /**\n     * transform vec4 by 4x4 matrix\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional vec4 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat4(v, m, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const x = v[0];\n        const y = v[1];\n        const z = v[2];\n        const w = v[3];\n        newDst[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n        newDst[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n        newDst[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n        newDst[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n        return newDst;\n    }\n    /**\n     * Treat a 4D vector as a direction and set it's length\n     *\n     * @param a The vec4 to lengthen\n     * @param len The length of the resulting vector\n     * @returns The lengthened vector\n     */\n    function setLength(a, len, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        normalize(a, newDst);\n        return mulScalar(newDst, len, newDst);\n    }\n    /**\n     * Ensure a vector is not longer than a max length\n     *\n     * @param a The vec4 to limit\n     * @param maxLen The longest length of the resulting vector\n     * @returns The vector, shortened to maxLen if it's too long\n     */\n    function truncate(a, maxLen, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        if (length(a) > maxLen) {\n            return setLength(a, maxLen, newDst);\n        }\n        return copy(a, newDst);\n    }\n    /**\n     * Return the vector exactly between 2 endpoint vectors\n     *\n     * @param a Endpoint 1\n     * @param b Endpoint 2\n     * @returns The vector exactly residing between endpoints 1 and 2\n     */\n    function midpoint(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        return lerp(a, b, 0.5, newDst);\n    }\n    return {\n        create,\n        fromValues,\n        set,\n        ceil,\n        floor,\n        round,\n        clamp,\n        add,\n        addScaled,\n        subtract,\n        sub,\n        equalsApproximately,\n        equals,\n        lerp,\n        lerpV,\n        max,\n        min,\n        mulScalar,\n        scale,\n        divScalar,\n        inverse,\n        invert,\n        dot,\n        length,\n        len,\n        lengthSq,\n        lenSq,\n        distance,\n        dist,\n        distanceSq,\n        distSq,\n        normalize,\n        negate,\n        copy,\n        clone,\n        multiply,\n        mul,\n        divide,\n        div,\n        zero,\n        transformMat4,\n        setLength,\n        truncate,\n        midpoint,\n    };\n}\nconst cache = new Map();\n/**\n *\n * Vec4 math functions.\n *\n * Almost all functions take an optional `newDst` argument. If it is not passed in the\n * functions will create a new `Vec4`. In other words you can do this\n *\n *     const v = vec4.cross(v1, v2);  // Creates a new Vec4 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = vec4.create();\n *     vec4.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     vec4.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\nfunction getAPI(Ctor) {\n    let api = cache.get(Ctor);\n    if (!api) {\n        api = getAPIImpl(Ctor);\n        cache.set(Ctor, api);\n    }\n    return api;\n}\n\n/**\n * Some docs\n * @namespace wgpu-matrix\n */\n/**\n * Generate wgpu-matrix API for type\n */\nfunction wgpuMatrixAPI(Mat3Ctor, Mat4Ctor, QuatCtor, Vec2Ctor, Vec3Ctor, Vec4Ctor) {\n    return {\n        /** @namespace mat3 */\n        mat3: getAPI$3(Mat3Ctor),\n        /** @namespace mat4 */\n        mat4: getAPI$2(Mat4Ctor),\n        /** @namespace quat */\n        quat: getAPI$1(QuatCtor),\n        /** @namespace vec2 */\n        vec2: getAPI$5(Vec2Ctor),\n        /** @namespace vec3 */\n        vec3: getAPI$4(Vec3Ctor),\n        /** @namespace vec4 */\n        vec4: getAPI(Vec4Ctor),\n    };\n}\nconst { \n/**\n * 3x3 Matrix functions that default to returning `Float32Array`\n * @namespace\n */\nmat3, \n/**\n * 4x4 Matrix functions that default to returning `Float32Array`\n * @namespace\n */\nmat4, \n/**\n * Quaternion functions that default to returning `Float32Array`\n * @namespace\n */\nquat, \n/**\n * Vec2 functions that default to returning `Float32Array`\n * @namespace\n */\nvec2, \n/**\n * Vec3 functions that default to returning `Float32Array`\n * @namespace\n */\nvec3, \n/**\n * Vec3 functions that default to returning `Float32Array`\n * @namespace\n */\nvec4, } = wgpuMatrixAPI(Float32Array, Float32Array, Float32Array, Float32Array, Float32Array, Float32Array);\nconst { \n/**\n * 3x3 Matrix functions that default to returning `Float64Array`\n * @namespace\n */\nmat3: mat3d, \n/**\n * 4x4 Matrix functions that default to returning `Float64Array`\n * @namespace\n */\nmat4: mat4d, \n/**\n * Quaternion functions that default to returning `Float64Array`\n * @namespace\n */\nquat: quatd, \n/**\n * Vec2 functions that default to returning `Float64Array`\n * @namespace\n */\nvec2: vec2d, \n/**\n * Vec3 functions that default to returning `Float64Array`\n * @namespace\n */\nvec3: vec3d, \n/**\n * Vec3 functions that default to returning `Float64Array`\n * @namespace\n */\nvec4: vec4d, } = wgpuMatrixAPI(Float64Array, Float64Array, Float64Array, Float64Array, Float64Array, Float64Array);\nconst { \n/**\n * 3x3 Matrix functions that default to returning `number[]`\n * @namespace\n */\nmat3: mat3n, \n/**\n * 4x4 Matrix functions that default to returning `number[]`\n * @namespace\n */\nmat4: mat4n, \n/**\n * Quaternion functions that default to returning `number[]`\n * @namespace\n */\nquat: quatn, \n/**\n * Vec2 functions that default to returning `number[]`\n * @namespace\n */\nvec2: vec2n, \n/**\n * Vec3 functions that default to returning `number[]`\n * @namespace\n */\nvec3: vec3n, \n/**\n * Vec3 functions that default to returning `number[]`\n * @namespace\n */\nvec4: vec4n, } = wgpuMatrixAPI(ZeroArray, Array, Array, Array, Array, Array);\n\nexport { mat3, mat3d, mat3n, mat4, mat4d, mat4n, quat, quatd, quatn, utils, vec2, vec2d, vec2n, vec3, vec3d, vec3n, vec4, vec4d, vec4n };\n//# sourceMappingURL=wgpu-matrix.module.js.map\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(88);\n"],"names":["webpackQueues","webpackExports","webpackError","resolveQueue","gravitySpan","document","getElementById","frictionSpan","angvelSpan","rollSpan","jumpforceSpan","gameOverTxt","timer","pinned","sliders","pinBtn","addEventListener","innerText","classList","toggle","gravity","parseFloat","value","restitutionCoef","frictionCoef","angularVelocity","rollingDamping","jumpForce","textureAtlas","loadImage","canvas","window","renderer","initialize","inputHandler","async","main","stop","scene","camera","name","id","position","rotation","cameraType","perspective","aspectRatio","width","height","fov","near","far","sphere","radius","texture","atlas","indexX","indexY","velocity","x","y","z","cube","lenght","color","cube2","cube3","cube4","cube5","cube6","cube7","cube8","cube9","cube10","cube11","cube12","light","setCamera","setLight","addShapes","attach","fixedDeltaTime","timerTime","lastTime","grounded","gameOver","retry","platformNumber","Promise","resolve","render","time","textContent","toString","toFixed","innerHTML","reset","control","keyboard","shapes","forEach","obj","collision","undefined","set","ballCollisionNormal","getNormal","res","cubeCollisionNormal","negate","contactOffset","scale","getRadius","rollingVelocity","cross","lerp","reposVector","ratio","globalMove","vnDot","dot","currentRestitution","Math","abs","scaledNormal","subtract","addForce","globalRotate","count","interval","setInterval","clearInterval","requestAnimationFrame","start","checkCollision","localSpherePosition","inverseRotationMatrix","transpose","getRotationMatrix","spherePosLocal","transformMat4","closestX","max","getLength","min","closestY","closestZ","dx","dy","dz","distanceSquared","Float32Array","outMat","multiply","getPositionMatrix","sqrt","ControllerDevice","InputHandler","keysPressed","keyPress","mouseDeltaX","mouseDeltaY","mouseScrollDelta","leftMouseDown","middleMouseDown","rightMouseDown","constructor","this","Map","Set","listen","e","preventDefault","key","style","touchAction","button","movementX","movementY","deltaY","getKeysPressed","getKeyPress","getMouseMovement","output","object","moveSpeed","rotateSpeed","deltaTime","device","val","rotateRelative","mouse","mouseMove","localMove","forceControl","moveAccel","rotateAccel","objVelocity","objAngularVelocity","used","CameraType","Camera","type","projectionMatrix","cameraDescriptor","super","PI","getData","cameraWorldMatrix","positionMatrix","rotationMatrix","cameraViewMatrix","inverse","projection","Light","lightDescriptor","localRotate","degX","degY","degZ","rotateX","zero","rotateY","rotateZ","Object","rotationMatrixX","rotationMatrixY","rotationMatrixZ","right","up","back","lockAxis","yaw","pitch","roll","parent","child","objectDescriptor","translate","identity","buffer","create","atan2","asin","relativeDirection","addScaled","rotationX","rotationY","childPos","distance","childBack","angle","angleBetween","cos","sin","rotationZ","recalculateAngles","childAxis","amount","add","addLocalForce","addRelativeAngularForce","mulScalar","addRelativeTorque","mass","MAX_ANGULAR_ACCEL","I","torqueVec","angularAcc","len","deltaOmega","getRotationMatrixX","getRotationMatrixY","getRotationMatrixZ","setPositionMatrix","matrix","attachTo","hashCode","split","reduce","hash","char","charCodeAt","vec1","vec2","thetaU","Cube","vertices","sizeMatrix","length","cubeDescriptor","initVertices","setLength","localPoint","invRotation","pointLocal","transformMat4Upper3x3","halfSize","distances","minAxis","minAbs","i","absVal","localNormal","sign","worldNormal","normalize","textureData","Array","el","rowElements","colElements","normalsData","indexData","Uint16Array","out","positionIdx","slice","quadIdx","normal","texIdx","mat3frommat4","matrix4","Shape","containsTexture","shapeDescriptor","getScaleMatrix","numberVertices","byteLength","Sphere","sphereDescriptor","setRadius","latSegments","lonSegments","data","vertexMap","lat","theta","sinTheta","cosTheta","v","lon","phi","sinPhi","cosPhi","u","push","i0","i1","i2","i3","Renderer","context","presentationFormat","colorRenderPipeline","textureRenderPipeline","debugRenderPipeline","skyBoxRenderPipeline","renderPassDescriptor","multisamlpeTexture","renderTarget","renderTargetView","cameraBuffer","lightBuffer","objectsBindGroup","shapesMatrixBuffer","shapesColorBuffer","shapesTextureBuffer","debugColorBuffer","sampler","shapesColorBindGroup","shapesTextureBindGroup","debugBindGroup","skyboxBindGroup","skyboxCameraBuffer","skyboxPath","navigator","gpu","console","log","alert","adapter","requestAdapter","requestDevice","getContext","getPreferredCanvasFormat","configure","format","alphaMode","clientWidth","devicePixelRatio","clientHeight","objectsBindGroupLayoutDescriptor","label","entries","binding","visibility","GPUShaderStage","VERTEX","hasDynamicOffset","FRAGMENT","objectsBindGroupLayout","createBindGroupLayout","shapesColorBindGroupLayoutDescriptor","shapesColorBindGroupLayout","shapesTextureBindGroupLayoutDescriptor","sampleType","viewDimension","multisampled","shapesTextureBindGroupLayout","colorShaderModule","createShaderModule","code","colorRenderPipelineDescriptor","layout","createPipelineLayout","bindGroupLayouts","vertex","module","buffers","arrayStride","attributes","shaderLocation","offset","fragment","targets","primitive","topology","depthStencil","depthWriteEnabled","depthCompare","multisample","createRenderPipeline","textureShaderModule","textureRenderPipelineDescriptor","debugBindGroupLayoutDescriptor","debugBindGroupLayout","debugShaderModule","debugRenderPipelineDescriptor","skyBoxShaderModule","skyboxRenderPipelineDescriptor","skyboxTexture","createTextureFromImages","skyboxSampler","createSampler","magFilter","minFilter","createBuffer","size","usage","GPUBufferUsage","UNIFORM","COPY_DST","createBindGroup","getBindGroupLayout","resource","createTexture","image","GPUTextureUsage","TEXTURE_BINDING","RENDER_ATTACHMENT","queue","copyExternalImageToTexture","source","addressModeU","addressModeV","createView","dimension","depthTexture","getCurrentTexture","sampleCount","colorAttachments","clearValue","loadOp","storeOp","depthStencilAttachment","view","depthClearValue","depthLoadOp","depthStoreOp","copySourcesToTexture","sources","layer","origin","createTextureFromSources","loadImageBitmap","url","fetch","blob","createImageBitmap","urls","images","all","map","canvasTexture","destroy","encoder","createCommandEncoder","resolveTarget","renderPass","beginRenderPass","cameraData","projCamMatrix","writeBuffer","vectors","vec","idx","setBindGroup","setPipeline","pos","vertexBuffer","setVertexBuffer","draw","shape","renderData","sCameraData","proj","end","commandBuffer","finish","submit","Scene","includes","removeShapes","splice","indexOf","TextureAtlas","src","colorSpaceConversion","ZeroArray","OriginalConstructor","modifier","a","fill","args","EPSILON","cache$5","getAPI$5","Ctor","api","get","newDst","b","dst","t","k","v0","v1","lengthSq","distanceSq","copy","divide","fromValues","ceil","floor","round","clamp","ax","ay","bx","by","mag","cosine","acos","sub","equalsApproximately","equals","lerpV","divScalar","invert","lenSq","dist","distSq","clone","mul","div","random","m","transformMat3","rotate","rad","p0","p1","sinC","cosC","truncate","maxLen","midpoint","getAPIImpl$5","cache$4","getAPI$4","v2","az","bz","t1","t2","zScale","w","transformQuat","q","qx","qy","qz","w2","uvX","uvY","uvZ","getTranslation","getAxis","axis","off","getScaling","xx","xy","xz","yx","yy","yz","zx","zy","zz","p","r","getAPIImpl$4","cache$3","getAPI$3","vec3","m00","m01","m02","m10","m11","m12","m20","m21","m22","b01","b11","b21","invDet","a00","a01","a02","a10","a11","a12","a20","a21","a22","b00","b02","b10","b12","b20","b22","angleInRadians","c","s","v3","v4","v5","v6","v7","v8","fromMat4","m4","fromQuat","x2","y2","z2","wx","wy","wz","determinant","setTranslation","setAxis","get3DScaling","translation","scaling","uniformScaling","uniformScale","scaling3D","scale3D","uniformScaling3D","uniformScale3D","getAPIImpl$3","cache$2","getAPI$2","m03","m13","m23","m30","m31","m32","m33","tmp0","tmp1","tmp2","tmp3","tmp4","tmp5","tmp6","tmp7","tmp8","tmp9","tmp10","tmp11","tmp12","tmp13","tmp14","tmp15","tmp16","tmp17","tmp18","tmp19","tmp20","tmp21","tmp22","tmp23","t0","t3","d","a03","a13","a23","a30","a31","a32","a33","b03","b13","b23","b30","b31","b32","b33","xAxis","yAxis","zAxis","axisRotation","n","oneMinusCosine","axisRotate","r00","r01","r02","r10","r11","r12","r20","r21","r22","v9","v10","v11","v12","v13","v14","v15","fromMat3","m3","fieldOfViewYInRadians","aspect","zNear","zFar","f","tan","Number","isFinite","rangeInv","perspectiveReverseZ","Infinity","ortho","left","bottom","top","frustum","frustumReverseZ","aim","target","cameraAim","eye","lookAt","getAPIImpl$2","cache$1","getAPI$1","fromAxisAngle","halfAngle","aw","bw","slerp","scale0","scale1","cosOmega","omega","sinOmega","tempVec3","xUnitVec3","yUnitVec3","tempQuat1","tempQuat2","toAxisAngle","qw","a0","a1","a2","a3","invDot","conjugate","fromMat","trace","root","invRoot","j","fromEuler","xAngleInRadians","yAngleInRadians","zAngleInRadians","order","xHalfAngle","yHalfAngle","zHalfAngle","sx","cx","sy","cy","sz","cz","Error","rotationTo","aUnit","bUnit","sqlerp","getAPIImpl$1","cache","getAPI","dw","getAPIImpl","wgpuMatrixAPI","Mat3Ctor","Mat4Ctor","QuatCtor","Vec2Ctor","Vec3Ctor","Vec4Ctor","mat3","mat4","quat","vec4","mat3d","mat4d","quatd","vec2d","vec3d","vec4d","Float64Array","mat3n","mat4n","quatn","vec2n","vec3n","vec4n","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","__webpack_modules__","Symbol","fn","body","hasAwait","currentDeps","outerResolve","reject","depQueues","promise","rej","deps","dep","then","ret","wrapDeps","getResult","fnQueue","has","err","definition","o","defineProperty","enumerable","prop","prototype","hasOwnProperty","call"],"sourceRoot":""}