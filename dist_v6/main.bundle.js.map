{"version":3,"file":"main.bundle.js","mappings":"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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzkDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChkCAAkC,iBAAiB;AACnD,iBAAiB,mBAAmB,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gBAAgB;AAClD,iBAAiB,mBAAmB,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzkDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,iBAAiB;AACnD,iBAAiB,mBAAmB,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gBAAgB;AAClD,iBAAiB,mBAAmB,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,cAAc;AAC7B,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,cAAc;AAC7B,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,cAAc;AAC7B,eAAe,QAAQ;AACvB;AACA,iBAAiB,MAAM;AACviBAAiB,mBAAmB,KAAK;AACzkCAAkC,iBAAiB;AACnD,iBAAiB,mBAAmB,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gBAAgB;AACjD,iBAAiB,mBAAmB,KAAK;AACzoDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpqDAAqD;AACrD;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB,KAAK;AACzkCAAkC,iBAAiB;AACnD,iBAAiB,mBAAmB,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gBAAgB;AACjD,iBAAiB,mBAAmB,KAAK;AACzoDAAoD;AACpwBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjwCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,MAAM;AACjE;AACA;AACA;AACA;AACA,sCAAsC,iBAAiB;AACvD,iBAAiB,mBAAmB,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,gBAAgB;AACtD,iBAAiB,mBAAmB,KAAK;AACzuCAAuC;AACvC;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzkCAAkC,iBAAiB;AACnD,iBAAiB,mBAAmB,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gBAAgB;AAClD,iBAAiB,mBAAmB,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;;AAE0H;AACzI;;;;;;;UCpwLA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,IAAI;WACJ;WACA;WACA,IAAI;WACJ;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,CAAC;WACD;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;WACA,sGAAsG;WACtG;WACA;WACA;WACA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA,EAAE;WACF;WACA;;;;;WChEA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;UENA;UACA;UACA;UACA","sources":["webpack://webgpu/./main.ts","webpack://webgpu/./src/collision.ts","webpack://webgpu/./src/inputHandler.ts","webpack://webgpu/./src/objects/camera.ts","webpack://webgpu/./src/objects/light.ts","webpack://webgpu/./src/objects/object.ts","webpack://webgpu/./src/objects/shapes/cube.ts","webpack://webgpu/./src/objects/shapes/shape.ts","webpack://webgpu/./src/objects/shapes/sphere.ts","webpack://webgpu/./src/renderer.ts","webpack://webgpu/./src/scene.ts","webpack://webgpu/./src/textureAtlas.ts","webpack://webgpu/./src/shaders/debugShader.wgsl","webpack://webgpu/./src/shaders/objColorShader.wgsl","webpack://webgpu/./src/shaders/objTextureShader.wgsl","webpack://webgpu/./src/shaders/skyboxShader.wgsl","webpack://webgpu/./node_modules/wgpu-matrix/dist/3.x/wgpu-matrix.module.js","webpack://webgpu/webpack/bootstrap","webpack://webgpu/webpack/runtime/async module","webpack://webgpu/webpack/runtime/define property getters","webpack://webgpu/webpack/runtime/hasOwnProperty shorthand","webpack://webgpu/webpack/runtime/make namespace object","webpack://webgpu/webpack/before-startup","webpack://webgpu/webpack/startup","webpack://webgpu/webpack/after-startup"],"sourcesContent":["import { Camera, CameraType } from \"./src/objects/camera\";\r\nimport { ControllerDevice, InputHandler } from \"./src/inputHandler\";\r\nimport { Renderer } from \"./src/renderer\";\r\nimport { Scene } from \"./src/scene\";\r\nimport { Cube } from \"./src/objects/shapes/cube\";\r\nimport { Light } from \"./src/objects/light\";\r\nimport { Sphere } from \"./src/objects/shapes/sphere\";\r\nimport { checkCollision } from \"./src/collision\";\r\nimport { TextureAtlas } from \"./src/textureAtlas\";\r\nimport { mat4, vec3 } from \"wgpu-matrix\";\r\n\r\nconst gravitySpan = document.getElementById(\"gravityVal\") as HTMLSpanElement;\r\nconst frictionSpan = document.getElementById(\"frictionVal\") as HTMLSpanElement;\r\nconst angvelSpan = document.getElementById(\"angvelVal\") as HTMLSpanElement;\r\nconst rollSpan = document.getElementById(\"rolldampVal\") as HTMLSpanElement;\r\nconst jumpforceSpan = document.getElementById(\"jumpforceVal\") as HTMLSpanElement;\r\n\r\nlet pinned = false;\r\nconst sliders = document.getElementById(\"sliders\") as HTMLDivElement;\r\nconst pinBtn = document.getElementById(\"pin\") as HTMLDivElement;\r\npinBtn.addEventListener(\"click\", () => {\r\n    if (pinned) {\r\n        // sliders.style.top = \"-220px\";\r\n        pinBtn.innerText = \"Pin 📌\";\r\n        pinned = false;\r\n    } else {\r\n        pinBtn.innerText = \"Unpin 📌\";\r\n        pinned = true;\r\n    }\r\n    sliders.classList.toggle(\"pinned\");\r\n})\r\n\r\nlet textureAtlas = new TextureAtlas();\r\n// await textureAtlas.loadImage(\"./objects/pixil-frame-0.png\", 3, 1);\r\nawait textureAtlas.loadImage(\"./objects/2_no_clouds_8k (Medium).jpg\", 1, 1);\r\n\r\nconst canvas = window.document.getElementById(\"canvas\") as HTMLCanvasElement;\r\nconst renderer = new Renderer(canvas);\r\nawait renderer.initialize(textureAtlas, './objects/skybox/');\r\n\r\nconst inputHandler = new InputHandler(canvas);\r\n\r\nconst scene = new Scene();\r\n\r\nconst camera = new Camera({\r\n    name: \"Kamera\",\r\n    id: \"kameraID\",\r\n    position: [0, 7.5, -21],\r\n    rotation: [16, 180, 0],\r\n    cameraType: CameraType.perspective,\r\n    fov: 60,\r\n    near: 0.1,\r\n    far: 300,\r\n});\r\n\r\nconst sphere = new Sphere({\r\n    name: \"Lopta\",\r\n    id: \"sphereID\",\r\n    position: [0, 3, -9],\r\n    rotation: [0, 0, 0],\r\n    radius: 1,\r\n    texture: {\r\n        atlas: textureAtlas,\r\n        indexX: 0,\r\n        indexY: 0,\r\n    },\r\n    velocity: {\r\n        x: 0,\r\n        y: 0,\r\n        z: 0,\r\n    },\r\n});\r\n\r\nconst cube = new Cube({\r\n    name: \"Kocka\",\r\n    id: \"kockaID\",\r\n    position: [0, 0, -11],\r\n    rotation: [0, 0, 0],\r\n    lenght: [10, 0.5, 10],\r\n    color: [0.3, 0.5, 0.8, 1],\r\n});\r\n\r\nconst cube2 = new Cube({\r\n    name: \"Kocka\",\r\n    id: \"kockaID\",\r\n    position: [0, 0, 15],\r\n    rotation: [0, 0, 0],\r\n    lenght: [10, 0.5, 10],\r\n    color: [0.3, 0.5, 0.8, 1],\r\n});\r\n\r\nconst cube3 = new Cube({\r\n    name: \"Kocka\",\r\n    id: \"kockaID\",\r\n    position: [15, -2, 8],\r\n    rotation: [0, 0, 0],\r\n    lenght: [10, 0.5, 15],\r\n    color: [0.3, 0.5, 0.8, 1],\r\n});\r\n\r\nconst cube4 = new Cube({\r\n    name: \"Kocka\",\r\n    id: \"kockaID\",\r\n    position: [0, 7, 27],\r\n    rotation: [-45, 0, 0],\r\n    lenght: [10, 0.5, 20],\r\n    color: [0.3, 0.5, 0.8, 1],\r\n});\r\n\r\nconst cube5 = new Cube({\r\n    name: \"Kocka\",\r\n    id: \"kockaID\",\r\n    position: [0, 14, 41],\r\n    rotation: [0, 0, 0],\r\n    lenght: [20, 0.5, 10],\r\n    color: [0.3, 0.5, 0.8, 1],\r\n});\r\n\r\nconst cube6 = new Cube({\r\n    name: \"Kocka\",\r\n    id: \"kockaID\",\r\n    position: [-17, 9, 41],\r\n    rotation: [0, 0, -20],\r\n    lenght: [10, 0.2, 10],\r\n    color: [0.3, 0.5, 0.8, 1],\r\n});\r\n\r\nconst cube7 = new Cube({\r\n    name: \"Kocka\",\r\n    id: \"kockaID\",\r\n    position: [0, -2, 35],\r\n    rotation: [-15, 0, 0],\r\n    lenght: [10, 0.5, 25],\r\n    color: [0.3, 0.5, 0.8, 1],\r\n});\r\n\r\nconst cube8 = new Cube({\r\n    name: \"Kocka\",\r\n    id: \"kockaID\",\r\n    position: [0, -10, 10],\r\n    rotation: [-8, 0, 0],\r\n    lenght: [2.5, 0.2, 25],\r\n    color: [0.3, 0.5, 0.8, 1],\r\n});\r\n\r\nconst cube9 = new Cube({\r\n    name: \"Kocka\",\r\n    id: \"kockaID\",\r\n    position: [-5, -10, 0],\r\n    rotation: [8, 0, 0],\r\n    lenght: [2.5, 0.2, 10],\r\n    color: [0.3, 0.5, 0.8, 1],\r\n});\r\n\r\nconst cube10 = new Cube({\r\n    name: \"Kocka\",\r\n    id: \"kockaID\",\r\n    position: [-4, -8, -15],\r\n    rotation: [0, 0, 0],\r\n    lenght: [6, 2, 6],\r\n    color: [0.3, 0.5, 0.8, 1],\r\n});\r\n\r\nconst cube11 = new Cube({\r\n    name: \"Kocka\",\r\n    id: \"kockaID\",\r\n    position: [4, -5, -24],\r\n    rotation: [0, 0, 0],\r\n    lenght: [6, 2, 6],\r\n    color: [0.3, 0.5, 0.8, 1],\r\n});\r\n\r\nconst cube12 = new Cube({\r\n    name: \"Kocka\",\r\n    id: \"kockaID\",\r\n    position: [14, -1, -15],\r\n    rotation: [0, 0, 0],\r\n    lenght: [6, 1, 6],\r\n    color: [0.3, 0.5, 0.8, 1],\r\n});\r\n\r\nconst light = new Light({\r\n    name: \"Svijetlo\",\r\n    id: \"svijetloID\",\r\n    position: [0, 0, 0],\r\n    rotation: [0.3, -0.7, 0.2],\r\n});\r\n\r\nscene.setCamera(camera);\r\nscene.setLight(light);\r\nscene.addShapes(cube, cube2, cube3, cube4, cube5, cube6, cube7, cube8, cube9, cube10, cube11, cube12, sphere);\r\n\r\nsphere.attach(camera);\r\n\r\n// let gravity = -10;\r\nlet gravity = -parseFloat((document.getElementById(\"gravity\") as HTMLInputElement).value) - 1;\r\nlet restitutionCoef = 0.3;\r\nlet frictionCoef = parseFloat((document.getElementById(\"friction\") as HTMLInputElement).value) / 30;\r\nlet angularVelocity = parseFloat((document.getElementById(\"angvel\") as HTMLInputElement).value) * 100;\r\nlet rollingDamping = parseFloat((document.getElementById(\"rolldamp\") as HTMLInputElement).value) / 40 + 0.75;\r\nlet jumpForce = parseFloat((document.getElementById(\"jumpforce\") as HTMLInputElement).value);\r\n\r\nconst REST_VELOCITY_THRESHOLD = 0.005;\r\n\r\nlet fixedDeltaTime = 1 / 60; // seconds\r\nlet lastTime = 0;\r\nlet grounded = false;\r\nlet render = (time: number) => {\r\n    updateCoefficients();\r\n    updateSpans();\r\n\r\n    let deltaTime = (time - lastTime) / 1000; // seconds\r\n    lastTime = time;\r\n\r\n    inputHandler.control(sphere, grounded, 1, angularVelocity, jumpForce, fixedDeltaTime, ControllerDevice.keyboard);\r\n    grounded = false;\r\n\r\n    scene.shapes.forEach((obj) => {\r\n        if (obj instanceof Cube) {\r\n            let collision = checkCollision(sphere, obj);\r\n            if (collision !== undefined) {\r\n                obj.color.set([0, 0.8, 0.2]);\r\n                // Normal of collision\r\n                let ballCollisionNormal = sphere.getNormal(collision.res[0], collision.res[1], collision.res[2]);\r\n                let cubeCollisionNormal = vec3.negate(ballCollisionNormal);\r\n\r\n                if (cubeCollisionNormal[1] > 0) {\r\n                    grounded = true;\r\n                }\r\n\r\n                // Calculate velocity based on angular velocity\r\n                let contactOffset = vec3.scale(ballCollisionNormal, -sphere.getRadius() * 100);\r\n                let rollingVelocity = vec3.cross(contactOffset, sphere.angularVelocity);\r\n                sphere.velocity = vec3.lerp(sphere.velocity, rollingVelocity, frictionCoef);\r\n                sphere.angularVelocity = vec3.scale(sphere.angularVelocity, rollingDamping);\r\n\r\n                // Reposition the sphere to resolve penetration\r\n                let reposVector = vec3.scale(cubeCollisionNormal, collision.ratio * sphere.getRadius());\r\n                sphere.globalMove(reposVector[0], reposVector[1], reposVector[2]);\r\n\r\n                // Calculate the velocity along the normal\r\n                const vnDot = vec3.dot(sphere.velocity, cubeCollisionNormal);\r\n\r\n                // Decide how bouncy to be based on impact speed\r\n                let currentRestitution = restitutionCoef;\r\n                if (Math.abs(vnDot) < REST_VELOCITY_THRESHOLD) {\r\n                    currentRestitution = 0; // If speed is low, kill the bounce entirely\r\n                }\r\n                // Calculate and apply the restitution impulse\r\n                if (vnDot < 0) { // Only apply restitution if velocities are directed towards each other\r\n                    let scaledNormal = vec3.scale(cubeCollisionNormal, (1 + currentRestitution) * vnDot);\r\n                    sphere.velocity = vec3.subtract(sphere.velocity, scaledNormal);\r\n                }\r\n\r\n            }\r\n        }\r\n    });\r\n\r\n    // Calculate gravity\r\n    sphere.addForce(0, gravity * deltaTime, 0);\r\n\r\n    sphere.globalMove(sphere.velocity[0] * fixedDeltaTime, sphere.velocity[1] * fixedDeltaTime, sphere.velocity[2] * fixedDeltaTime);\r\n    sphere.globalRotate(-sphere.angularVelocity[0] * sphere.getRadius() * 100, 0, -sphere.angularVelocity[2] * sphere.getRadius() * 100);\r\n\r\n    renderer.render(scene);\r\n    requestAnimationFrame(render);\r\n}\r\nrequestAnimationFrame(render);\r\n\r\nfunction updateCoefficients() {\r\n    gravity = -parseFloat((document.getElementById(\"gravity\") as HTMLInputElement).value) - 1;\r\n    frictionCoef = parseFloat((document.getElementById(\"friction\") as HTMLInputElement).value) / 40;\r\n    angularVelocity = parseFloat((document.getElementById(\"angvel\") as HTMLInputElement).value) * 100;\r\n    rollingDamping = parseFloat((document.getElementById(\"rolldamp\") as HTMLInputElement).value) / 40 + 0.75;\r\n    jumpForce = parseFloat((document.getElementById(\"jumpforce\") as HTMLInputElement).value) * 100;\r\n}\r\n\r\nfunction updateSpans() {\r\n    gravitySpan.textContent = gravity.toString();\r\n    frictionSpan.textContent = frictionCoef.toFixed(3);\r\n    angvelSpan.textContent = angularVelocity.toString();\r\n    rollSpan.textContent = rollingDamping.toFixed(3);\r\n    jumpforceSpan.textContent = jumpForce.toString();\r\n}","import { mat4, vec3 } from \"wgpu-matrix\";\r\nimport { Cube } from \"./objects/shapes/cube\";\r\nimport { Sphere } from \"./objects/shapes/sphere\";\r\n\r\n\r\nexport function checkCollision(sphere: Sphere, cube: Cube) {\r\n    \r\n    // Pretvorba sfere u lokalni koordinatni sustav kocke\r\n    const localSpherePosition = vec3.subtract(sphere.position, cube.position);\r\n    const inverseRotationMatrix = mat4.transpose(cube.getRotationMatrix());\r\n    const spherePosLocal = vec3.transformMat4(localSpherePosition, inverseRotationMatrix);\r\n\r\n    // Najbliza tocka sudara\r\n    const closestX = Math.max(-cube.getLength()[0] / 2, Math.min(spherePosLocal[0], cube.getLength()[0] / 2));\r\n    const closestY = Math.max(-cube.getLength()[1] / 2, Math.min(spherePosLocal[1], cube.getLength()[1] / 2));\r\n    const closestZ = Math.max(-cube.getLength()[2] / 2, Math.min(spherePosLocal[2], cube.getLength()[2] / 2));\r\n\r\n    // Udaljenost najblize tocke i sfere\r\n    const dx = spherePosLocal[0] - closestX;\r\n    const dy = spherePosLocal[1] - closestY;\r\n    const dz = spherePosLocal[2] - closestZ;\r\n    const distanceSquared = dx * dx + dy * dy + dz * dz;\r\n\r\n    // Ako je udaljenost manja od radijusa, onda je sudar\r\n    if (distanceSquared <= sphere.getRadius() * sphere.getRadius()) {\r\n        let res = new Float32Array([closestX, closestY, closestZ]);\r\n        let outMat = mat4.multiply(cube.getPositionMatrix(), cube.getRotationMatrix());\r\n        res = vec3.transformMat4(res, outMat);\r\n        return {\r\n            res: res,\r\n            ratio: (sphere.getRadius() - Math.sqrt(distanceSquared)) / sphere.getRadius(),\r\n        }\r\n    } \r\n    return undefined;\r\n}","import { rotate } from \"mathjs\";\r\nimport { IObject } from \"./interfaces/IObject\";\r\nimport { Object } from \"./objects/object\";\r\nimport { Vec3 } from \"wgpu-matrix\";\r\n\r\nexport enum ControllerDevice {\r\n    mouse,\r\n    keyboard\r\n}\r\n\r\nexport class InputHandler {\r\n    private canvas: HTMLCanvasElement;\r\n    private keysPressed: Map<String, boolean>;\r\n    private keyPress: Set<String>;\r\n\r\n    private mouseDeltaX: number;\r\n    private mouseDeltaY: number;\r\n    private mouseScrollDelta: number;\r\n\r\n    private leftMouseDown: boolean;\r\n    private middleMouseDown: boolean;\r\n    private rightMouseDown: boolean;\r\n\r\n    constructor(canvas: HTMLCanvasElement) {\r\n        this.canvas = canvas;\r\n        this.keysPressed = new Map();\r\n        this.keyPress = new Set();\r\n\r\n        this.mouseDeltaX = 0;\r\n        this.mouseDeltaY = 0;\r\n        this.mouseScrollDelta = 0;\r\n\r\n        this.leftMouseDown = false;\r\n        this.middleMouseDown = false;\r\n        this.rightMouseDown = false;\r\n        this.listen();\r\n    }\r\n\r\n    public listen = () => {\r\n        this.canvas.addEventListener('contextmenu', (e) => e.preventDefault());\r\n\r\n        window.addEventListener(\"keydown\", (e) => this.keysPressed.set(e.key, true));\r\n        window.addEventListener(\"keyup\", (e) => this.keysPressed.set(e.key, false));\r\n\r\n        this.canvas.style.touchAction = 'pinch-zoom';\r\n        this.canvas.addEventListener('mousedown', (e) => {\r\n            switch (e.button) {\r\n                case 0:\r\n                    this.leftMouseDown = true;\r\n                    break;\r\n                case 1:\r\n                    this.middleMouseDown = true;\r\n                    break;\r\n                case 2:\r\n                    this.rightMouseDown = true;\r\n                    break;\r\n            }\r\n        });\r\n        this.canvas.addEventListener('mouseup', (e) => {\r\n            switch (e.button) {\r\n                case 0:\r\n                    this.leftMouseDown = false;\r\n                case 1:\r\n                    this.middleMouseDown = false;\r\n                case 2:\r\n                    this.rightMouseDown = false;\r\n            }\r\n        });\r\n        this.canvas.addEventListener('pointermove', (e) => {\r\n            if (this.leftMouseDown || this.middleMouseDown || this.rightMouseDown) {\r\n                this.mouseDeltaX += e.movementX;\r\n                this.mouseDeltaY += e.movementY;\r\n            }\r\n        });\r\n        this.canvas.addEventListener('wheel', (e) => {\r\n            this.mouseScrollDelta += e.deltaY;\r\n        })\r\n    }\r\n\r\n    public getKeysPressed() {\r\n        return this.keysPressed;\r\n    }\r\n\r\n    public getKeyPress() {\r\n        return this.keyPress;\r\n    }\r\n\r\n    public getMouseMovement = () => {\r\n        let output = [this.mouseDeltaX, this.mouseDeltaY, this.mouseScrollDelta]\r\n        this.mouseDeltaX = 0;\r\n        this.mouseDeltaY = 0;\r\n        this.mouseScrollDelta = 0;\r\n        return output;\r\n    }\r\n\r\n    public control(object: Object, grounded: boolean, moveSpeed: number, rotateSpeed: number, jumpForce: number, deltaTime: number, device: ControllerDevice) {\r\n        let used = false;\r\n        if (device == ControllerDevice.keyboard) {\r\n            let keyPressed = this.getKeysPressed();\r\n            keyPressed.forEach((val, key) => {\r\n                if (!val) return;\r\n                used = true;\r\n                switch (key) {\r\n                    case 'a':\r\n                        object.globalRotate(0, 100 * deltaTime, 0);\r\n                        break;\r\n                    case 'd':\r\n                        object.globalRotate(0, -100 * deltaTime, 0);\r\n                        break;\r\n                    case 'w':\r\n                        object.rotateRelative('x', -rotateSpeed * deltaTime);\r\n                        break;\r\n                    case 's':\r\n                        object.rotateRelative('x', rotateSpeed * deltaTime);\r\n                        break;\r\n                    case 'q':\r\n                        object.rotateRelative('z', rotateSpeed * deltaTime);\r\n                        break;\r\n                    case 'e':\r\n                        object.rotateRelative('z', -rotateSpeed * deltaTime);\r\n                        break;\r\n                    case ' ':\r\n                        if (grounded)\r\n                            object.addForce(0, jumpForce * deltaTime, 0);\r\n                        break;\r\n                    case 'r':\r\n                        location.reload();\r\n                        break;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (device == ControllerDevice.mouse) {\r\n            let mouseMove = this.getMouseMovement();\r\n            if (this.leftMouseDown) {\r\n                object.globalMove(0, mouseMove[1] * deltaTime * -moveSpeed, 0);\r\n                object.localMove(mouseMove[0] * deltaTime * -moveSpeed, 0, 0);\r\n                used = true;\r\n            }\r\n            else if (this.rightMouseDown) {\r\n                object.globalRotate(mouseMove[1] * deltaTime * rotateSpeed, mouseMove[0] * deltaTime * rotateSpeed, 0);\r\n                used = true;\r\n            }\r\n            else if (this.middleMouseDown) {\r\n                object.globalRotate(0, 0, mouseMove[0] * deltaTime * rotateSpeed);\r\n                used = true;\r\n            }\r\n            object.localMove(0, 0, mouseMove[2] * deltaTime * -moveSpeed);\r\n        }\r\n        return used;\r\n    }\r\n\r\n    public forceControl(moveAccel: number, rotateAccel: number, objVelocity: Vec3, objAngularVelocity: Vec3, deltaTime: number) {\r\n        let used = false;\r\n        let keyPressed = this.getKeysPressed();\r\n        keyPressed.forEach((val, key) => {\r\n            if (!val) return;\r\n            used = true;\r\n            switch (key) {\r\n                case 'a':\r\n                    // object.globalRotate(0, rotateSpeed * deltaTime, 0);\r\n                    break;\r\n                case 'd':\r\n                    // object.globalRotate(0, -rotateSpeed * deltaTime, 0);\r\n                    break;\r\n                case 'w':\r\n                    // object.rotateAroundChild('x', -rotateSpeed * deltaTime);\r\n                    objAngularVelocity[0] += rotateAccel * deltaTime;\r\n                    break;\r\n                case 's':\r\n                    // object.rotateAroundChild('x', rotateSpeed * deltaTime);\r\n                    objAngularVelocity[0] -= rotateAccel * deltaTime;\r\n                    break;\r\n                case 'q':\r\n                    // object.rotateAroundChild('z', rotateSpeed * deltaTime);\r\n                    objAngularVelocity[2] += rotateAccel * deltaTime;\r\n                    break;\r\n                case 'e':\r\n                    // object.rotateAroundChild('z', -rotateSpeed * deltaTime);\r\n                    objAngularVelocity[2] -= rotateAccel * deltaTime;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return used;\r\n    }\r\n}","import { vec3, mat4, Mat4, Vec3, Vec4 } from \"wgpu-matrix\";\r\nimport { Object, ObjectDescriptor } from \"./object\";\r\n\r\nexport enum CameraType {\r\n    perspective,\r\n}\r\n\r\nexport interface CameraDescriptor extends ObjectDescriptor {\r\n    cameraType: CameraType;\r\n    fov?: number;\r\n    near?: number;\r\n    far?: number;\r\n}\r\n\r\nexport class Camera extends Object {\r\n    public type: CameraType;\r\n    public fov: number;\r\n    public near: number;\r\n    public far: number;\r\n    public aspectRatio: number;\r\n\r\n    private projectionMatrix: Float32Array;\r\n\r\n    constructor(cameraDescriptor: CameraDescriptor) {\r\n        super(cameraDescriptor);\r\n\r\n        const canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\n        this.aspectRatio = canvas.width / canvas.height;\r\n        this.type = cameraDescriptor.cameraType;\r\n        this.fov = Math.PI / 3;\r\n        this.near = 0.1;\r\n        this.far = 100;\r\n        this.projectionMatrix = mat4.perspective(this.fov, this.aspectRatio, this.near, this.far);\r\n    }\r\n\r\n    public getData() {\r\n        let cameraWorldMatrix = mat4.multiply(this.positionMatrix, this.rotationMatrix);\r\n        let cameraViewMatrix = mat4.inverse(cameraWorldMatrix);\r\n        // return mat4.multiply(this.projectionMatrix, cameraViewMatrix);\r\n        return {\r\n            projection: this.projectionMatrix,\r\n            camera: cameraViewMatrix \r\n        }\r\n    }\r\n}","import { vec3 } from \"wgpu-matrix\";\r\nimport { Object, ObjectDescriptor } from \"./object\";\r\n\r\nexport class Light extends Object{\r\n    constructor(lightDescriptor: ObjectDescriptor){\r\n        super(lightDescriptor);\r\n    }\r\n\r\n    public localRotate = (degX: number, degY: number, degZ: number) => {\r\n        vec3.rotateX(this.rotation, vec3.zero(), degX * 180 / Math.PI, this.rotation);\r\n        vec3.rotateY(this.rotation, vec3.zero(), degY * 180 / Math.PI, this.rotation);\r\n        vec3.rotateZ(this.rotation, vec3.zero(), degZ * 180 / Math.PI, this.rotation);\r\n    };\r\n\r\n    public getData() {\r\n        return this.rotation;\r\n    }\r\n};","import { mat4, Mat4, Vec3, vec3 } from \"wgpu-matrix\";\r\nimport { IObject } from \"../interfaces/IObject\";\r\nimport { FixedFloat32Array } from \"../containers/fixedFloat32Array\";\r\n\r\nexport interface LockAxisDescriptor {\r\n    x: boolean;\r\n    y: boolean;\r\n    z: boolean;\r\n}\r\n\r\nexport interface VelocityDescriptor {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n}\r\n\r\nexport interface ObjectDescriptor {\r\n    name: string;\r\n    id: string;\r\n    position: [number, number, number];\r\n    rotation: [number, number, number];\r\n    lockAxis?: LockAxisDescriptor;\r\n    velocity?: VelocityDescriptor;\r\n    angularVelocity?: VelocityDescriptor;\r\n    mass?: number;\r\n}\r\n\r\nexport class Object implements IObject {\r\n    public name: string;\r\n    public id: string;\r\n    public position: Float32Array;\r\n    public rotation: Float32Array;\r\n    protected positionMatrix: Mat4;\r\n    public rotationMatrix: Mat4;\r\n    protected rotationMatrixX: Mat4;\r\n    protected rotationMatrixY: Mat4;\r\n    protected rotationMatrixZ: Mat4;\r\n    protected right: Float32Array;\r\n    protected up: Float32Array;\r\n    protected back: Float32Array;\r\n\r\n    protected lockAxis: LockAxisDescriptor;\r\n\r\n    public yaw: number;\r\n    public pitch: number;\r\n    public roll: number;\r\n\r\n    public parent?: Object;\r\n    public child?: Object;\r\n\r\n    public velocity: Vec3;\r\n    public angularVelocity: Vec3;\r\n\r\n    constructor(objectDescriptor: ObjectDescriptor) {\r\n        this.name = objectDescriptor.name;\r\n        this.id = objectDescriptor.id;\r\n        this.rotation = new Float32Array(objectDescriptor.rotation);\r\n\r\n        this.positionMatrix = mat4.translate(mat4.identity(), objectDescriptor.position);\r\n        this.position = new Float32Array(this.positionMatrix.buffer, 4 * 12, 3)\r\n\r\n        this.rotationMatrix = mat4.rotateX(mat4.identity(), this.rotation[0] * Math.PI / 180);\r\n        this.rotationMatrix = mat4.rotateY(this.rotationMatrix, this.rotation[1] * Math.PI / 180);\r\n        this.rotationMatrix = mat4.rotateZ(this.rotationMatrix, this.rotation[2] * Math.PI / 180);\r\n        this.rotationMatrixX = mat4.rotateX(mat4.identity(), this.rotation[0] * Math.PI / 180);\r\n        this.rotationMatrixY = mat4.rotateY(mat4.identity(), this.rotation[1] * Math.PI / 180);\r\n        this.rotationMatrixZ = mat4.rotateZ(mat4.identity(), this.rotation[2] * Math.PI / 180);\r\n\r\n        // Vec x\r\n        this.right = new Float32Array(this.rotationMatrix.buffer, 4 * 0, 3);\r\n        // Vec y\r\n        this.up = new Float32Array(this.rotationMatrix.buffer, 4 * 4, 3);\r\n        // Vec z\r\n        this.back = new Float32Array(this.rotationMatrix.buffer, 4 * 8, 3);\r\n\r\n        if (objectDescriptor.lockAxis !== undefined) {\r\n            this.lockAxis = objectDescriptor.lockAxis;\r\n        } else {\r\n            this.lockAxis = { x: false, y: false, z: false }\r\n        }\r\n\r\n        if (objectDescriptor.velocity !== undefined) {\r\n            this.velocity = vec3.create(objectDescriptor.velocity.x, objectDescriptor.velocity.y, objectDescriptor.velocity.z)\r\n        } else {\r\n            this.velocity = vec3.create(0, 0, 0);\r\n        }\r\n\r\n        if (objectDescriptor.angularVelocity !== undefined) {\r\n            this.angularVelocity = vec3.create(objectDescriptor.angularVelocity.x, objectDescriptor.angularVelocity.y, objectDescriptor.angularVelocity.z)\r\n        } else {\r\n            this.angularVelocity = vec3.create(0, 0, 0);\r\n        }\r\n\r\n        this.yaw = Math.atan2(this.back[0], this.back[2]);\r\n        this.pitch = -Math.asin(this.back[1]);\r\n        this.roll = Math.atan2(-this.up[0], this.right[0]);\r\n    }\r\n\r\n    public localMove(x: number, y: number, z: number): void {\r\n        let relativeDirection = vec3.create(0, 0, 0);\r\n        relativeDirection = vec3.addScaled(relativeDirection, this.right, x);\r\n        relativeDirection = vec3.addScaled(relativeDirection, this.up, y);\r\n        relativeDirection = vec3.addScaled(relativeDirection, this.back, z);\r\n        mat4.translate(this.positionMatrix, relativeDirection, this.positionMatrix);\r\n\r\n        if (this.child !== undefined) {\r\n            mat4.translate(this.child.positionMatrix, relativeDirection, this.child.positionMatrix);\r\n        }\r\n    }\r\n\r\n    public globalMove(x: number, y: number, z: number): void {\r\n        mat4.translate(this.positionMatrix, [x, y, z], this.positionMatrix);\r\n        if (this.child !== undefined) {\r\n            mat4.translate(this.child.positionMatrix, [x, y, z], this.child.positionMatrix);\r\n        }\r\n    }\r\n\r\n    public localRotate(x: number, y: number, z: number): void {\r\n        if (!this.lockAxis.x) {\r\n            this.pitch += x * Math.PI / 180;\r\n            mat4.rotateX(this.rotationMatrixX, x * Math.PI / 180, this.rotationMatrixX);\r\n            mat4.rotateX(this.rotationMatrix, x * Math.PI / 180, this.rotationMatrix);\r\n        }\r\n        if (!this.lockAxis.y) {\r\n            this.yaw += y * Math.PI / 180;\r\n            mat4.rotateY(this.rotationMatrixY, y * Math.PI / 180, this.rotationMatrixY);\r\n            mat4.rotateY(this.rotationMatrix, y * Math.PI / 180, this.rotationMatrix);\r\n        }\r\n        if (!this.lockAxis.z) {\r\n            this.roll += z * Math.PI / 180;\r\n            mat4.rotateZ(this.rotationMatrixZ, z * Math.PI / 180, this.rotationMatrixZ);\r\n            mat4.rotateZ(this.rotationMatrix, z * Math.PI / 180, this.rotationMatrix);\r\n        }\r\n    }\r\n\r\n    public globalRotate(x: number, y: number, z: number): void {\r\n        if (!this.lockAxis.x && x != 0) {\r\n            this.pitch += x * Math.PI / 180;\r\n            let rotationMatrixX = mat4.rotationX(x * Math.PI / 180);\r\n            this.rotationMatrix = mat4.multiply(rotationMatrixX, this.rotationMatrix);\r\n            this.rotationMatrixX = mat4.multiply(rotationMatrixX, this.rotationMatrixX);\r\n        }\r\n        if (!this.lockAxis.y && y != 0) {\r\n            this.yaw += y * Math.PI / 180;\r\n            let rotationMatrixY = mat4.rotationY(y * Math.PI / 180);\r\n            this.rotationMatrix = mat4.multiply(rotationMatrixY, this.rotationMatrix);\r\n            this.rotationMatrixY = mat4.multiply(rotationMatrixY, this.rotationMatrixY);\r\n            // Napravljeno zbog kamere\r\n            if (this.child !== undefined) {\r\n                this.child.yaw += y * Math.PI / 180;\r\n                let childPos = new Float32Array([this.child.position[0], this.position[1], this.child.position[2]]);\r\n                let radius = vec3.distance(this.position, childPos);\r\n                let childBack = new Float32Array(this.child.rotationMatrix.buffer, 4 * 8, 3);\r\n                let angle = -y * Math.PI / 180 + this.angleBetween(new Float32Array([1, 0]), new Float32Array([childBack[0], childBack[2]]));\r\n\r\n                this.child.position[0] = radius * Math.cos(angle) + this.position[0];\r\n                this.child.position[2] = radius * Math.sin(angle) + this.position[2];\r\n\r\n                this.child.rotationMatrix = mat4.multiply(rotationMatrixY, this.child.rotationMatrix);\r\n                this.child.rotationMatrixY = mat4.multiply(rotationMatrixY, this.child.rotationMatrixY);\r\n            }\r\n        }\r\n        if (!this.lockAxis.z && z != 0) {\r\n            this.roll += z * Math.PI / 180;\r\n            let rotationMatrixZ = mat4.rotationZ(z * Math.PI / 180);\r\n            this.rotationMatrix = mat4.multiply(rotationMatrixZ, this.rotationMatrix);\r\n            this.rotationMatrixZ = mat4.multiply(rotationMatrixZ, this.rotationMatrixZ);\r\n        }\r\n\r\n        this.recalculateAngles();\r\n    }\r\n\r\n    public rotateRelative(childAxis: 'x' | 'y' | 'z', amount: number): void {\r\n        if (this.child !== undefined) {\r\n            // let rotation: Float32Array = new Float32Array(3);\r\n            if (childAxis == 'x') {\r\n                let right = new Float32Array(this.child.rotationMatrix.buffer, 4 * 0, 3);\r\n                // rotation = mat4.axisRotation(right, amount * Math.PI / 180);\r\n                // this.angularVelocity = vec3.add(this.angularVelocity, vec3.scale(right, -amount * Math.PI / 180));\r\n                this.angularVelocity = vec3.lerp(this.angularVelocity, vec3.scale(right, -amount * Math.PI / 180), 0.1);\r\n            } else if (childAxis == 'y') {\r\n                let up = new Float32Array(this.child.rotationMatrix.buffer, 4 * 4, 3);\r\n                // rotation = mat4.axisRotation(up, amount * Math.PI / 180);\r\n                // this.angularVelocity = vec3.add(this.angularVelocity, vec3.scale(up, -amount * Math.PI / 180));\r\n                this.angularVelocity = vec3.lerp(this.angularVelocity, vec3.scale(up, -amount * Math.PI / 180), 0.1);\r\n            } else {\r\n                let back = new Float32Array(this.child.rotationMatrix.buffer, 4 * 8, 3);\r\n                // rotation = mat4.axisRotation(back, amount * Math.PI / 180);\r\n                // this.angularVelocity = vec3.add(this.angularVelocity, vec3.scale(back, -amount * Math.PI / 180));\r\n                this.angularVelocity = vec3.lerp(this.angularVelocity, vec3.scale(back, -amount * Math.PI / 180), 0.1);\r\n            }\r\n            // this.rotationMatrix = mat4.multiply(rotation, this.rotationMatrix);\r\n        }\r\n\r\n    }\r\n\r\n    public addForce(x: number, y: number, z: number): void {\r\n        vec3.add(this.velocity, [x, y, z], this.velocity);\r\n    }\r\n\r\n    public addLocalForce(x: number, y: number, z: number): void {\r\n        let relativeDirection = vec3.create(0, 0, 0);\r\n        relativeDirection = vec3.addScaled(relativeDirection, this.right, x);\r\n        relativeDirection = vec3.addScaled(relativeDirection, this.up, y);\r\n        relativeDirection = vec3.addScaled(relativeDirection, this.back, z);\r\n        vec3.add(this.velocity, relativeDirection, this.velocity);\r\n    }\r\n\r\n    public addRelativeAngularForce(childAxis: 'x' | 'y' | 'z', amount: number) {\r\n        if (this.child !== undefined) {\r\n            if (childAxis == 'x') {\r\n                let right = new Float32Array(this.child.rotationMatrix.buffer, 4 * 0, 3);\r\n                vec3.add(this.angularVelocity, vec3.mulScalar(right, amount), this.angularVelocity);\r\n            } else if (childAxis == 'y') {\r\n                let up = new Float32Array(this.child.rotationMatrix.buffer, 4 * 4, 3);\r\n                vec3.add(this.angularVelocity, vec3.mulScalar(up, amount), this.angularVelocity);\r\n            } else {\r\n                let back = new Float32Array(this.child.rotationMatrix.buffer, 4 * 8, 3);\r\n                vec3.add(this.angularVelocity, vec3.mulScalar(back, amount), this.angularVelocity);\r\n            }\r\n        }\r\n    }\r\n\r\n    public addRelativeTorque(childAxis: 'x' | 'y' | 'z', amount: number, mass: number, radius: number, deltaTime: number) {\r\n        if (this.child !== undefined) {\r\n            const MAX_ANGULAR_ACCEL = 600;\r\n            let I = (2 / 5) * mass * radius * radius;\r\n            if (childAxis == 'x') {\r\n                let right = new Float32Array(this.child.rotationMatrix.buffer, 4 * 0, 3);\r\n                let torqueVec = vec3.scale(right, amount);\r\n                let angularAcc = vec3.scale(torqueVec, 1 / I);\r\n                if (vec3.len(angularAcc) > MAX_ANGULAR_ACCEL) {\r\n                    angularAcc = vec3.scale(angularAcc, MAX_ANGULAR_ACCEL / vec3.len(angularAcc));\r\n                }\r\n                let deltaOmega = vec3.scale(angularAcc, deltaTime);\r\n                this.angularVelocity = vec3.add(this.angularVelocity, deltaOmega);\r\n                // vec3.add(this.angularVelocity, vec3.mulScalar(right, amount), this.angularVelocity);\r\n            } else if (childAxis == 'y') {\r\n                let up = new Float32Array(this.child.rotationMatrix.buffer, 4 * 4, 3);\r\n                let torqueVec = vec3.scale(up, amount);\r\n                let angularAcc = vec3.scale(torqueVec, 1 / I);\r\n                if (vec3.len(angularAcc) > MAX_ANGULAR_ACCEL) {\r\n                    angularAcc = vec3.scale(angularAcc, MAX_ANGULAR_ACCEL / vec3.len(angularAcc));\r\n                }\r\n                let deltaOmega = vec3.scale(angularAcc, deltaTime);\r\n                this.angularVelocity = vec3.add(this.angularVelocity, deltaOmega);\r\n                // vec3.add(this.angularVelocity, vec3.mulScalar(up, amount), this.angularVelocity);\r\n            } else {\r\n                let back = new Float32Array(this.child.rotationMatrix.buffer, 4 * 8, 3);\r\n                let torqueVec = vec3.scale(back, amount);\r\n                let angularAcc = vec3.scale(torqueVec, 1 / I);\r\n                if (vec3.len(angularAcc) > MAX_ANGULAR_ACCEL) {\r\n                    angularAcc = vec3.scale(angularAcc, MAX_ANGULAR_ACCEL / vec3.len(angularAcc));\r\n                }\r\n                let deltaOmega = vec3.scale(angularAcc, deltaTime);\r\n                this.angularVelocity = vec3.add(this.angularVelocity, deltaOmega);\r\n                // vec3.add(this.angularVelocity, vec3.mulScalar(back, amount), this.angularVelocity);\r\n            }\r\n        }\r\n    }\r\n\r\n    public getPositionMatrix() {\r\n        return this.positionMatrix;\r\n    }\r\n\r\n    public getRotationMatrix() {\r\n        return this.rotationMatrix;\r\n    }\r\n\r\n    public getRotationMatrixX() {\r\n        return this.rotationMatrixX;\r\n    }\r\n\r\n    public getRotationMatrixY() {\r\n        return this.rotationMatrixY;\r\n    }\r\n\r\n    public getRotationMatrixZ() {\r\n        return this.rotationMatrixZ;\r\n    }\r\n\r\n    public setPositionMatrix(matrix: Mat4) {\r\n        this.positionMatrix = matrix;\r\n    }\r\n\r\n    public attachTo(parent: Object) {\r\n        this.parent = parent;\r\n    }\r\n\r\n    public attach(child: Object) {\r\n        this.child = child;\r\n    }\r\n\r\n    public getData() { };\r\n\r\n    public hashCode(): number {\r\n        return this.name.split('').reduce((hash, char) => {\r\n            return char.charCodeAt(0) + (hash << 6) + (hash << 16) - hash;\r\n        }, 0);\r\n    }\r\n\r\n    private recalculateAngles() {\r\n        this.yaw = Math.atan2(this.back[0], this.back[2]);\r\n        this.pitch = -Math.asin(this.back[1]);\r\n        this.roll = Math.atan2(-this.up[0], this.right[0]);\r\n    }\r\n\r\n    private angleBetween(vec1: Float32Array, vec2: Float32Array) {\r\n        let thetaU = Math.atan2(vec1[1], vec1[0])\r\n        let thetaV = Math.atan2(vec2[1], vec2[0])\r\n        let angle = thetaV - thetaU;\r\n        if (angle < 0) {\r\n            angle += 2 * Math.PI;\r\n        }\r\n        return angle;\r\n    }\r\n}\r\n","import { Mat4, Vec3, Vec4, mat3, mat4, vec3, vec4 } from \"wgpu-matrix\";\r\nimport { Object, ObjectDescriptor } from \"../object\";\r\nimport { Shape, ShapeDescriptor } from \"./shape\";\r\nimport { NotUndefined } from \"object-hash\";\r\n\r\nexport interface CubeDescriptor extends ShapeDescriptor {\r\n    lenght: [number, number, number];\r\n}\r\n\r\nexport class Cube extends Shape {\r\n    protected vertices: Float32Array;\r\n    protected sizeMatrix: Float32Array;\r\n    private length: [number, number, number];\r\n\r\n    constructor(\r\n        cubeDescriptor: CubeDescriptor\r\n    ) {\r\n        super(cubeDescriptor);\r\n\r\n        this.length = cubeDescriptor.lenght;\r\n        this.sizeMatrix = mat4.identity();\r\n        mat4.scale(this.sizeMatrix, this.length, this.sizeMatrix);\r\n\r\n        this.vertices = this.initVertices();\r\n    }\r\n\r\n    public getLength(): [number, number, number] {\r\n        return this.length;\r\n    }\r\n\r\n    public setLength(lenght: [number, number, number]) {\r\n        this.length = lenght;\r\n        mat4.scale(this.sizeMatrix, this.length, this.sizeMatrix);\r\n    }\r\n\r\n    public getNormal(x: number, y: number, z: number) {\r\n        const localPoint = vec3.subtract(vec3.create(x, y, z), this.position);\r\n        const invRotation = mat4.transpose(this.rotationMatrix);\r\n        const pointLocal = vec3.transformMat4Upper3x3(localPoint, invRotation);\r\n\r\n        const halfSize = [this.length[0] / 2, this.length[1] / 2, this.length[2] / 2];\r\n\r\n        // Step 2: Determine closest face in local space\r\n        const dx = Math.abs(pointLocal[0]) - halfSize[0];\r\n        const dy = Math.abs(pointLocal[1]) - halfSize[1];\r\n        const dz = Math.abs(pointLocal[2]) - halfSize[2];\r\n\r\n        const distances = [dx, dy, dz];\r\n        // console.log(maxAxis);\r\n        let minAxis = 0;\r\n        let minAbs = Math.abs(distances[0]);\r\n\r\n        for (let i = 1; i < 3; i++) {\r\n            const absVal = Math.abs(distances[i]);\r\n            if (absVal < minAbs) {\r\n                minAbs = absVal;\r\n                minAxis = i;\r\n            }\r\n        }\r\n        const localNormal = vec3.create(0, 0, 0);\r\n        localNormal[minAxis] = Math.sign(pointLocal[minAxis]);\r\n\r\n        // Step 3: Transform normal back to world space\r\n        const worldNormal = vec3.transformMat4Upper3x3(localNormal, this.rotationMatrix);\r\n        return vec3.normalize(worldNormal);\r\n    }\r\n\r\n    initVertices(): Float32Array {\r\n        let vertices = new Float32Array([\r\n            -0.5, 0.5, 0.5, // front face\r\n            -0.5, -0.5, 0.5,\r\n            0.5, 0.5, 0.5,\r\n            0.5, -0.5, 0.5,\r\n            0.5, 0.5, -0.5, // right f\r\n            0.5, 0.5, 0.5,\r\n            0.5, -0.5, -0.5,\r\n            0.5, -0.5, 0.5,\r\n            0.5, 0.5, -0.5, // back f\r\n            0.5, -0.5, -0.5,\r\n            -0.5, 0.5, -0.5,\r\n            -0.5, -0.5, -0.5,\r\n            -0.5, 0.5, 0.5, // left f\r\n            -0.5, 0.5, -0.5,\r\n            -0.5, -0.5, 0.5,\r\n            -0.5, -0.5, -0.5,\r\n            0.5, -0.5, 0.5, // bottom f\r\n            -0.5, -0.5, 0.5,\r\n            0.5, -0.5, -0.5,\r\n            -0.5, -0.5, -0.5,\r\n            -0.5, 0.5, 0.5, // top f\r\n            0.5, 0.5, 0.5,\r\n            -0.5, 0.5, -0.5,\r\n            0.5, 0.5, -0.5\r\n        ]);\r\n\r\n        let textureData = new Array(\r\n            0, 0.34, // front face (4)\r\n            1 / 4, 0.34,\r\n            0, 0.66,\r\n            1 / 4, 0.66,\r\n            2 / 4, 1, // right face (5)\r\n            1 / 4, 1,\r\n            2 / 4, 0.667,\r\n            1 / 4, 0.667,\r\n            3 / 4, 0.66, // back face (2)\r\n            2 / 4, 0.66,\r\n            3 / 4, 0.34,\r\n            2 / 4, 0.34,\r\n            1 / 4, 0, // left face (6)\r\n            2 / 4, 0,\r\n            1 / 4, 0.33,\r\n            2 / 4, 0.33,\r\n            2 / 4, 0.66, // bottom face (3)\r\n            2 / 4, 0.34,\r\n            1 / 4, 0.66,\r\n            1 / 4, 0.34,\r\n            1, 0.66, // top face (1)\r\n            1, 0.34,\r\n            3 / 4, 0.66,\r\n            3 / 4, 0.34,\r\n        );\r\n\r\n\r\n        if (this.texture !== undefined) {\r\n            textureData.forEach((el, id) => {\r\n                if (this.texture !== undefined) {\r\n                    if (id % 2 == 0) {\r\n                        textureData[id] = (el + this.texture.indexX) / this.texture.atlas.rowElements\r\n                    } else {\r\n                        textureData[id] = (el + this.texture.indexY) / this.texture.atlas.colElements\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n        let normalsData = new Float32Array([\r\n            0, 0, 1, // Front\r\n            1, 0, 0, // Right\r\n            0, 0, -1, // Back\r\n            -1, 0, 0, // Left\r\n            0, -1, 0, // Bottom\r\n            0, 1, 0 // Top\r\n        ]);\r\n\r\n        let indexData = new Uint16Array([\r\n            0, 1, 2, 2, 1, 3,  // front\r\n            4, 5, 6, 6, 5, 7,  // right\r\n            8, 9, 10, 10, 9, 11,  // back\r\n            12, 13, 14, 14, 13, 15,  // left\r\n            16, 17, 18, 18, 17, 19,  // bottom\r\n            20, 21, 22, 22, 21, 23,  // top\r\n        ]);\r\n\r\n        let out = new Float32Array(indexData.length * 8);\r\n\r\n        for (let i = 0; i < indexData.length; i++) {\r\n            const positionIdx = indexData[i] * 3;\r\n            const position = vertices.slice(positionIdx, positionIdx + 3);\r\n            out.set(position, i * 8);\r\n\r\n            const quadIdx = (i / 6 | 0) * 3;\r\n            const normal = normalsData.slice(quadIdx, quadIdx + 3);\r\n            out.set(normal, i * 8 + 3);\r\n\r\n            const texIdx = indexData[i] * 2;\r\n            const texture = textureData.slice(texIdx, texIdx + 2);\r\n            out.set(texture, i * 8 + 6);\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    private mat3frommat4(matrix4: Mat4) {\r\n        return new Float32Array([matrix4[0], matrix4[1], matrix4[2], matrix4[4], matrix4[5], matrix4[6], matrix4[8], matrix4[9], matrix4[10]]);\r\n    }\r\n}","import { mat4, Vec3 } from \"wgpu-matrix\";\r\nimport { Object, ObjectDescriptor } from \"../object\";\r\nimport { TextureAtlas } from \"../../textureAtlas\";\r\n\r\nexport interface TextureDescriptor {\r\n    atlas: TextureAtlas;\r\n    indexX: number;\r\n    indexY: number;\r\n}\r\n\r\nexport interface ShapeDescriptor extends ObjectDescriptor {\r\n    color?: [number, number, number, number];\r\n    texture?: TextureDescriptor;\r\n}\r\n\r\nexport interface RenderDataDescriptor {\r\n    name: string\r\n    vertices: Float32Array;\r\n    numberVertices: number;\r\n    matrix: Float32Array;\r\n    color: Float32Array;\r\n    containsTexture: boolean;\r\n    // texture?: TextureDescriptor;\r\n}\r\n\r\nexport abstract class Shape extends Object {\r\n    color: Float32Array;\r\n    texture?: TextureDescriptor;\r\n    containsTexture: boolean;\r\n    // image?: ImageBitmap;\r\n\r\n    protected abstract sizeMatrix: Float32Array;\r\n    protected abstract vertices: Float32Array;\r\n\r\n    constructor(shapeDescriptor: ShapeDescriptor) {\r\n        super(shapeDescriptor);\r\n        this.color = shapeDescriptor.color !== undefined ? new Float32Array(shapeDescriptor.color) : new Float32Array([0.8, 0.5, 0.2, 1]);\r\n        this.texture = shapeDescriptor.texture;\r\n        this.containsTexture = this.texture === undefined ? false : true;\r\n    }\r\n\r\n    protected abstract getNormal(x: number, y: number, z: number): Vec3;\r\n\r\n    public getScaleMatrix() {\r\n        return this.sizeMatrix;\r\n    }\r\n\r\n    getData(): RenderDataDescriptor { \r\n        let outMat = mat4.multiply(mat4.multiply(this.positionMatrix, this.rotationMatrix), this.sizeMatrix);\r\n        return {\r\n            name: this.name,\r\n            vertices: this.vertices,\r\n            numberVertices: this.vertices.byteLength / 8,\r\n            matrix: outMat,\r\n            color: this.color,\r\n            containsTexture: this.containsTexture,\r\n        }\r\n    }\r\n}","import { mat4, vec3, vec4, Vec4 } from \"wgpu-matrix\";\r\nimport { Shape, ShapeDescriptor } from \"./shape\";\r\n\r\nexport interface SphereDescriptor extends ShapeDescriptor {\r\n    radius: number,\r\n}\r\n\r\nexport class Sphere extends Shape {\r\n    private radius: number;\r\n    protected sizeMatrix: Float32Array;\r\n    protected vertices: Float32Array;\r\n\r\n    constructor(sphereDescriptor: SphereDescriptor) {\r\n        super(sphereDescriptor);\r\n\r\n        this.radius = sphereDescriptor.radius;\r\n        this.sizeMatrix = mat4.identity();\r\n        this.setRadius(this.radius);\r\n\r\n        this.vertices = this.initVertices(this.radius, 16, 16);\r\n    }\r\n\r\n    public setRadius(radius: number) : void {\r\n        this.radius = radius;\r\n        mat4.scale(this.sizeMatrix, [radius, radius, radius], this.sizeMatrix);\r\n    }\r\n\r\n    public getRadius() : number{\r\n        return this.radius;\r\n    }\r\n    \r\n    public getNormal(x: number, y: number, z: number) {\r\n        // console.log(vec3.create(x, y, z));\r\n        // console.log(this.position);\r\n        // console.log(vec3.subtract(vec3.create(x, y, z), this.position));\r\n        // console.log(vec3.subtract(this.position, vec3.create(x, y, z)));\r\n        return vec3.normalize(vec3.subtract(vec3.create(x, y, z), this.position));\r\n    }\r\n\r\n    private initVertices(radius: number, latSegments: number, lonSegments: number): Float32Array {\r\n        const data: number[] = [];\r\n        const vertexMap: number[][] = []; // Stores raw vertices\r\n\r\n        // Step 1: Generate unique vertices and normals\r\n        for (let lat = 0; lat <= latSegments; lat++) {\r\n            const theta = (lat * Math.PI) / latSegments; // Latitude angle (0 to π)\r\n            const sinTheta = Math.sin(theta);\r\n            const cosTheta = Math.cos(theta);\r\n            let v: number;\r\n            if (this.texture === undefined) {\r\n                v = lat / latSegments;\r\n            } else {\r\n                v = (lat / latSegments + this.texture.indexY) / this.texture.atlas.colElements;\r\n            }\r\n\r\n            for (let lon = 0; lon <= lonSegments; lon++) {\r\n                const phi = (lon * 2 * Math.PI) / lonSegments; // Longitude angle (0 to 2π)\r\n                const sinPhi = Math.sin(phi);\r\n                const cosPhi = Math.cos(phi);\r\n                let u: number;\r\n                if (this.texture === undefined) {\r\n                    u = 1 - lon / lonSegments;\r\n                } else {\r\n                    u = (1 - lon / lonSegments + this.texture?.indexX) / this.texture?.atlas.rowElements;\r\n                }\r\n\r\n                // Compute vertex position\r\n                const x = cosPhi * sinTheta;\r\n                const y = cosTheta;\r\n                const z = sinPhi * sinTheta;\r\n\r\n                // Store as an array entry\r\n                vertexMap.push([radius * x, radius * y, radius * z, x, y, z, u, v]); // Position + Normal + UV\r\n            }\r\n        }\r\n\r\n        // Step 2: Generate triangle data, duplicating vertices\r\n        for (let lat = 0; lat < latSegments; lat++) {\r\n            for (let lon = 0; lon < lonSegments; lon++) {\r\n                const i0 = lat * (lonSegments + 1) + lon;\r\n                const i1 = i0 + 1;\r\n                const i2 = i0 + (lonSegments + 1);\r\n                const i3 = i2 + 1;\r\n\r\n                // First triangle (i0, i2, i1)\r\n                data.push(...vertexMap[i0], ...vertexMap[i2], ...vertexMap[i1]);\r\n                // data.push(...vertexMap[i0], ...vertexMap[i1], ...vertexMap[i2]);\r\n\r\n                // Second triangle (i1, i2, i3)\r\n                data.push(...vertexMap[i1], ...vertexMap[i2], ...vertexMap[i3]);\r\n                // data.push(...vertexMap[i1], ...vertexMap[i2], ...vertexMap[i3]);\r\n            }\r\n        }\r\n\r\n        return new Float32Array(data);\r\n    }\r\n\r\n}","import { Camera } from \"./objects/camera\";\r\nimport { Scene } from \"./scene\";\r\nimport { Cube } from \"./objects/shapes/cube\";\r\nimport { Light } from \"./objects/light\";\r\nimport { Model } from \"./objects/shapes/model\";\r\nimport { Sphere } from \"./objects/shapes/sphere\";\r\n\r\nimport { RenderDataDescriptor } from \"./objects/shapes/shape\";\r\n\r\nimport objColorShader from \"./shaders/objColorShader.wgsl\";\r\nimport objTextureShader from \"./shaders/objTextureShader.wgsl\";\r\nimport debugShader from \"./shaders/debugShader.wgsl\";\r\nimport skyBoxShader from \"./shaders/skyboxShader.wgsl\"\r\nimport { TextureAtlas } from \"./textureAtlas\";\r\nimport { unwatchFile } from \"fs\";\r\nimport { mat4 } from \"wgpu-matrix\";\r\n\r\nexport class Renderer {\r\n    private canvas: HTMLCanvasElement;\r\n    private device!: GPUDevice;\r\n    private context!: GPUCanvasContext;\r\n    private presentationFormat!: GPUTextureFormat;\r\n    private colorRenderPipeline!: GPURenderPipeline;\r\n    private textureRenderPipeline!: GPURenderPipeline;\r\n    private debugRenderPipeline!: GPURenderPipeline;\r\n    private skyBoxRenderPipeline!: GPURenderPipeline;\r\n    private renderPassDescriptor!: GPURenderPassDescriptor;\r\n\r\n    private multisamlpeTexture!: GPUTexture;\r\n\r\n    private renderTarget!: GPUTexture;\r\n    private renderTargetView!: GPUTextureView;\r\n\r\n    private cameraBuffer!: GPUBuffer;\r\n    private lightBuffer!: GPUBuffer;\r\n    private objectsBindGroup!: GPUBindGroup;\r\n\r\n    private shapesMatrixBuffer!: GPUBuffer;\r\n    private shapesColorBuffer!: GPUBuffer;\r\n    private shapesTextureBuffer!: GPUTexture;\r\n    private debugColorBuffer!: GPUBuffer;\r\n    private sampler!: GPUSampler;\r\n    private shapesColorBindGroup!: GPUBindGroup;\r\n    private shapesTextureBindGroup!: GPUBindGroup;\r\n    private debugBindGroup!: GPUBindGroup;\r\n    private skyboxBindGroup!: GPUBindGroup;\r\n    private skyboxCameraBuffer!: GPUBuffer;\r\n\r\n    constructor(canvas: HTMLCanvasElement) {\r\n        this.canvas = canvas;\r\n    }\r\n\r\n    public async initialize(textureAtlas: TextureAtlas, skyboxPath: string) {\r\n        if (navigator.gpu === undefined) {\r\n            console.log(\"This browser/device doesn't support WebGPU...\");\r\n            alert(\"This browser/device doesn't support WebGPU...\");\r\n            return;\r\n        }\r\n\r\n        // Get device\r\n        let adapter = await navigator.gpu.requestAdapter();\r\n        console.log(adapter);\r\n        this.device = await adapter!.requestDevice();\r\n        if (this.device === undefined) {\r\n            console.log(\"Couldn't load device (not supported)\");\r\n            return;\r\n        }\r\n\r\n        // Configure context\r\n        this.context = this.canvas.getContext('webgpu') as GPUCanvasContext;\r\n        this.presentationFormat = navigator.gpu.getPreferredCanvasFormat();\r\n        this.context.configure({\r\n            device: this.device,\r\n            format: navigator.gpu.getPreferredCanvasFormat(),\r\n            alphaMode: 'premultiplied'\r\n        });\r\n\r\n        // Set canvas size\r\n        this.canvas.width = this.canvas.clientWidth * window.devicePixelRatio;\r\n        this.canvas.height = this.canvas.clientHeight * window.devicePixelRatio;\r\n\r\n        // ========== Create bind group layouts ==========\r\n        const objectsBindGroupLayoutDescriptor: GPUBindGroupLayoutDescriptor = {\r\n            label: 'Objects bind group layout desc',\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    visibility: GPUShaderStage.VERTEX,\r\n                    buffer: {\r\n                        type: \"uniform\",\r\n                        hasDynamicOffset: false,\r\n                    },\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    visibility: GPUShaderStage.FRAGMENT,\r\n                    buffer: {\r\n                        type: \"uniform\",\r\n                        hasDynamicOffset: false,\r\n                    },\r\n                },\r\n            ]\r\n        };\r\n        const objectsBindGroupLayout = this.device.createBindGroupLayout(objectsBindGroupLayoutDescriptor);\r\n\r\n        const shapesColorBindGroupLayoutDescriptor: GPUBindGroupLayoutDescriptor = {\r\n            label: 'Shapes bind group layout descriptor',\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    visibility: GPUShaderStage.VERTEX,\r\n                    buffer: {\r\n                        type: 'uniform',\r\n                        hasDynamicOffset: true,\r\n                    },\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    visibility: GPUShaderStage.FRAGMENT,\r\n                    buffer: {\r\n                        type: 'uniform',\r\n                        hasDynamicOffset: true,\r\n                    },\r\n                },\r\n            ]\r\n        }\r\n        const shapesColorBindGroupLayout = this.device.createBindGroupLayout(shapesColorBindGroupLayoutDescriptor);\r\n\r\n        const shapesTextureBindGroupLayoutDescriptor: GPUBindGroupLayoutDescriptor = {\r\n            label: 'Shapes texture bind group layout',\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    visibility: GPUShaderStage.VERTEX,\r\n                    buffer: {\r\n                        type: 'uniform',\r\n                        hasDynamicOffset: true,\r\n                    },\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    visibility: GPUShaderStage.FRAGMENT,\r\n                    sampler: {\r\n                        type: 'filtering',\r\n                    },\r\n                },\r\n                {\r\n                    binding: 2,\r\n                    visibility: GPUShaderStage.FRAGMENT,\r\n                    texture: {\r\n                        sampleType: 'float',\r\n                        viewDimension: '2d',\r\n                        multisampled: false,\r\n                    },\r\n                },\r\n            ]\r\n        }\r\n        const shapesTextureBindGroupLayout = this.device.createBindGroupLayout(shapesTextureBindGroupLayoutDescriptor);\r\n\r\n        // ========== Create render pipeline for solid colored objects ==========\r\n        const colorShaderModule = this.device.createShaderModule({ code: objColorShader });\r\n        const colorRenderPipelineDescriptor: GPURenderPipelineDescriptor = {\r\n            label: 'Color render pipeline',\r\n            layout: this.device.createPipelineLayout({ bindGroupLayouts: [objectsBindGroupLayout, shapesColorBindGroupLayout] }),\r\n            vertex: {\r\n                module: colorShaderModule,\r\n                buffers: [\r\n                    {\r\n                        arrayStride: (3 + 3 + 2) * 4, // 3 vertex coords & 3 normals coords & 2 texture coords\r\n                        attributes: [\r\n                            { shaderLocation: 0, offset: 0, format: 'float32x3' },\r\n                            { shaderLocation: 1, offset: 3 * 4, format: 'float32x3' },\r\n                            { shaderLocation: 2, offset: 6 * 4, format: 'float32x2' },\r\n                        ]\r\n                    }\r\n                ]\r\n            },\r\n            fragment: {\r\n                module: colorShaderModule,\r\n                targets: [{ format: this.presentationFormat }]\r\n            },\r\n            primitive: {\r\n                topology: 'triangle-list'\r\n            },\r\n            depthStencil: {\r\n                format: 'depth24plus',\r\n                depthWriteEnabled: true,\r\n                depthCompare: 'less',\r\n            },\r\n            multisample: { count: 4 },\r\n        }\r\n        this.colorRenderPipeline = this.device.createRenderPipeline(colorRenderPipelineDescriptor);\r\n\r\n        // ========= Create render pipeline for textured objects ============\r\n        const textureShaderModule = this.device.createShaderModule({ code: objTextureShader });\r\n        const textureRenderPipelineDescriptor: GPURenderPipelineDescriptor = {\r\n            label: 'Texture render pipeline',\r\n            layout: this.device.createPipelineLayout({ bindGroupLayouts: [objectsBindGroupLayout, shapesTextureBindGroupLayout] }),\r\n            vertex: {\r\n                module: textureShaderModule,\r\n                buffers: [\r\n                    {\r\n                        arrayStride: (3 + 3 + 2) * 4, // 3 vertex coords & 3 normals coords & 2 texture coords\r\n                        attributes: [\r\n                            { shaderLocation: 0, offset: 0, format: 'float32x3' },\r\n                            { shaderLocation: 1, offset: 3 * 4, format: 'float32x3' },\r\n                            { shaderLocation: 2, offset: 6 * 4, format: 'float32x2' },\r\n                        ]\r\n                    }\r\n                ]\r\n            },\r\n            fragment: {\r\n                module: textureShaderModule,\r\n                targets: [{ format: this.presentationFormat }]\r\n            },\r\n            primitive: {\r\n                topology: 'triangle-list'\r\n            },\r\n            depthStencil: {\r\n                format: 'depth24plus',\r\n                depthWriteEnabled: true,\r\n                depthCompare: 'less',\r\n            },\r\n            multisample: { count: 4 }\r\n        }\r\n        this.textureRenderPipeline = this.device.createRenderPipeline(textureRenderPipelineDescriptor);\r\n\r\n        const debugBindGroupLayoutDescriptor: GPUBindGroupLayoutDescriptor = {\r\n            label: 'Debug bind group layout descriptor',\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    visibility: GPUShaderStage.VERTEX,\r\n                    buffer: {\r\n                        type: 'uniform',\r\n                        hasDynamicOffset: false,\r\n                    },\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    visibility: GPUShaderStage.FRAGMENT,\r\n                    buffer: {\r\n                        type: 'uniform',\r\n                        hasDynamicOffset: true,\r\n                    },\r\n                },\r\n            ]\r\n        };\r\n        const debugBindGroupLayout = this.device.createBindGroupLayout(debugBindGroupLayoutDescriptor);\r\n\r\n        const debugShaderModule = this.device.createShaderModule({ code: debugShader });\r\n        const debugRenderPipelineDescriptor: GPURenderPipelineDescriptor = {\r\n            layout: this.device.createPipelineLayout({ bindGroupLayouts: [debugBindGroupLayout] }),\r\n            vertex: {\r\n                module: debugShaderModule,\r\n                buffers: [\r\n                    {\r\n                        arrayStride: 3 * 4,\r\n                        attributes: [\r\n                            { shaderLocation: 0, offset: 0, format: 'float32x3' },\r\n                        ]\r\n                    }\r\n                ]\r\n            },\r\n            fragment: {\r\n                module: debugShaderModule,\r\n                targets: [{ format: this.presentationFormat }]\r\n            },\r\n            primitive: {\r\n                topology: 'line-list'\r\n            },\r\n            depthStencil: {\r\n                format: 'depth24plus',\r\n                depthWriteEnabled: true,\r\n                depthCompare: 'less'\r\n            },\r\n            multisample: { count: 4 }\r\n        }\r\n        this.debugRenderPipeline = this.device.createRenderPipeline(debugRenderPipelineDescriptor);\r\n\r\n        const skyBoxShaderModule = this.device.createShaderModule({ code: skyBoxShader });\r\n        const skyboxRenderPipelineDescriptor: GPURenderPipelineDescriptor = {\r\n            label: 'skybox render pipeline',\r\n            layout: 'auto',\r\n            vertex: {\r\n                module: skyBoxShaderModule,\r\n            },\r\n            fragment: {\r\n                module: skyBoxShaderModule,\r\n                targets: [{ format: this.presentationFormat }],\r\n            },\r\n            depthStencil: {\r\n                depthWriteEnabled: true,\r\n                depthCompare: 'less-equal',\r\n                format: 'depth24plus',\r\n            },\r\n            multisample: {\r\n                count: 4,\r\n            }\r\n        };\r\n        this.skyBoxRenderPipeline = this.device.createRenderPipeline(skyboxRenderPipelineDescriptor);\r\n        const skyboxTexture = this.createTextureFromImages(\r\n            this.device,\r\n            [\r\n                skyboxPath + 'px.jpg',\r\n                skyboxPath + 'nx.jpg',\r\n                skyboxPath + 'py.jpg',\r\n                skyboxPath + 'ny.jpg',\r\n                skyboxPath + 'pz.jpg',\r\n                skyboxPath + 'nz.jpg',\r\n            ]\r\n        );\r\n        const skyboxSampler = this.device.createSampler({\r\n            magFilter: 'linear',\r\n            minFilter: 'linear',\r\n        });\r\n\r\n\r\n        // ========== Objects Bind Group ==========\r\n        this.cameraBuffer = this.device.createBuffer({\r\n            size: 4 * 4 * 4, // 4 x 4 float32 matrix\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\r\n        });\r\n        this.lightBuffer = this.device.createBuffer({\r\n            label: 'Meduspremnik za svjetlo',\r\n            size: 3 * 4 + 4,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\r\n        });\r\n        this.objectsBindGroup = this.device.createBindGroup({\r\n            layout: this.colorRenderPipeline.getBindGroupLayout(0),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: {\r\n                        buffer: this.cameraBuffer,\r\n                        offset: 0,\r\n                        size: 16 * 4,\r\n                    }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: {\r\n                        buffer: this.lightBuffer,\r\n                        offset: 0,\r\n                        size: 3 * 4 + 4,\r\n                    }\r\n                },\r\n            ],\r\n        });\r\n\r\n        // ========== Shape bind group ==========\r\n        this.shapesMatrixBuffer = this.device.createBuffer({\r\n            label: 'Meduspremnik za matrice oblika',\r\n            size: 4 * 16 * 1024,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\r\n        });\r\n        this.shapesColorBuffer = this.device.createBuffer({\r\n            label: 'Meduspremnik za boje oblika',\r\n            size: 4 * 4 * 1024,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\r\n        });\r\n        this.shapesTextureBuffer = this.device.createTexture({\r\n            label: 'Meduspremnik za teksture oblika',\r\n            format: 'rgba8unorm',\r\n            size: [textureAtlas.image.width, textureAtlas.image.height],\r\n            usage: GPUTextureUsage.TEXTURE_BINDING |\r\n                GPUTextureUsage.COPY_DST |\r\n                GPUTextureUsage.RENDER_ATTACHMENT,\r\n        });\r\n        this.device.queue.copyExternalImageToTexture(\r\n            { source: textureAtlas.image },\r\n            { texture: this.shapesTextureBuffer },\r\n            {\r\n                width: textureAtlas.image.width,\r\n                height: textureAtlas.image.height,\r\n            },\r\n        )\r\n        this.debugColorBuffer = this.device.createBuffer({\r\n            label: 'Meduspremnik za boje u debugu',\r\n            size: 4 * 4 * 1024,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\r\n        })\r\n        this.sampler = this.device.createSampler({\r\n            addressModeU: 'repeat',\r\n            addressModeV: 'repeat',\r\n        })\r\n        this.shapesColorBindGroup = this.device.createBindGroup({\r\n            layout: this.colorRenderPipeline.getBindGroupLayout(1),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: {\r\n                        buffer: this.shapesMatrixBuffer,\r\n                        size: 16 * 4,\r\n                    }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: {\r\n                        buffer: this.shapesColorBuffer,\r\n                        size: 4 * 4,\r\n                    }\r\n                }\r\n            ]\r\n        });\r\n        this.shapesTextureBindGroup = this.device.createBindGroup({\r\n            layout: this.textureRenderPipeline.getBindGroupLayout(1),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: {\r\n                        buffer: this.shapesMatrixBuffer,\r\n                        size: 16 * 4,\r\n                    }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: this.sampler,\r\n                }, {\r\n                    binding: 2,\r\n                    resource: this.shapesTextureBuffer.createView(),\r\n                },\r\n\r\n            ]\r\n        });\r\n        this.debugBindGroup = this.device.createBindGroup({\r\n            layout: this.debugRenderPipeline.getBindGroupLayout(0),\r\n            entries: [\r\n                { binding: 0, resource:  { buffer: this.cameraBuffer, size: 16 * 4 }},\r\n                { binding: 1, resource: { buffer: this.debugColorBuffer , size: 4 * 4} }\r\n            ]\r\n        })\r\n\r\n        this.skyboxCameraBuffer= this.device.createBuffer({\r\n            size: 4 * 4 * 4, // 4 x 4 float32 matrix\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\r\n        });\r\n\r\n        this.skyboxBindGroup = this.device.createBindGroup({\r\n            label: 'skybox bind group',\r\n            layout: this.skyBoxRenderPipeline.getBindGroupLayout(0),\r\n            entries: [\r\n                { binding: 0, resource: { buffer: this.skyboxCameraBuffer }},\r\n                { binding: 1, resource: skyboxSampler },\r\n                { binding: 2, resource: (await skyboxTexture).createView({dimension: 'cube'})},\r\n            ],\r\n        })\r\n\r\n        // Prepare depth texture\r\n        const depthTexture = this.device.createTexture({\r\n            size: [this.context.getCurrentTexture().width, this.context.getCurrentTexture().height],\r\n            format: 'depth24plus',\r\n            usage: GPUTextureUsage.RENDER_ATTACHMENT,\r\n            sampleCount: 4,\r\n        });\r\n\r\n        // Initialize and set render pass descriptor\r\n        this.renderPassDescriptor = {\r\n            // @ts-ignore\r\n            colorAttachments: [{\r\n                clearValue: [0.2, 0.2, 0.2, 1],\r\n                loadOp: 'clear',\r\n                storeOp: 'store',\r\n            }\r\n            ],\r\n            depthStencilAttachment: {\r\n                view: depthTexture.createView(),\r\n                depthClearValue: 1.0,\r\n                depthLoadOp: 'clear',\r\n                depthStoreOp: 'discard',\r\n            }\r\n        }\r\n    }\r\n\r\n    private copySourcesToTexture(device: GPUDevice, texture: GPUTexture, sources: ImageBitmap[]) {\r\n        sources.forEach((source, layer) => {\r\n            device.queue.copyExternalImageToTexture(\r\n                { source },\r\n                {texture, origin: [0, 0, layer] },\r\n                { width: source.width, height: source.height },\r\n            );\r\n        });\r\n    }\r\n\r\n    private createTextureFromSources(device: GPUDevice, sources: ImageBitmap[]) {\r\n        const source = sources[0];\r\n        const texture = device.createTexture({\r\n            format: 'rgba8unorm',\r\n            size: [source.width, source.height, sources.length],\r\n            usage: GPUTextureUsage.TEXTURE_BINDING |\r\n                GPUTextureUsage.COPY_DST |\r\n                GPUTextureUsage.RENDER_ATTACHMENT,\r\n        });\r\n        this.copySourcesToTexture(device, texture, sources);\r\n        return texture;\r\n    }\r\n\r\n    private async loadImageBitmap(url: string) {\r\n        const res = await fetch(url);\r\n        const blob = await res.blob();\r\n        return await createImageBitmap(blob);\r\n    }\r\n\r\n    private async createTextureFromImages(device: GPUDevice, urls: string[]) {\r\n        const images = await Promise.all(urls.map(this.loadImageBitmap));\r\n        return this.createTextureFromSources(device, images);\r\n    }\r\n\r\n    public render(scene: Scene) {\r\n        const canvasTexture = this.context.getCurrentTexture();\r\n        if (!this.multisamlpeTexture ||\r\n            this.multisamlpeTexture.width !== canvasTexture.width ||\r\n            this.multisamlpeTexture.height !== canvasTexture.height) {\r\n            if (this.multisamlpeTexture) {\r\n                this.multisamlpeTexture.destroy();\r\n            }\r\n            this.multisamlpeTexture = this.device.createTexture({\r\n                format: canvasTexture.format,\r\n                usage: GPUTextureUsage.RENDER_ATTACHMENT,\r\n                size: [canvasTexture.width, canvasTexture.height],\r\n                sampleCount: 4,\r\n            })\r\n        }\r\n\r\n        const encoder = this.device.createCommandEncoder({ label: 'Default encoder' });\r\n        (this.renderPassDescriptor.colorAttachments as GPURenderPassColorAttachment[])[0].view = this.multisamlpeTexture.createView();\r\n        (this.renderPassDescriptor.colorAttachments as GPURenderPassColorAttachment[])[0].resolveTarget = canvasTexture.createView();\r\n\r\n        const renderPass = encoder.beginRenderPass(this.renderPassDescriptor);\r\n\r\n        let cameraData = scene.camera.getData();\r\n        let projCamMatrix = mat4.multiply(cameraData.projection, cameraData.camera);\r\n        this.device.queue.writeBuffer(this.cameraBuffer, 0, projCamMatrix);\r\n        this.device.queue.writeBuffer(this.lightBuffer, 0, scene.light.getData());\r\n\r\n        scene.vectors.forEach((vec, idx) => {\r\n            renderPass.setBindGroup(0, this.debugBindGroup, [idx * 256]);\r\n            renderPass.setPipeline(this.debugRenderPipeline);\r\n            let pos = vec.getData();\r\n            const vertexBuffer = this.device.createBuffer({\r\n                label: 'Vertex buffer for debugging',\r\n                size: pos.data.byteLength,\r\n                usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\r\n            });\r\n            this.device.queue.writeBuffer(vertexBuffer, 0, pos.data);\r\n            this.device.queue.writeBuffer(this.debugColorBuffer, idx * 256, pos.color);\r\n            renderPass.setVertexBuffer(0, vertexBuffer);\r\n            renderPass.draw(2);\r\n        });\r\n\r\n        renderPass.setBindGroup(0, this.objectsBindGroup);\r\n\r\n        let offset = 0;\r\n        scene.shapes.forEach((shape) => {\r\n            let renderData = shape.getData();\r\n            // If image is not set, render with color\r\n            if (!renderData.containsTexture) {\r\n                renderPass.setPipeline(this.colorRenderPipeline);\r\n                renderPass.setBindGroup(1, this.shapesColorBindGroup, [offset * 256, offset * 256]);\r\n                this.device.queue.writeBuffer(this.shapesMatrixBuffer, offset * 256, renderData.matrix);\r\n                this.device.queue.writeBuffer(this.shapesColorBuffer, offset * 256, renderData.color);\r\n            }\r\n            else {\r\n                renderPass.setPipeline(this.textureRenderPipeline);\r\n                renderPass.setBindGroup(1, this.shapesTextureBindGroup, [offset * 256]);\r\n                this.device.queue.writeBuffer(this.shapesMatrixBuffer, offset * 256, renderData.matrix);\r\n            }\r\n\r\n            const vertexBuffer = this.device.createBuffer({\r\n                label: `Vertex buffer for ${renderData.name}`,\r\n                size: renderData.vertices.byteLength * 4,\r\n                usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\r\n            });\r\n            this.device.queue.writeBuffer(vertexBuffer, 0, renderData.vertices);\r\n            renderPass.setVertexBuffer(0, vertexBuffer);\r\n\r\n            renderPass.draw(renderData.numberVertices);\r\n\r\n            offset += 1;\r\n        });\r\n\r\n        let sCameraData = new Float32Array(cameraData.camera);\r\n        sCameraData.set([0, 0, 0], 12);\r\n        let proj = mat4.multiply(cameraData.projection, sCameraData);\r\n        this.device.queue.writeBuffer(this.skyboxCameraBuffer, 0, proj);\r\n        renderPass.setPipeline(this.skyBoxRenderPipeline);\r\n        renderPass.setBindGroup(0, this.skyboxBindGroup);\r\n        renderPass.draw(3);\r\n\r\n        renderPass.end();\r\n\r\n        const commandBuffer = encoder.finish();\r\n        this.device.queue.submit([commandBuffer]);\r\n    }\r\n};\r\n","import { Camera } from \"./objects/camera\";\r\nimport { Light } from \"./objects/light\";\r\n// import { Object } from \"./Objects/object\";\r\nimport { Shape } from \"./objects/shapes/shape\";\r\nimport { Vector } from \"./objects/vector\";\r\n\r\nexport class Scene {\r\n    public shapes: Array<Shape>;\r\n    public vectors: Array<Vector>;\r\n    public light!: Light;\r\n    public camera!: Camera;\r\n    \r\n    public constructor() {\r\n        this.shapes = new Array<Shape>();\r\n        this.vectors = new Array<Vector>();\r\n    }\r\n\r\n    public addShapes(...shapes: Shape[]) {\r\n        for (let shape of shapes) {\r\n            if (this.shapes.includes(shape)) continue;\r\n            this.shapes.push(shape);\r\n        }\r\n    }\r\n\r\n    public removeShapes(...shapes: Shape[]) {\r\n        for (let shape of shapes) {\r\n            this.shapes = this.shapes.splice(this.shapes.indexOf(shape));\r\n        }\r\n    }\r\n\r\n    public setLight(light: Light) {\r\n        this.light = light;\r\n    }\r\n\r\n    public setCamera(camera: Camera) {\r\n        this.camera = camera;\r\n    }\r\n}","export class TextureAtlas {\r\n    image!: ImageBitmap;\r\n    rowElements!: number;\r\n    colElements!: number;\r\n\r\n    async loadImage(src: string, rowElements: number, colElements: number) {\r\n        this.image = await this.loadImageBitmap(src);\r\n        this.rowElements = rowElements;\r\n        this.colElements = colElements;\r\n    }\r\n\r\n    private async loadImageBitmap(url: string) {\r\n        const res = await fetch(url);\r\n        const blob = await res.blob();\r\n        return await createImageBitmap(blob, { colorSpaceConversion: 'none' });\r\n    }\r\n}","export default \"struct Camera {\\r\\n    matrix: mat4x4f,\\r\\n};\\r\\n\\r\\nstruct VertexOutput {\\r\\n    @builtin(position) position: vec4f,\\r\\n};\\r\\n\\r\\n@group(0) @binding(0) var<uniform> camera: Camera;\\r\\n@group(0) @binding(1) var<uniform> color: vec3f;\\r\\n\\r\\n@vertex\\r\\nfn vert(\\r\\n    @location(0) position: vec4f,\\r\\n) -> VertexOutput {\\r\\n    var vsOut: VertexOutput;\\r\\n    vsOut.position = camera.matrix * position;\\r\\n    return vsOut;\\r\\n}\\r\\n\\r\\n@fragment\\r\\nfn frag() -> @location(0) vec4f {\\r\\n    return vec4f(color.rgb, 1);\\r\\n}\\r\\n\"","export default \"struct Camera {\\r\\n    matrix: mat4x4f,\\r\\n};\\r\\n\\r\\nstruct Light {\\r\\n    direction: vec3f,\\r\\n}\\r\\n\\r\\nstruct VertexOutput {\\r\\n    @builtin(position) position: vec4f,\\r\\n    @location(0) normal: vec3f,\\r\\n    @location(1) texcoord: vec2f,\\r\\n};\\r\\n\\r\\n// Bind group for world\\r\\n@group(0) @binding(0) var<uniform> camera: Camera;\\r\\n@group(0) @binding(1) var<uniform> light: Light;\\r\\n\\r\\n// Bind group for objects\\r\\n@group(1) @binding(0) var<uniform> objTran: mat4x4f;\\r\\n@group(1) @binding(1) var<uniform> color: vec4f;\\r\\n\\r\\n@vertex\\r\\nfn vert(\\r\\n    @location(0) position: vec4f,\\r\\n    @location(1) normal: vec3f,\\r\\n    @location(2) texcoord: vec2f,\\r\\n    @builtin(vertex_index) vertIndex: u32\\r\\n) -> VertexOutput {\\r\\n    var vsOut: VertexOutput;\\r\\n    vsOut.position = camera.matrix * objTran * position;\\r\\n    vsOut.normal = (objTran * vec4f(normal, 0)).xyz;\\r\\n    vsOut.texcoord = texcoord;\\r\\n    return vsOut;\\r\\n}\\r\\n\\r\\n@fragment\\r\\nfn frag(vsOut: VertexOutput) -> @location(0) vec4f {\\r\\n    let normal = normalize(vsOut.normal);\\r\\n    let lgh = max(dot(normal, -light.direction), 0.25);\\r\\n    let col = color.rgb * lgh; // Multiply only color (not alpha)\\r\\n    // let col = color.rgb; // Multiply only color (not alpha)\\r\\n    return vec4f(col, color.a);\\r\\n}\\r\\n\"","export default \"struct Camera {\\r\\n    matrix: mat4x4f,\\r\\n};\\r\\n\\r\\nstruct Light {\\r\\n    direction: vec3f,\\r\\n}\\r\\n\\r\\nstruct VertexOutput {\\r\\n    @builtin(position) position: vec4f,\\r\\n    @location(0) normal: vec3f,\\r\\n    @location(1) texcoord: vec2f,\\r\\n};\\r\\n\\r\\n@group(0) @binding(0) var<uniform> camera: Camera;\\r\\n@group(0) @binding(1) var<uniform> light: Light;\\r\\n\\r\\n@group(1) @binding(0) var<uniform> objectTransform: mat4x4f;\\r\\n@group(1) @binding(1) var linSampler: sampler;\\r\\n@group(1) @binding(2) var tex: texture_2d<f32>;\\r\\n// @group(1) @binding(3) var<uniform> textureElements: vec2f;\\r\\n\\r\\n@vertex\\r\\nfn vert(\\r\\n    @location(0) position: vec4f,\\r\\n    @location(1) normal: vec3f,\\r\\n    @location(2) texcoord: vec2f,\\r\\n) -> VertexOutput {\\r\\n    var vsOut: VertexOutput;\\r\\n    vsOut.position = camera.matrix * objectTransform * position;\\r\\n    vsOut.normal = (objectTransform * vec4f(normal, 0)).xyz;\\r\\n    vsOut.texcoord = texcoord;\\r\\n    return vsOut;\\r\\n}\\r\\n\\r\\n\\r\\n@fragment\\r\\nfn frag(vsOut: VertexOutput) -> @location(0) vec4f {\\r\\n    let normal = normalize(vsOut.normal);\\r\\n    let texcolor = textureSample(tex, linSampler, vsOut.texcoord);\\r\\n    let lgh = max(dot(normal, -light.direction), 0.25);\\r\\n    let finalcolor = texcolor.rgb * lgh;\\r\\n    return vec4f(finalcolor, texcolor.a);\\r\\n}\"","export default \"// struct Uniforms {\\r\\n//   viewDirectionProjectionInverse: mat4x4f,\\r\\n// };\\r\\n \\r\\n// struct VSOutput {\\r\\n//   @builtin(position) position: vec4f,\\r\\n//   @location(0) pos: vec4f,\\r\\n// };\\r\\n \\r\\n// @group(0) @binding(0) var<uniform> uni: Uniforms;\\r\\n// @group(0) @binding(1) var ourSampler: sampler;\\r\\n// @group(0) @binding(2) var ourTexture: texture_cube<f32>;\\r\\n \\r\\n// @vertex fn vs(@builtin(vertex_index) vNdx: u32) -> VSOutput {\\r\\n//   let pos = array(\\r\\n//     vec2f(-1, 3),\\r\\n//     vec2f(-1,-1),\\r\\n//     vec2f( 3,-1),\\r\\n//   );\\r\\n//   var vsOut: VSOutput;\\r\\n//   vsOut.position = vec4f(pos[vNdx], 1, 1);\\r\\n//   vsOut.pos = vsOut.position;\\r\\n//   return vsOut;\\r\\n// }\\r\\n\\r\\n// @fragment fn fs(vsOut: VSOutput) -> @location(0) vec4f {\\r\\n//   let t = uni.viewDirectionProjectionInverse * vsOut.pos;\\r\\n//   return textureSample(ourTexture, ourSampler, normalize(t.xyz / t.w) * vec3f(1, 1, -1));\\r\\n// }\\r\\nstruct Uniforms {\\r\\n  viewDirectionProjectionInverse: mat4x4f,\\r\\n};\\r\\nstruct VSOutput {\\r\\n  @builtin(position) position: vec4f,\\r\\n  @location(0) ndc: vec2f, // Normalized Device Coordinates (range -1 to 1)\\r\\n};\\r\\n@group(0) @binding(0) var<uniform> uni: Uniforms;\\r\\n@group(0) @binding(1) var ourSampler: sampler;\\r\\n@group(0) @binding(2) var ourTexture: texture_cube<f32>;\\r\\n\\r\\n@vertex fn vs(@builtin(vertex_index) vNdx: u32) -> VSOutput {\\r\\n  let pos = array(\\r\\n    vec2f(-1.0,  3.0),\\r\\n    vec2f(-1.0, -1.0),\\r\\n    vec2f( 3.0, -1.0),\\r\\n  );\\r\\n\\r\\n  let ndc = array(\\r\\n    vec2f(-1.0,  3.0),\\r\\n    vec2f(-1.0, -1.0),\\r\\n    vec2f( 3.0, -1.0),\\r\\n  );\\r\\n\\r\\n  var out: VSOutput;\\r\\n  out.position = vec4f(pos[vNdx], 1.0, 1.0);\\r\\n  out.ndc = ndc[vNdx];\\r\\n  return out;\\r\\n}\\r\\n@fragment fn fs(vsOut: VSOutput) -> @location(0) vec4f {\\r\\n  let clip = vec4f(vsOut.ndc.xy, 1.0, 1.0);\\r\\n  let worldDir = (uni.viewDirectionProjectionInverse * clip).xyz;\\r\\n  return textureSample(ourTexture, ourSampler, worldDir);\\r\\n}\\r\\n\"","/* wgpu-matrix@3.3.0, license MIT */\nfunction wrapConstructor(OriginalConstructor, modifier) {\n    return class extends OriginalConstructor {\n        constructor(...args) {\n            super(...args);\n            modifier(this);\n        }\n    }; // Type assertion is necessary here\n}\nconst ZeroArray = wrapConstructor((Array), a => a.fill(0));\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nlet EPSILON = 0.000001;\n/**\n * Set the value for EPSILON for various checks\n * @param v - Value to use for EPSILON.\n * @returns previous value of EPSILON;\n */\nfunction setEpsilon(v) {\n    const old = EPSILON;\n    EPSILON = v;\n    return old;\n}\n/**\n * Convert degrees to radians\n * @param degrees - Angle in degrees\n * @returns angle converted to radians\n */\nfunction degToRad(degrees) {\n    return degrees * Math.PI / 180;\n}\n/**\n * Convert radians to degrees\n * @param radians - Angle in radians\n * @returns angle converted to degrees\n */\nfunction radToDeg(radians) {\n    return radians * 180 / Math.PI;\n}\n/**\n * Lerps between a and b via t\n * @param a - starting value\n * @param b - ending value\n * @param t - value where 0 = a and 1 = b\n * @returns a + (b - a) * t\n */\nfunction lerp(a, b, t) {\n    return a + (b - a) * t;\n}\n/**\n * Compute the opposite of lerp. Given a and b and a value between\n * a and b returns a value between 0 and 1. 0 if a, 1 if b.\n * Note: no clamping is done.\n * @param a - start value\n * @param b - end value\n * @param v - value between a and b\n * @returns (v - a) / (b - a)\n */\nfunction inverseLerp(a, b, v) {\n    const d = b - a;\n    return (Math.abs(b - a) < EPSILON)\n        ? a\n        : (v - a) / d;\n}\n/**\n * Compute the euclidean modulo\n *\n * ```\n * // table for n / 3\n * -5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5   <- n\n * ------------------------------------\n * -2  -1  -0  -2  -1   0,  1,  2,  0,  1,  2   <- n % 3\n *  1   2   0   1   2   0,  1,  2,  0,  1,  2   <- euclideanModule(n, 3)\n * ```\n *\n * @param n - dividend\n * @param m - divisor\n * @returns the euclidean modulo of n / m\n */\nfunction euclideanModulo(n, m) {\n    return ((n % m) + m) % m;\n}\n\nvar utils = {\n    __proto__: null,\n    get EPSILON () { return EPSILON; },\n    degToRad: degToRad,\n    euclideanModulo: euclideanModulo,\n    inverseLerp: inverseLerp,\n    lerp: lerp,\n    radToDeg: radToDeg,\n    setEpsilon: setEpsilon\n};\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates am typed API for Vec3\n */\nfunction getAPIImpl$5(Ctor) {\n    /**\n     * Creates a Vec2; may be called with x, y, z to set initial values.\n     *\n     * Note: Since passing in a raw JavaScript array\n     * is valid in all circumstances, if you want to\n     * force a JavaScript array into a Vec2's specified type\n     * it would be faster to use\n     *\n     * ```\n     * const v = vec2.clone(someJSArray);\n     * ```\n     *\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @returns the created vector\n     */\n    function create(x = 0, y = 0) {\n        const newDst = new Ctor(2);\n        if (x !== undefined) {\n            newDst[0] = x;\n            if (y !== undefined) {\n                newDst[1] = y;\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Creates a Vec2; may be called with x, y, z to set initial values. (same as create)\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @returns the created vector\n     */\n    const fromValues = create;\n    /**\n     * Sets the values of a Vec2\n     * Also see {@link vec2.create} and {@link vec2.copy}\n     *\n     * @param x first value\n     * @param y second value\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector with its elements set.\n     */\n    function set(x, y, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = x;\n        newDst[1] = y;\n        return newDst;\n    }\n    /**\n     * Applies Math.ceil to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the ceil of each element of v.\n     */\n    function ceil(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.ceil(v[0]);\n        newDst[1] = Math.ceil(v[1]);\n        return newDst;\n    }\n    /**\n     * Applies Math.floor to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the floor of each element of v.\n     */\n    function floor(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.floor(v[0]);\n        newDst[1] = Math.floor(v[1]);\n        return newDst;\n    }\n    /**\n     * Applies Math.round to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the round of each element of v.\n     */\n    function round(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.round(v[0]);\n        newDst[1] = Math.round(v[1]);\n        return newDst;\n    }\n    /**\n     * Clamp each element of vector between min and max\n     * @param v - Operand vector.\n     * @param max - Min value, default 0\n     * @param min - Max value, default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that the clamped value of each element of v.\n     */\n    function clamp(v, min = 0, max = 1, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.min(max, Math.max(min, v[0]));\n        newDst[1] = Math.min(max, Math.max(min, v[1]));\n        return newDst;\n    }\n    /**\n     * Adds two vectors; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a and b.\n     */\n    function add(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] + b[0];\n        newDst[1] = a[1] + b[1];\n        return newDst;\n    }\n    /**\n     * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param scale - Amount to scale b\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a + b * scale.\n     */\n    function addScaled(a, b, scale, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] + b[0] * scale;\n        newDst[1] = a[1] + b[1] * scale;\n        return newDst;\n    }\n    /**\n     * Returns the angle in radians between two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns The angle in radians between the 2 vectors.\n     */\n    function angle(a, b) {\n        const ax = a[0];\n        const ay = a[1];\n        const bx = b[0];\n        const by = b[1];\n        const mag1 = Math.sqrt(ax * ax + ay * ay);\n        const mag2 = Math.sqrt(bx * bx + by * by);\n        const mag = mag1 * mag2;\n        const cosine = mag && dot(a, b) / mag;\n        return Math.acos(cosine);\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    function subtract(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] - b[0];\n        newDst[1] = a[1] - b[1];\n        return newDst;\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    const sub = subtract;\n    /**\n     * Check if 2 vectors are approximately equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON;\n    }\n    /**\n     * Check if 2 vectors are exactly equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] && a[1] === b[1];\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficient.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The linear interpolated result.\n     */\n    function lerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] + t * (b[0] - a[0]);\n        newDst[1] = a[1] + t * (b[1] - a[1]);\n        return newDst;\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient vector t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficients vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns the linear interpolated result.\n     */\n    function lerpV(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] + t[0] * (b[0] - a[0]);\n        newDst[1] = a[1] + t[1] * (b[1] - a[1]);\n        return newDst;\n    }\n    /**\n     * Return max values of two vectors.\n     * Given vectors a and b returns\n     * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The max components vector.\n     */\n    function max(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.max(a[0], b[0]);\n        newDst[1] = Math.max(a[1], b[1]);\n        return newDst;\n    }\n    /**\n     * Return min values of two vectors.\n     * Given vectors a and b returns\n     * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The min components vector.\n     */\n    function min(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.min(a[0], b[0]);\n        newDst[1] = Math.min(a[1], b[1]);\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function mulScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = v[0] * k;\n        newDst[1] = v[1] * k;\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar. (same as mulScalar)\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    const scale = mulScalar;\n    /**\n     * Divides a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function divScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = v[0] / k;\n        newDst[1] = v[1] / k;\n        return newDst;\n    }\n    /**\n     * Inverse a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    function inverse(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = 1 / v[0];\n        newDst[1] = 1 / v[1];\n        return newDst;\n    }\n    /**\n     * Invert a vector. (same as inverse)\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    const invert = inverse;\n    /**\n     * Computes the cross product of two vectors; assumes both vectors have\n     * three entries.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of a cross b.\n     */\n    function cross(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const z = a[0] * b[1] - a[1] * b[0];\n        newDst[0] = 0;\n        newDst[1] = 0;\n        newDst[2] = z;\n        return newDst;\n    }\n    /**\n     * Computes the dot product of two vectors; assumes both vectors have\n     * three entries.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns dot product\n     */\n    function dot(a, b) {\n        return a[0] * b[0] + a[1] * b[1];\n    }\n    /**\n     * Computes the length of vector\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    function length(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        return Math.sqrt(v0 * v0 + v1 * v1);\n    }\n    /**\n     * Computes the length of vector (same as length)\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    const len = length;\n    /**\n     * Computes the square of the length of vector\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    function lengthSq(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        return v0 * v0 + v1 * v1;\n    }\n    /**\n     * Computes the square of the length of vector (same as lengthSq)\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    const lenSq = lengthSq;\n    /**\n     * Computes the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    function distance(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n    /**\n     * Computes the distance between 2 points (same as distance)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    const dist = distance;\n    /**\n     * Computes the square of the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    function distanceSq(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        return dx * dx + dy * dy;\n    }\n    /**\n     * Computes the square of the distance between 2 points (same as distanceSq)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    const distSq = distanceSq;\n    /**\n     * Divides a vector by its Euclidean length and returns the quotient.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The normalized vector.\n     */\n    function normalize(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        const v0 = v[0];\n        const v1 = v[1];\n        const len = Math.sqrt(v0 * v0 + v1 * v1);\n        if (len > 0.00001) {\n            newDst[0] = v0 / len;\n            newDst[1] = v1 / len;\n        }\n        else {\n            newDst[0] = 0;\n            newDst[1] = 0;\n        }\n        return newDst;\n    }\n    /**\n     * Negates a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns -v.\n     */\n    function negate(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = -v[0];\n        newDst[1] = -v[1];\n        return newDst;\n    }\n    /**\n     * Copies a vector. (same as {@link vec2.clone})\n     * Also see {@link vec2.create} and {@link vec2.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    function copy(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = v[0];\n        newDst[1] = v[1];\n        return newDst;\n    }\n    /**\n     * Clones a vector. (same as {@link vec2.copy})\n     * Also see {@link vec2.create} and {@link vec2.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    const clone = copy;\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] * b[0];\n        newDst[1] = a[1] * b[1];\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as mul)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    function divide(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] / b[0];\n        newDst[1] = a[1] / b[1];\n        return newDst;\n    }\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as divide)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    const div = divide;\n    /**\n     * Creates a random unit vector * scale\n     * @param scale - Default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The random vector.\n     */\n    function random(scale = 1, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        const angle = Math.random() * 2 * Math.PI;\n        newDst[0] = Math.cos(angle) * scale;\n        newDst[1] = Math.sin(angle) * scale;\n        return newDst;\n    }\n    /**\n     * Zero's a vector\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The zeroed vector.\n     */\n    function zero(dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = 0;\n        newDst[1] = 0;\n        return newDst;\n    }\n    /**\n     * transform Vec2 by 4x4 matrix\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional Vec2 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat4(v, m, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        const x = v[0];\n        const y = v[1];\n        newDst[0] = x * m[0] + y * m[4] + m[12];\n        newDst[1] = x * m[1] + y * m[5] + m[13];\n        return newDst;\n    }\n    /**\n     * Transforms vec4 by 3x3 matrix\n     *\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional Vec2 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat3(v, m, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        const x = v[0];\n        const y = v[1];\n        newDst[0] = m[0] * x + m[4] * y + m[8];\n        newDst[1] = m[1] * x + m[5] * y + m[9];\n        return newDst;\n    }\n    /**\n     * Rotate a 2D vector\n     *\n     * @param a The vec2 point to rotate\n     * @param b The origin of the rotation\n     * @param rad The angle of rotation in radians\n     * @returns the rotated vector\n     */\n    function rotate(a, b, rad, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        // Translate point to the origin\n        const p0 = a[0] - b[0];\n        const p1 = a[1] - b[1];\n        const sinC = Math.sin(rad);\n        const cosC = Math.cos(rad);\n        //perform rotation and translate to correct position\n        newDst[0] = p0 * cosC - p1 * sinC + b[0];\n        newDst[1] = p0 * sinC + p1 * cosC + b[1];\n        return newDst;\n    }\n    /**\n     * Treat a 2D vector as a direction and set it's length\n     *\n     * @param a The vec2 to lengthen\n     * @param len The length of the resulting vector\n     * @returns The lengthened vector\n     */\n    function setLength(a, len, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        normalize(a, newDst);\n        return mulScalar(newDst, len, newDst);\n    }\n    /**\n     * Ensure a vector is not longer than a max length\n     *\n     * @param a The vec2 to limit\n     * @param maxLen The longest length of the resulting vector\n     * @returns The vector, shortened to maxLen if it's too long\n     */\n    function truncate(a, maxLen, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        if (length(a) > maxLen) {\n            return setLength(a, maxLen, newDst);\n        }\n        return copy(a, newDst);\n    }\n    /**\n     * Return the vector exactly between 2 endpoint vectors\n     *\n     * @param a Endpoint 1\n     * @param b Endpoint 2\n     * @returns The vector exactly residing between endpoints 1 and 2\n     */\n    function midpoint(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        return lerp(a, b, 0.5, newDst);\n    }\n    return {\n        create,\n        fromValues,\n        set,\n        ceil,\n        floor,\n        round,\n        clamp,\n        add,\n        addScaled,\n        angle,\n        subtract,\n        sub,\n        equalsApproximately,\n        equals,\n        lerp,\n        lerpV,\n        max,\n        min,\n        mulScalar,\n        scale,\n        divScalar,\n        inverse,\n        invert,\n        cross,\n        dot,\n        length,\n        len,\n        lengthSq,\n        lenSq,\n        distance,\n        dist,\n        distanceSq,\n        distSq,\n        normalize,\n        negate,\n        copy,\n        clone,\n        multiply,\n        mul,\n        divide,\n        div,\n        random,\n        zero,\n        transformMat4,\n        transformMat3,\n        rotate,\n        setLength,\n        truncate,\n        midpoint,\n    };\n}\nconst cache$5 = new Map();\nfunction getAPI$5(Ctor) {\n    let api = cache$5.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$5(Ctor);\n        cache$5.set(Ctor, api);\n    }\n    return api;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates am typed API for Vec3\n * */\nfunction getAPIImpl$4(Ctor) {\n    /**\n     * Creates a vec3; may be called with x, y, z to set initial values.\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @returns the created vector\n     */\n    function create(x, y, z) {\n        const newDst = new Ctor(3);\n        if (x !== undefined) {\n            newDst[0] = x;\n            if (y !== undefined) {\n                newDst[1] = y;\n                if (z !== undefined) {\n                    newDst[2] = z;\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Creates a vec3; may be called with x, y, z to set initial values. (same as create)\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @returns the created vector\n     */\n    const fromValues = create;\n    /**\n     * Sets the values of a Vec3\n     * Also see {@link vec3.create} and {@link vec3.copy}\n     *\n     * @param x first value\n     * @param y second value\n     * @param z third value\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector with its elements set.\n     */\n    function set(x, y, z, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = x;\n        newDst[1] = y;\n        newDst[2] = z;\n        return newDst;\n    }\n    /**\n     * Applies Math.ceil to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the ceil of each element of v.\n     */\n    function ceil(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.ceil(v[0]);\n        newDst[1] = Math.ceil(v[1]);\n        newDst[2] = Math.ceil(v[2]);\n        return newDst;\n    }\n    /**\n     * Applies Math.floor to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the floor of each element of v.\n     */\n    function floor(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.floor(v[0]);\n        newDst[1] = Math.floor(v[1]);\n        newDst[2] = Math.floor(v[2]);\n        return newDst;\n    }\n    /**\n     * Applies Math.round to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the round of each element of v.\n     */\n    function round(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.round(v[0]);\n        newDst[1] = Math.round(v[1]);\n        newDst[2] = Math.round(v[2]);\n        return newDst;\n    }\n    /**\n     * Clamp each element of vector between min and max\n     * @param v - Operand vector.\n     * @param max - Min value, default 0\n     * @param min - Max value, default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that the clamped value of each element of v.\n     */\n    function clamp(v, min = 0, max = 1, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.min(max, Math.max(min, v[0]));\n        newDst[1] = Math.min(max, Math.max(min, v[1]));\n        newDst[2] = Math.min(max, Math.max(min, v[2]));\n        return newDst;\n    }\n    /**\n     * Adds two vectors; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a and b.\n     */\n    function add(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] + b[0];\n        newDst[1] = a[1] + b[1];\n        newDst[2] = a[2] + b[2];\n        return newDst;\n    }\n    /**\n     * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param scale - Amount to scale b\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a + b * scale.\n     */\n    function addScaled(a, b, scale, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] + b[0] * scale;\n        newDst[1] = a[1] + b[1] * scale;\n        newDst[2] = a[2] + b[2] * scale;\n        return newDst;\n    }\n    /**\n     * Returns the angle in radians between two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns The angle in radians between the 2 vectors.\n     */\n    function angle(a, b) {\n        const ax = a[0];\n        const ay = a[1];\n        const az = a[2];\n        const bx = b[0];\n        const by = b[1];\n        const bz = b[2];\n        const mag1 = Math.sqrt(ax * ax + ay * ay + az * az);\n        const mag2 = Math.sqrt(bx * bx + by * by + bz * bz);\n        const mag = mag1 * mag2;\n        const cosine = mag && dot(a, b) / mag;\n        return Math.acos(cosine);\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    function subtract(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] - b[0];\n        newDst[1] = a[1] - b[1];\n        newDst[2] = a[2] - b[2];\n        return newDst;\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    const sub = subtract;\n    /**\n     * Check if 2 vectors are approximately equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON;\n    }\n    /**\n     * Check if 2 vectors are exactly equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficient.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The linear interpolated result.\n     */\n    function lerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] + t * (b[0] - a[0]);\n        newDst[1] = a[1] + t * (b[1] - a[1]);\n        newDst[2] = a[2] + t * (b[2] - a[2]);\n        return newDst;\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient vector t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficients vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns the linear interpolated result.\n     */\n    function lerpV(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] + t[0] * (b[0] - a[0]);\n        newDst[1] = a[1] + t[1] * (b[1] - a[1]);\n        newDst[2] = a[2] + t[2] * (b[2] - a[2]);\n        return newDst;\n    }\n    /**\n     * Return max values of two vectors.\n     * Given vectors a and b returns\n     * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The max components vector.\n     */\n    function max(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.max(a[0], b[0]);\n        newDst[1] = Math.max(a[1], b[1]);\n        newDst[2] = Math.max(a[2], b[2]);\n        return newDst;\n    }\n    /**\n     * Return min values of two vectors.\n     * Given vectors a and b returns\n     * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The min components vector.\n     */\n    function min(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.min(a[0], b[0]);\n        newDst[1] = Math.min(a[1], b[1]);\n        newDst[2] = Math.min(a[2], b[2]);\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function mulScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = v[0] * k;\n        newDst[1] = v[1] * k;\n        newDst[2] = v[2] * k;\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar. (same as mulScalar)\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    const scale = mulScalar;\n    /**\n     * Divides a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function divScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = v[0] / k;\n        newDst[1] = v[1] / k;\n        newDst[2] = v[2] / k;\n        return newDst;\n    }\n    /**\n     * Inverse a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    function inverse(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = 1 / v[0];\n        newDst[1] = 1 / v[1];\n        newDst[2] = 1 / v[2];\n        return newDst;\n    }\n    /**\n     * Invert a vector. (same as inverse)\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    const invert = inverse;\n    /**\n     * Computes the cross product of two vectors; assumes both vectors have\n     * three entries.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of a cross b.\n     */\n    function cross(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const t1 = a[2] * b[0] - a[0] * b[2];\n        const t2 = a[0] * b[1] - a[1] * b[0];\n        newDst[0] = a[1] * b[2] - a[2] * b[1];\n        newDst[1] = t1;\n        newDst[2] = t2;\n        return newDst;\n    }\n    /**\n     * Computes the dot product of two vectors; assumes both vectors have\n     * three entries.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns dot product\n     */\n    function dot(a, b) {\n        return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);\n    }\n    /**\n     * Computes the length of vector\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    function length(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2);\n    }\n    /**\n     * Computes the length of vector (same as length)\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    const len = length;\n    /**\n     * Computes the square of the length of vector\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    function lengthSq(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        return v0 * v0 + v1 * v1 + v2 * v2;\n    }\n    /**\n     * Computes the square of the length of vector (same as lengthSq)\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    const lenSq = lengthSq;\n    /**\n     * Computes the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    function distance(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        const dz = a[2] - b[2];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\n    }\n    /**\n     * Computes the distance between 2 points (same as distance)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    const dist = distance;\n    /**\n     * Computes the square of the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    function distanceSq(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        const dz = a[2] - b[2];\n        return dx * dx + dy * dy + dz * dz;\n    }\n    /**\n     * Computes the square of the distance between 2 points (same as distanceSq)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    const distSq = distanceSq;\n    /**\n     * Divides a vector by its Euclidean length and returns the quotient.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The normalized vector.\n     */\n    function normalize(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2);\n        if (len > 0.00001) {\n            newDst[0] = v0 / len;\n            newDst[1] = v1 / len;\n            newDst[2] = v2 / len;\n        }\n        else {\n            newDst[0] = 0;\n            newDst[1] = 0;\n            newDst[2] = 0;\n        }\n        return newDst;\n    }\n    /**\n     * Negates a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns -v.\n     */\n    function negate(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = -v[0];\n        newDst[1] = -v[1];\n        newDst[2] = -v[2];\n        return newDst;\n    }\n    /**\n     * Copies a vector. (same as {@link vec3.clone})\n     * Also see {@link vec3.create} and {@link vec3.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    function copy(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = v[0];\n        newDst[1] = v[1];\n        newDst[2] = v[2];\n        return newDst;\n    }\n    /**\n     * Clones a vector. (same as {@link vec3.copy})\n     * Also see {@link vec3.create} and {@link vec3.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    const clone = copy;\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] * b[0];\n        newDst[1] = a[1] * b[1];\n        newDst[2] = a[2] * b[2];\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as mul)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    function divide(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] / b[0];\n        newDst[1] = a[1] / b[1];\n        newDst[2] = a[2] / b[2];\n        return newDst;\n    }\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as divide)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    const div = divide;\n    /**\n     * Creates a random vector\n     * @param scale - Default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The random vector.\n     */\n    function random(scale = 1, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const angle = Math.random() * 2 * Math.PI;\n        const z = Math.random() * 2 - 1;\n        const zScale = Math.sqrt(1 - z * z) * scale;\n        newDst[0] = Math.cos(angle) * zScale;\n        newDst[1] = Math.sin(angle) * zScale;\n        newDst[2] = z * scale;\n        return newDst;\n    }\n    /**\n     * Zero's a vector\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The zeroed vector.\n     */\n    function zero(dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = 0;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        return newDst;\n    }\n    /**\n     * transform vec3 by 4x4 matrix\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional vec3 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat4(v, m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const x = v[0];\n        const y = v[1];\n        const z = v[2];\n        const w = (m[3] * x + m[7] * y + m[11] * z + m[15]) || 1;\n        newDst[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n        newDst[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n        newDst[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n        return newDst;\n    }\n    /**\n     * Transform vec3 by upper 3x3 matrix inside 4x4 matrix.\n     * @param v - The direction.\n     * @param m - The matrix.\n     * @param dst - optional vec3 to store result. If not passed a new one is created.\n     * @returns The transformed vector.\n     */\n    function transformMat4Upper3x3(v, m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        newDst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n        newDst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n        newDst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n        return newDst;\n    }\n    /**\n     * Transforms vec3 by 3x3 matrix\n     *\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional vec3 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat3(v, m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const x = v[0];\n        const y = v[1];\n        const z = v[2];\n        newDst[0] = x * m[0] + y * m[4] + z * m[8];\n        newDst[1] = x * m[1] + y * m[5] + z * m[9];\n        newDst[2] = x * m[2] + y * m[6] + z * m[10];\n        return newDst;\n    }\n    /**\n     * Transforms vec3 by Quaternion\n     * @param v - the vector to transform\n     * @param q - the quaternion to transform by\n     * @param dst - optional vec3 to store result. If not passed a new one is created.\n     * @returns the transformed\n     */\n    function transformQuat(v, q, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const w2 = q[3] * 2;\n        const x = v[0];\n        const y = v[1];\n        const z = v[2];\n        const uvX = qy * z - qz * y;\n        const uvY = qz * x - qx * z;\n        const uvZ = qx * y - qy * x;\n        newDst[0] = x + uvX * w2 + (qy * uvZ - qz * uvY) * 2;\n        newDst[1] = y + uvY * w2 + (qz * uvX - qx * uvZ) * 2;\n        newDst[2] = z + uvZ * w2 + (qx * uvY - qy * uvX) * 2;\n        return newDst;\n    }\n    /**\n     * Returns the translation component of a 4-by-4 matrix as a vector with 3\n     * entries.\n     * @param m - The matrix.\n     * @param dst - vector to hold result. If not passed a new one is created.\n     * @returns The translation component of m.\n     */\n    function getTranslation(m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = m[12];\n        newDst[1] = m[13];\n        newDst[2] = m[14];\n        return newDst;\n    }\n    /**\n     * Returns an axis of a 4x4 matrix as a vector with 3 entries\n     * @param m - The matrix.\n     * @param axis - The axis 0 = x, 1 = y, 2 = z;\n     * @returns The axis component of m.\n     */\n    function getAxis(m, axis, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const off = axis * 4;\n        newDst[0] = m[off + 0];\n        newDst[1] = m[off + 1];\n        newDst[2] = m[off + 2];\n        return newDst;\n    }\n    /**\n     * Returns the scaling component of the matrix\n     * @param m - The Matrix\n     * @param dst - The vector to set. If not passed a new one is created.\n     */\n    function getScaling(m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const xx = m[0];\n        const xy = m[1];\n        const xz = m[2];\n        const yx = m[4];\n        const yy = m[5];\n        const yz = m[6];\n        const zx = m[8];\n        const zy = m[9];\n        const zz = m[10];\n        newDst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n        newDst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n        newDst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n        return newDst;\n    }\n    /**\n     * Rotate a 3D vector around the x-axis\n     *\n     * @param {ReadonlyVec3} a The vec3 point to rotate\n     * @param {ReadonlyVec3} b The origin of the rotation\n     * @param {Number} rad The angle of rotation in radians\n     * @param dst - The vector to set. If not passed a new one is created.\n     * @returns the rotated vector\n     */\n    function rotateX(a, b, rad, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const p = [];\n        const r = [];\n        //Translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n        //perform rotation\n        r[0] = p[0];\n        r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n        r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);\n        //translate to correct position\n        newDst[0] = r[0] + b[0];\n        newDst[1] = r[1] + b[1];\n        newDst[2] = r[2] + b[2];\n        return newDst;\n    }\n    /**\n     * Rotate a 3D vector around the y-axis\n     *\n     * @param {ReadonlyVec3} a The vec3 point to rotate\n     * @param {ReadonlyVec3} b The origin of the rotation\n     * @param {Number} rad The angle of rotation in radians\n     * @param dst - The vector to set. If not passed a new one is created.\n     * @returns the rotated vector\n     */\n    function rotateY(a, b, rad, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const p = [];\n        const r = [];\n        // translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n        // perform rotation\n        r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n        r[1] = p[1];\n        r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);\n        // translate to correct position\n        newDst[0] = r[0] + b[0];\n        newDst[1] = r[1] + b[1];\n        newDst[2] = r[2] + b[2];\n        return newDst;\n    }\n    /**\n     * Rotate a 3D vector around the z-axis\n     *\n     * @param {ReadonlyVec3} a The vec3 point to rotate\n     * @param {ReadonlyVec3} b The origin of the rotation\n     * @param {Number} rad The angle of rotation in radians\n     * @param dst - The vector to set. If not passed a new one is created.\n     * @returns {vec3} out\n     */\n    function rotateZ(a, b, rad, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const p = [];\n        const r = [];\n        // translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n        // perform rotation\n        r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n        r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n        r[2] = p[2];\n        // translate to correct position\n        newDst[0] = r[0] + b[0];\n        newDst[1] = r[1] + b[1];\n        newDst[2] = r[2] + b[2];\n        return newDst;\n    }\n    /**\n     * Treat a 3D vector as a direction and set it's length\n     *\n     * @param a The vec3 to lengthen\n     * @param len The length of the resulting vector\n     * @returns The lengthened vector\n     */\n    function setLength(a, len, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        normalize(a, newDst);\n        return mulScalar(newDst, len, newDst);\n    }\n    /**\n     * Ensure a vector is not longer than a max length\n     *\n     * @param a The vec3 to limit\n     * @param maxLen The longest length of the resulting vector\n     * @returns The vector, shortened to maxLen if it's too long\n     */\n    function truncate(a, maxLen, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        if (length(a) > maxLen) {\n            return setLength(a, maxLen, newDst);\n        }\n        return copy(a, newDst);\n    }\n    /**\n     * Return the vector exactly between 2 endpoint vectors\n     *\n     * @param a Endpoint 1\n     * @param b Endpoint 2\n     * @returns The vector exactly residing between endpoints 1 and 2\n     */\n    function midpoint(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        return lerp(a, b, 0.5, newDst);\n    }\n    return {\n        create,\n        fromValues,\n        set,\n        ceil,\n        floor,\n        round,\n        clamp,\n        add,\n        addScaled,\n        angle,\n        subtract,\n        sub,\n        equalsApproximately,\n        equals,\n        lerp,\n        lerpV,\n        max,\n        min,\n        mulScalar,\n        scale,\n        divScalar,\n        inverse,\n        invert,\n        cross,\n        dot,\n        length,\n        len,\n        lengthSq,\n        lenSq,\n        distance,\n        dist,\n        distanceSq,\n        distSq,\n        normalize,\n        negate,\n        copy,\n        clone,\n        multiply,\n        mul,\n        divide,\n        div,\n        random,\n        zero,\n        transformMat4,\n        transformMat4Upper3x3,\n        transformMat3,\n        transformQuat,\n        getTranslation,\n        getAxis,\n        getScaling,\n        rotateX,\n        rotateY,\n        rotateZ,\n        setLength,\n        truncate,\n        midpoint,\n    };\n}\nconst cache$4 = new Map();\nfunction getAPI$4(Ctor) {\n    let api = cache$4.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$4(Ctor);\n        cache$4.set(Ctor, api);\n    }\n    return api;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates a typed API for Mat3\n * */\nfunction getAPIImpl$3(Ctor) {\n    const vec2 = getAPI$5(Ctor);\n    const vec3 = getAPI$4(Ctor);\n    /**\n     * Create a Mat3 from values\n     *\n     * Note: Since passing in a raw JavaScript array\n     * is valid in all circumstances, if you want to\n     * force a JavaScript array into a Mat3's specified type\n     * it would be faster to use\n     *\n     * ```\n     * const m = mat3.clone(someJSArray);\n     * ```\n     *\n     * @param v0 - value for element 0\n     * @param v1 - value for element 1\n     * @param v2 - value for element 2\n     * @param v3 - value for element 3\n     * @param v4 - value for element 4\n     * @param v5 - value for element 5\n     * @param v6 - value for element 6\n     * @param v7 - value for element 7\n     * @param v8 - value for element 8\n     * @returns matrix created from values.\n     */\n    function create(v0, v1, v2, v3, v4, v5, v6, v7, v8) {\n        const newDst = new Ctor(12);\n        // to make the array homogenous\n        newDst[3] = 0;\n        newDst[7] = 0;\n        newDst[11] = 0;\n        if (v0 !== undefined) {\n            newDst[0] = v0;\n            if (v1 !== undefined) {\n                newDst[1] = v1;\n                if (v2 !== undefined) {\n                    newDst[2] = v2;\n                    if (v3 !== undefined) {\n                        newDst[4] = v3;\n                        if (v4 !== undefined) {\n                            newDst[5] = v4;\n                            if (v5 !== undefined) {\n                                newDst[6] = v5;\n                                if (v6 !== undefined) {\n                                    newDst[8] = v6;\n                                    if (v7 !== undefined) {\n                                        newDst[9] = v7;\n                                        if (v8 !== undefined) {\n                                            newDst[10] = v8;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Sets the values of a Mat3\n     * Also see {@link mat3.create} and {@link mat3.copy}\n     *\n     * @param v0 - value for element 0\n     * @param v1 - value for element 1\n     * @param v2 - value for element 2\n     * @param v3 - value for element 3\n     * @param v4 - value for element 4\n     * @param v5 - value for element 5\n     * @param v6 - value for element 6\n     * @param v7 - value for element 7\n     * @param v8 - value for element 8\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat3 set from values.\n     */\n    function set(v0, v1, v2, v3, v4, v5, v6, v7, v8, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = v0;\n        newDst[1] = v1;\n        newDst[2] = v2;\n        newDst[3] = 0;\n        newDst[4] = v3;\n        newDst[5] = v4;\n        newDst[6] = v5;\n        newDst[7] = 0;\n        newDst[8] = v6;\n        newDst[9] = v7;\n        newDst[10] = v8;\n        newDst[11] = 0;\n        return newDst;\n    }\n    /**\n     * Creates a Mat3 from the upper left 3x3 part of a Mat4\n     * @param m4 - source matrix\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat3 made from m4\n     */\n    function fromMat4(m4, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = m4[0];\n        newDst[1] = m4[1];\n        newDst[2] = m4[2];\n        newDst[3] = 0;\n        newDst[4] = m4[4];\n        newDst[5] = m4[5];\n        newDst[6] = m4[6];\n        newDst[7] = 0;\n        newDst[8] = m4[8];\n        newDst[9] = m4[9];\n        newDst[10] = m4[10];\n        newDst[11] = 0;\n        return newDst;\n    }\n    /**\n     * Creates a Mat3 rotation matrix from a quaternion\n     * @param q - quaternion to create matrix from\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat3 made from q\n     */\n    function fromQuat(q, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const x = q[0];\n        const y = q[1];\n        const z = q[2];\n        const w = q[3];\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const yx = y * x2;\n        const yy = y * y2;\n        const zx = z * x2;\n        const zy = z * y2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n        newDst[0] = 1 - yy - zz;\n        newDst[1] = yx + wz;\n        newDst[2] = zx - wy;\n        newDst[3] = 0;\n        newDst[4] = yx - wz;\n        newDst[5] = 1 - xx - zz;\n        newDst[6] = zy + wx;\n        newDst[7] = 0;\n        newDst[8] = zx + wy;\n        newDst[9] = zy - wx;\n        newDst[10] = 1 - xx - yy;\n        newDst[11] = 0;\n        return newDst;\n    }\n    /**\n     * Negates a matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns -m.\n     */\n    function negate(m, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = -m[0];\n        newDst[1] = -m[1];\n        newDst[2] = -m[2];\n        newDst[4] = -m[4];\n        newDst[5] = -m[5];\n        newDst[6] = -m[6];\n        newDst[8] = -m[8];\n        newDst[9] = -m[9];\n        newDst[10] = -m[10];\n        return newDst;\n    }\n    /**\n     * Copies a matrix. (same as {@link mat3.clone})\n     * Also see {@link mat3.create} and {@link mat3.set}\n     * @param m - The matrix.\n     * @param dst - The matrix. If not passed a new one is created.\n     * @returns A copy of m.\n     */\n    function copy(m, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = m[0];\n        newDst[1] = m[1];\n        newDst[2] = m[2];\n        newDst[4] = m[4];\n        newDst[5] = m[5];\n        newDst[6] = m[6];\n        newDst[8] = m[8];\n        newDst[9] = m[9];\n        newDst[10] = m[10];\n        return newDst;\n    }\n    /**\n     * Copies a matrix (same as {@link mat3.copy})\n     * Also see {@link mat3.create} and {@link mat3.set}\n     * @param m - The matrix.\n     * @param dst - The matrix. If not passed a new one is created.\n     * @returns A copy of m.\n     */\n    const clone = copy;\n    /**\n     * Check if 2 matrices are approximately equal\n     * @param a Operand matrix.\n     * @param b Operand matrix.\n     * @returns true if matrices are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON &&\n            Math.abs(a[4] - b[4]) < EPSILON &&\n            Math.abs(a[5] - b[5]) < EPSILON &&\n            Math.abs(a[6] - b[6]) < EPSILON &&\n            Math.abs(a[8] - b[8]) < EPSILON &&\n            Math.abs(a[9] - b[9]) < EPSILON &&\n            Math.abs(a[10] - b[10]) < EPSILON;\n    }\n    /**\n     * Check if 2 matrices are exactly equal\n     * @param a Operand matrix.\n     * @param b Operand matrix.\n     * @returns true if matrices are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] &&\n            a[1] === b[1] &&\n            a[2] === b[2] &&\n            a[4] === b[4] &&\n            a[5] === b[5] &&\n            a[6] === b[6] &&\n            a[8] === b[8] &&\n            a[9] === b[9] &&\n            a[10] === b[10];\n    }\n    /**\n     * Creates a 3-by-3 identity matrix.\n     *\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns A 3-by-3 identity matrix.\n     */\n    function identity(dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Takes the transpose of a matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The transpose of m.\n     */\n    function transpose(m, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        if (newDst === m) {\n            let t;\n            // 0 1 2\n            // 4 5 6\n            // 8 9 10\n            t = m[1];\n            m[1] = m[4];\n            m[4] = t;\n            t = m[2];\n            m[2] = m[8];\n            m[8] = t;\n            t = m[6];\n            m[6] = m[9];\n            m[9] = t;\n            return newDst;\n        }\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        newDst[0] = m00;\n        newDst[1] = m10;\n        newDst[2] = m20;\n        newDst[4] = m01;\n        newDst[5] = m11;\n        newDst[6] = m21;\n        newDst[8] = m02;\n        newDst[9] = m12;\n        newDst[10] = m22;\n        return newDst;\n    }\n    /**\n     * Computes the inverse of a 3-by-3 matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The inverse of m.\n     */\n    function inverse(m, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const b01 = m22 * m11 - m12 * m21;\n        const b11 = -m22 * m10 + m12 * m20;\n        const b21 = m21 * m10 - m11 * m20;\n        const invDet = 1 / (m00 * b01 + m01 * b11 + m02 * b21);\n        newDst[0] = b01 * invDet;\n        newDst[1] = (-m22 * m01 + m02 * m21) * invDet;\n        newDst[2] = (m12 * m01 - m02 * m11) * invDet;\n        newDst[4] = b11 * invDet;\n        newDst[5] = (m22 * m00 - m02 * m20) * invDet;\n        newDst[6] = (-m12 * m00 + m02 * m10) * invDet;\n        newDst[8] = b21 * invDet;\n        newDst[9] = (-m21 * m00 + m01 * m20) * invDet;\n        newDst[10] = (m11 * m00 - m01 * m10) * invDet;\n        return newDst;\n    }\n    /**\n     * Compute the determinant of a matrix\n     * @param m - the matrix\n     * @returns the determinant\n     */\n    function determinant(m) {\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        return m00 * (m11 * m22 - m21 * m12) -\n            m10 * (m01 * m22 - m21 * m02) +\n            m20 * (m01 * m12 - m11 * m02);\n    }\n    /**\n     * Computes the inverse of a 3-by-3 matrix. (same as inverse)\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The inverse of m.\n     */\n    const invert = inverse;\n    /**\n     * Multiplies two 3-by-3 matrices with a on the left and b on the right\n     * @param a - The matrix on the left.\n     * @param b - The matrix on the right.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix product of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const a00 = a[0];\n        const a01 = a[1];\n        const a02 = a[2];\n        const a10 = a[4 + 0];\n        const a11 = a[4 + 1];\n        const a12 = a[4 + 2];\n        const a20 = a[8 + 0];\n        const a21 = a[8 + 1];\n        const a22 = a[8 + 2];\n        const b00 = b[0];\n        const b01 = b[1];\n        const b02 = b[2];\n        const b10 = b[4 + 0];\n        const b11 = b[4 + 1];\n        const b12 = b[4 + 2];\n        const b20 = b[8 + 0];\n        const b21 = b[8 + 1];\n        const b22 = b[8 + 2];\n        newDst[0] = a00 * b00 + a10 * b01 + a20 * b02;\n        newDst[1] = a01 * b00 + a11 * b01 + a21 * b02;\n        newDst[2] = a02 * b00 + a12 * b01 + a22 * b02;\n        newDst[4] = a00 * b10 + a10 * b11 + a20 * b12;\n        newDst[5] = a01 * b10 + a11 * b11 + a21 * b12;\n        newDst[6] = a02 * b10 + a12 * b11 + a22 * b12;\n        newDst[8] = a00 * b20 + a10 * b21 + a20 * b22;\n        newDst[9] = a01 * b20 + a11 * b21 + a21 * b22;\n        newDst[10] = a02 * b20 + a12 * b21 + a22 * b22;\n        return newDst;\n    }\n    /**\n     * Multiplies two 3-by-3 matrices with a on the left and b on the right (same as multiply)\n     * @param a - The matrix on the left.\n     * @param b - The matrix on the right.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix product of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Sets the translation component of a 3-by-3 matrix to the given\n     * vector.\n     * @param a - The matrix.\n     * @param v - The vector.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix with translation set.\n     */\n    function setTranslation(a, v, dst) {\n        const newDst = (dst ?? identity());\n        if (a !== newDst) {\n            newDst[0] = a[0];\n            newDst[1] = a[1];\n            newDst[2] = a[2];\n            newDst[4] = a[4];\n            newDst[5] = a[5];\n            newDst[6] = a[6];\n        }\n        newDst[8] = v[0];\n        newDst[9] = v[1];\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Returns the translation component of a 3-by-3 matrix as a vector with 3\n     * entries.\n     * @param m - The matrix.\n     * @param dst - vector to hold result. If not passed a new one is created.\n     * @returns The translation component of m.\n     */\n    function getTranslation(m, dst) {\n        const newDst = (dst ?? vec2.create());\n        newDst[0] = m[8];\n        newDst[1] = m[9];\n        return newDst;\n    }\n    /**\n     * Returns an axis of a 3x3 matrix as a vector with 2 entries\n     * @param m - The matrix.\n     * @param axis - The axis 0 = x, 1 = y,\n     * @returns The axis component of m.\n     */\n    function getAxis(m, axis, dst) {\n        const newDst = (dst ?? vec2.create());\n        const off = axis * 4;\n        newDst[0] = m[off + 0];\n        newDst[1] = m[off + 1];\n        return newDst;\n    }\n    /**\n     * Sets an axis of a 3x3 matrix as a vector with 2 entries\n     * @param m - The matrix.\n     * @param v - the axis vector\n     * @param axis - The axis  0 = x, 1 = y;\n     * @param dst - The matrix to set. If not passed a new one is created.\n     * @returns The matrix with axis set.\n     */\n    function setAxis(m, v, axis, dst) {\n        const newDst = (dst === m ? m : copy(m, dst));\n        const off = axis * 4;\n        newDst[off + 0] = v[0];\n        newDst[off + 1] = v[1];\n        return newDst;\n    }\n    /**\n     * Returns the \"2d\" scaling component of the matrix\n     * @param m - The Matrix\n     * @param dst - The vector to set. If not passed a new one is created.\n     */\n    function getScaling(m, dst) {\n        const newDst = (dst ?? vec2.create());\n        const xx = m[0];\n        const xy = m[1];\n        const yx = m[4];\n        const yy = m[5];\n        newDst[0] = Math.sqrt(xx * xx + xy * xy);\n        newDst[1] = Math.sqrt(yx * yx + yy * yy);\n        return newDst;\n    }\n    /**\n     * Returns the \"3d\" scaling component of the matrix\n     * @param m - The Matrix\n     * @param dst - The vector to set. If not passed a new one is created.\n     */\n    function get3DScaling(m, dst) {\n        const newDst = (dst ?? vec3.create());\n        const xx = m[0];\n        const xy = m[1];\n        const xz = m[2];\n        const yx = m[4];\n        const yy = m[5];\n        const yz = m[6];\n        const zx = m[8];\n        const zy = m[9];\n        const zz = m[10];\n        newDst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n        newDst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n        newDst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which translates by the given vector v.\n     * @param v - The vector by which to translate.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The translation matrix.\n     */\n    function translation(v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[8] = v[0];\n        newDst[9] = v[1];\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Translates the given 3-by-3 matrix by the given vector v.\n     * @param m - The matrix.\n     * @param v - The vector by which to translate.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The translated matrix.\n     */\n    function translate(m, v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const v0 = v[0];\n        const v1 = v[1];\n        const m00 = m[0];\n        const m01 = m[1];\n        const m02 = m[2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        if (m !== newDst) {\n            newDst[0] = m00;\n            newDst[1] = m01;\n            newDst[2] = m02;\n            newDst[4] = m10;\n            newDst[5] = m11;\n            newDst[6] = m12;\n        }\n        newDst[8] = m00 * v0 + m10 * v1 + m20;\n        newDst[9] = m01 * v0 + m11 * v1 + m21;\n        newDst[10] = m02 * v0 + m12 * v1 + m22;\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which rotates  by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotation(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c;\n        newDst[1] = s;\n        newDst[2] = 0;\n        newDst[4] = -s;\n        newDst[5] = c;\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Rotates the given 3-by-3 matrix  by the given angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotate(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c * m00 + s * m10;\n        newDst[1] = c * m01 + s * m11;\n        newDst[2] = c * m02 + s * m12;\n        newDst[4] = c * m10 - s * m00;\n        newDst[5] = c * m11 - s * m01;\n        newDst[6] = c * m12 - s * m02;\n        if (m !== newDst) {\n            newDst[8] = m[8];\n            newDst[9] = m[9];\n            newDst[10] = m[10];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which rotates around the x-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotationX(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = c;\n        newDst[6] = s;\n        newDst[8] = 0;\n        newDst[9] = -s;\n        newDst[10] = c;\n        return newDst;\n    }\n    /**\n     * Rotates the given 3-by-3 matrix around the x-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotateX(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const m10 = m[4];\n        const m11 = m[5];\n        const m12 = m[6];\n        const m20 = m[8];\n        const m21 = m[9];\n        const m22 = m[10];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[4] = c * m10 + s * m20;\n        newDst[5] = c * m11 + s * m21;\n        newDst[6] = c * m12 + s * m22;\n        newDst[8] = c * m20 - s * m10;\n        newDst[9] = c * m21 - s * m11;\n        newDst[10] = c * m22 - s * m12;\n        if (m !== newDst) {\n            newDst[0] = m[0];\n            newDst[1] = m[1];\n            newDst[2] = m[2];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which rotates around the y-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotationY(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c;\n        newDst[1] = 0;\n        newDst[2] = -s;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[8] = s;\n        newDst[9] = 0;\n        newDst[10] = c;\n        return newDst;\n    }\n    /**\n     * Rotates the given 3-by-3 matrix around the y-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotateY(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c * m00 - s * m20;\n        newDst[1] = c * m01 - s * m21;\n        newDst[2] = c * m02 - s * m22;\n        newDst[8] = c * m20 + s * m00;\n        newDst[9] = c * m21 + s * m01;\n        newDst[10] = c * m22 + s * m02;\n        if (m !== newDst) {\n            newDst[4] = m[4];\n            newDst[5] = m[5];\n            newDst[6] = m[6];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which rotates around the z-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    const rotationZ = rotation;\n    /**\n     * Rotates the given 3-by-3 matrix around the z-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    const rotateZ = rotate;\n    /**\n     * Creates a 3-by-3 matrix which scales in each dimension by an amount given by\n     * the corresponding entry in the given vector; assumes the vector has two\n     * entries.\n     * @param v - A vector of\n     *     2 entries specifying the factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function scaling(v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = v[0];\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = v[1];\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Scales the given 3-by-3 matrix in each dimension by an amount\n     * given by the corresponding entry in the given vector; assumes the vector has\n     * two entries.\n     * @param m - The matrix to be modified.\n     * @param v - A vector of 2 entries specifying the\n     *     factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function scale(m, v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const v0 = v[0];\n        const v1 = v[1];\n        newDst[0] = v0 * m[0 * 4 + 0];\n        newDst[1] = v0 * m[0 * 4 + 1];\n        newDst[2] = v0 * m[0 * 4 + 2];\n        newDst[4] = v1 * m[1 * 4 + 0];\n        newDst[5] = v1 * m[1 * 4 + 1];\n        newDst[6] = v1 * m[1 * 4 + 2];\n        if (m !== newDst) {\n            newDst[8] = m[8];\n            newDst[9] = m[9];\n            newDst[10] = m[10];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which scales in each dimension by an amount given by\n     * the corresponding entry in the given vector; assumes the vector has three\n     * entries.\n     * @param v - A vector of\n     *     3 entries specifying the factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function scaling3D(v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = v[0];\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = v[1];\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = v[2];\n        return newDst;\n    }\n    /**\n     * Scales the given 3-by-3 matrix in each dimension by an amount\n     * given by the corresponding entry in the given vector; assumes the vector has\n     * three entries.\n     * @param m - The matrix to be modified.\n     * @param v - A vector of 3 entries specifying the\n     *     factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function scale3D(m, v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        newDst[0] = v0 * m[0 * 4 + 0];\n        newDst[1] = v0 * m[0 * 4 + 1];\n        newDst[2] = v0 * m[0 * 4 + 2];\n        newDst[4] = v1 * m[1 * 4 + 0];\n        newDst[5] = v1 * m[1 * 4 + 1];\n        newDst[6] = v1 * m[1 * 4 + 2];\n        newDst[8] = v2 * m[2 * 4 + 0];\n        newDst[9] = v2 * m[2 * 4 + 1];\n        newDst[10] = v2 * m[2 * 4 + 2];\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which scales uniformly in the X and Y dimensions\n     * @param s - Amount to scale\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function uniformScaling(s, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = s;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = s;\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Scales the given 3-by-3 matrix in the X and Y dimension by an amount\n     * given.\n     * @param m - The matrix to be modified.\n     * @param s - Amount to scale.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function uniformScale(m, s, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = s * m[0 * 4 + 0];\n        newDst[1] = s * m[0 * 4 + 1];\n        newDst[2] = s * m[0 * 4 + 2];\n        newDst[4] = s * m[1 * 4 + 0];\n        newDst[5] = s * m[1 * 4 + 1];\n        newDst[6] = s * m[1 * 4 + 2];\n        if (m !== newDst) {\n            newDst[8] = m[8];\n            newDst[9] = m[9];\n            newDst[10] = m[10];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which scales uniformly in each dimension\n     * @param s - Amount to scale\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function uniformScaling3D(s, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = s;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = s;\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = s;\n        return newDst;\n    }\n    /**\n     * Scales the given 3-by-3 matrix in each dimension by an amount\n     * given.\n     * @param m - The matrix to be modified.\n     * @param s - Amount to scale.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function uniformScale3D(m, s, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = s * m[0 * 4 + 0];\n        newDst[1] = s * m[0 * 4 + 1];\n        newDst[2] = s * m[0 * 4 + 2];\n        newDst[4] = s * m[1 * 4 + 0];\n        newDst[5] = s * m[1 * 4 + 1];\n        newDst[6] = s * m[1 * 4 + 2];\n        newDst[8] = s * m[2 * 4 + 0];\n        newDst[9] = s * m[2 * 4 + 1];\n        newDst[10] = s * m[2 * 4 + 2];\n        return newDst;\n    }\n    return {\n        clone,\n        create,\n        set,\n        fromMat4,\n        fromQuat,\n        negate,\n        copy,\n        equalsApproximately,\n        equals,\n        identity,\n        transpose,\n        inverse,\n        invert,\n        determinant,\n        mul,\n        multiply,\n        setTranslation,\n        getTranslation,\n        getAxis,\n        setAxis,\n        getScaling,\n        get3DScaling,\n        translation,\n        translate,\n        rotation,\n        rotate,\n        rotationX,\n        rotateX,\n        rotationY,\n        rotateY,\n        rotationZ,\n        rotateZ,\n        scaling,\n        scale,\n        uniformScaling,\n        uniformScale,\n        scaling3D,\n        scale3D,\n        uniformScaling3D,\n        uniformScale3D,\n    };\n}\nconst cache$3 = new Map();\nfunction getAPI$3(Ctor) {\n    let api = cache$3.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$3(Ctor);\n        cache$3.set(Ctor, api);\n    }\n    return api;\n}\n\n/**\n * Generates a typed API for Mat4\n * */\nfunction getAPIImpl$2(Ctor) {\n    const vec3 = getAPI$4(Ctor);\n    /**\n     * 4x4 Matrix math math functions.\n     *\n     * Almost all functions take an optional `newDst` argument. If it is not passed in the\n     * functions will create a new matrix. In other words you can do this\n     *\n     *     const mat = mat4.translation([1, 2, 3]);  // Creates a new translation matrix\n     *\n     * or\n     *\n     *     const mat = mat4.create();\n     *     mat4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n     *\n     * The first style is often easier but depending on where it's used it generates garbage where\n     * as there is almost never allocation with the second style.\n     *\n     * It is always save to pass any matrix as the destination. So for example\n     *\n     *     const mat = mat4.identity();\n     *     const trans = mat4.translation([1, 2, 3]);\n     *     mat4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n     *\n     */\n    /**\n     * Create a Mat4 from values\n     *\n     * Note: Since passing in a raw JavaScript array\n     * is valid in all circumstances, if you want to\n     * force a JavaScript array into a Mat4's specified type\n     * it would be faster to use\n     *\n     * ```\n     * const m = mat4.clone(someJSArray);\n     * ```\n     *\n     * @param v0 - value for element 0\n     * @param v1 - value for element 1\n     * @param v2 - value for element 2\n     * @param v3 - value for element 3\n     * @param v4 - value for element 4\n     * @param v5 - value for element 5\n     * @param v6 - value for element 6\n     * @param v7 - value for element 7\n     * @param v8 - value for element 8\n     * @param v9 - value for element 9\n     * @param v10 - value for element 10\n     * @param v11 - value for element 11\n     * @param v12 - value for element 12\n     * @param v13 - value for element 13\n     * @param v14 - value for element 14\n     * @param v15 - value for element 15\n     * @returns created from values.\n     */\n    function create(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) {\n        const newDst = new Ctor(16);\n        if (v0 !== undefined) {\n            newDst[0] = v0;\n            if (v1 !== undefined) {\n                newDst[1] = v1;\n                if (v2 !== undefined) {\n                    newDst[2] = v2;\n                    if (v3 !== undefined) {\n                        newDst[3] = v3;\n                        if (v4 !== undefined) {\n                            newDst[4] = v4;\n                            if (v5 !== undefined) {\n                                newDst[5] = v5;\n                                if (v6 !== undefined) {\n                                    newDst[6] = v6;\n                                    if (v7 !== undefined) {\n                                        newDst[7] = v7;\n                                        if (v8 !== undefined) {\n                                            newDst[8] = v8;\n                                            if (v9 !== undefined) {\n                                                newDst[9] = v9;\n                                                if (v10 !== undefined) {\n                                                    newDst[10] = v10;\n                                                    if (v11 !== undefined) {\n                                                        newDst[11] = v11;\n                                                        if (v12 !== undefined) {\n                                                            newDst[12] = v12;\n                                                            if (v13 !== undefined) {\n                                                                newDst[13] = v13;\n                                                                if (v14 !== undefined) {\n                                                                    newDst[14] = v14;\n                                                                    if (v15 !== undefined) {\n                                                                        newDst[15] = v15;\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Sets the values of a Mat4\n     * Also see {@link mat4.create} and {@link mat4.copy}\n     *\n     * @param v0 - value for element 0\n     * @param v1 - value for element 1\n     * @param v2 - value for element 2\n     * @param v3 - value for element 3\n     * @param v4 - value for element 4\n     * @param v5 - value for element 5\n     * @param v6 - value for element 6\n     * @param v7 - value for element 7\n     * @param v8 - value for element 8\n     * @param v9 - value for element 9\n     * @param v10 - value for element 10\n     * @param v11 - value for element 11\n     * @param v12 - value for element 12\n     * @param v13 - value for element 13\n     * @param v14 - value for element 14\n     * @param v15 - value for element 15\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat4 created from values.\n     */\n    function set(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = v0;\n        newDst[1] = v1;\n        newDst[2] = v2;\n        newDst[3] = v3;\n        newDst[4] = v4;\n        newDst[5] = v5;\n        newDst[6] = v6;\n        newDst[7] = v7;\n        newDst[8] = v8;\n        newDst[9] = v9;\n        newDst[10] = v10;\n        newDst[11] = v11;\n        newDst[12] = v12;\n        newDst[13] = v13;\n        newDst[14] = v14;\n        newDst[15] = v15;\n        return newDst;\n    }\n    /**\n     * Creates a Mat4 from a Mat3\n     * @param m3 - source matrix\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat4 made from m3\n     */\n    function fromMat3(m3, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = m3[0];\n        newDst[1] = m3[1];\n        newDst[2] = m3[2];\n        newDst[3] = 0;\n        newDst[4] = m3[4];\n        newDst[5] = m3[5];\n        newDst[6] = m3[6];\n        newDst[7] = 0;\n        newDst[8] = m3[8];\n        newDst[9] = m3[9];\n        newDst[10] = m3[10];\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Creates a Mat4 rotation matrix from a quaternion\n     * @param q - quaternion to create matrix from\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat4 made from q\n     */\n    function fromQuat(q, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const x = q[0];\n        const y = q[1];\n        const z = q[2];\n        const w = q[3];\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const yx = y * x2;\n        const yy = y * y2;\n        const zx = z * x2;\n        const zy = z * y2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n        newDst[0] = 1 - yy - zz;\n        newDst[1] = yx + wz;\n        newDst[2] = zx - wy;\n        newDst[3] = 0;\n        newDst[4] = yx - wz;\n        newDst[5] = 1 - xx - zz;\n        newDst[6] = zy + wx;\n        newDst[7] = 0;\n        newDst[8] = zx + wy;\n        newDst[9] = zy - wx;\n        newDst[10] = 1 - xx - yy;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Negates a matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns -m.\n     */\n    function negate(m, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = -m[0];\n        newDst[1] = -m[1];\n        newDst[2] = -m[2];\n        newDst[3] = -m[3];\n        newDst[4] = -m[4];\n        newDst[5] = -m[5];\n        newDst[6] = -m[6];\n        newDst[7] = -m[7];\n        newDst[8] = -m[8];\n        newDst[9] = -m[9];\n        newDst[10] = -m[10];\n        newDst[11] = -m[11];\n        newDst[12] = -m[12];\n        newDst[13] = -m[13];\n        newDst[14] = -m[14];\n        newDst[15] = -m[15];\n        return newDst;\n    }\n    /**\n     * Copies a matrix. (same as {@link mat4.clone})\n     * Also see {@link mat4.create} and {@link mat4.set}\n     * @param m - The matrix.\n     * @param dst - The matrix. If not passed a new one is created.\n     * @returns A copy of m.\n     */\n    function copy(m, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = m[0];\n        newDst[1] = m[1];\n        newDst[2] = m[2];\n        newDst[3] = m[3];\n        newDst[4] = m[4];\n        newDst[5] = m[5];\n        newDst[6] = m[6];\n        newDst[7] = m[7];\n        newDst[8] = m[8];\n        newDst[9] = m[9];\n        newDst[10] = m[10];\n        newDst[11] = m[11];\n        newDst[12] = m[12];\n        newDst[13] = m[13];\n        newDst[14] = m[14];\n        newDst[15] = m[15];\n        return newDst;\n    }\n    /**\n     * Copies a matrix (same as {@link mat4.copy})\n     * Also see {@link mat4.create} and {@link mat4.set}\n     * @param m - The matrix.\n     * @param dst - The matrix. If not passed a new one is created.\n     * @returns A copy of m.\n     */\n    const clone = copy;\n    /**\n     * Check if 2 matrices are approximately equal\n     * @param a - Operand matrix.\n     * @param b - Operand matrix.\n     * @returns true if matrices are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON &&\n            Math.abs(a[3] - b[3]) < EPSILON &&\n            Math.abs(a[4] - b[4]) < EPSILON &&\n            Math.abs(a[5] - b[5]) < EPSILON &&\n            Math.abs(a[6] - b[6]) < EPSILON &&\n            Math.abs(a[7] - b[7]) < EPSILON &&\n            Math.abs(a[8] - b[8]) < EPSILON &&\n            Math.abs(a[9] - b[9]) < EPSILON &&\n            Math.abs(a[10] - b[10]) < EPSILON &&\n            Math.abs(a[11] - b[11]) < EPSILON &&\n            Math.abs(a[12] - b[12]) < EPSILON &&\n            Math.abs(a[13] - b[13]) < EPSILON &&\n            Math.abs(a[14] - b[14]) < EPSILON &&\n            Math.abs(a[15] - b[15]) < EPSILON;\n    }\n    /**\n     * Check if 2 matrices are exactly equal\n     * @param a - Operand matrix.\n     * @param b - Operand matrix.\n     * @returns true if matrices are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] &&\n            a[1] === b[1] &&\n            a[2] === b[2] &&\n            a[3] === b[3] &&\n            a[4] === b[4] &&\n            a[5] === b[5] &&\n            a[6] === b[6] &&\n            a[7] === b[7] &&\n            a[8] === b[8] &&\n            a[9] === b[9] &&\n            a[10] === b[10] &&\n            a[11] === b[11] &&\n            a[12] === b[12] &&\n            a[13] === b[13] &&\n            a[14] === b[14] &&\n            a[15] === b[15];\n    }\n    /**\n     * Creates a 4-by-4 identity matrix.\n     *\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns A 4-by-4 identity matrix.\n     */\n    function identity(dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Takes the transpose of a matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The transpose of m.\n     */\n    function transpose(m, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        if (newDst === m) {\n            let t;\n            t = m[1];\n            m[1] = m[4];\n            m[4] = t;\n            t = m[2];\n            m[2] = m[8];\n            m[8] = t;\n            t = m[3];\n            m[3] = m[12];\n            m[12] = t;\n            t = m[6];\n            m[6] = m[9];\n            m[9] = t;\n            t = m[7];\n            m[7] = m[13];\n            m[13] = t;\n            t = m[11];\n            m[11] = m[14];\n            m[14] = t;\n            return newDst;\n        }\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const m30 = m[3 * 4 + 0];\n        const m31 = m[3 * 4 + 1];\n        const m32 = m[3 * 4 + 2];\n        const m33 = m[3 * 4 + 3];\n        newDst[0] = m00;\n        newDst[1] = m10;\n        newDst[2] = m20;\n        newDst[3] = m30;\n        newDst[4] = m01;\n        newDst[5] = m11;\n        newDst[6] = m21;\n        newDst[7] = m31;\n        newDst[8] = m02;\n        newDst[9] = m12;\n        newDst[10] = m22;\n        newDst[11] = m32;\n        newDst[12] = m03;\n        newDst[13] = m13;\n        newDst[14] = m23;\n        newDst[15] = m33;\n        return newDst;\n    }\n    /**\n     * Computes the inverse of a 4-by-4 matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The inverse of m.\n     */\n    function inverse(m, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const m30 = m[3 * 4 + 0];\n        const m31 = m[3 * 4 + 1];\n        const m32 = m[3 * 4 + 2];\n        const m33 = m[3 * 4 + 3];\n        const tmp0 = m22 * m33;\n        const tmp1 = m32 * m23;\n        const tmp2 = m12 * m33;\n        const tmp3 = m32 * m13;\n        const tmp4 = m12 * m23;\n        const tmp5 = m22 * m13;\n        const tmp6 = m02 * m33;\n        const tmp7 = m32 * m03;\n        const tmp8 = m02 * m23;\n        const tmp9 = m22 * m03;\n        const tmp10 = m02 * m13;\n        const tmp11 = m12 * m03;\n        const tmp12 = m20 * m31;\n        const tmp13 = m30 * m21;\n        const tmp14 = m10 * m31;\n        const tmp15 = m30 * m11;\n        const tmp16 = m10 * m21;\n        const tmp17 = m20 * m11;\n        const tmp18 = m00 * m31;\n        const tmp19 = m30 * m01;\n        const tmp20 = m00 * m21;\n        const tmp21 = m20 * m01;\n        const tmp22 = m00 * m11;\n        const tmp23 = m10 * m01;\n        const t0 = (tmp0 * m11 + tmp3 * m21 + tmp4 * m31) -\n            (tmp1 * m11 + tmp2 * m21 + tmp5 * m31);\n        const t1 = (tmp1 * m01 + tmp6 * m21 + tmp9 * m31) -\n            (tmp0 * m01 + tmp7 * m21 + tmp8 * m31);\n        const t2 = (tmp2 * m01 + tmp7 * m11 + tmp10 * m31) -\n            (tmp3 * m01 + tmp6 * m11 + tmp11 * m31);\n        const t3 = (tmp5 * m01 + tmp8 * m11 + tmp11 * m21) -\n            (tmp4 * m01 + tmp9 * m11 + tmp10 * m21);\n        const d = 1 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n        newDst[0] = d * t0;\n        newDst[1] = d * t1;\n        newDst[2] = d * t2;\n        newDst[3] = d * t3;\n        newDst[4] = d * ((tmp1 * m10 + tmp2 * m20 + tmp5 * m30) -\n            (tmp0 * m10 + tmp3 * m20 + tmp4 * m30));\n        newDst[5] = d * ((tmp0 * m00 + tmp7 * m20 + tmp8 * m30) -\n            (tmp1 * m00 + tmp6 * m20 + tmp9 * m30));\n        newDst[6] = d * ((tmp3 * m00 + tmp6 * m10 + tmp11 * m30) -\n            (tmp2 * m00 + tmp7 * m10 + tmp10 * m30));\n        newDst[7] = d * ((tmp4 * m00 + tmp9 * m10 + tmp10 * m20) -\n            (tmp5 * m00 + tmp8 * m10 + tmp11 * m20));\n        newDst[8] = d * ((tmp12 * m13 + tmp15 * m23 + tmp16 * m33) -\n            (tmp13 * m13 + tmp14 * m23 + tmp17 * m33));\n        newDst[9] = d * ((tmp13 * m03 + tmp18 * m23 + tmp21 * m33) -\n            (tmp12 * m03 + tmp19 * m23 + tmp20 * m33));\n        newDst[10] = d * ((tmp14 * m03 + tmp19 * m13 + tmp22 * m33) -\n            (tmp15 * m03 + tmp18 * m13 + tmp23 * m33));\n        newDst[11] = d * ((tmp17 * m03 + tmp20 * m13 + tmp23 * m23) -\n            (tmp16 * m03 + tmp21 * m13 + tmp22 * m23));\n        newDst[12] = d * ((tmp14 * m22 + tmp17 * m32 + tmp13 * m12) -\n            (tmp16 * m32 + tmp12 * m12 + tmp15 * m22));\n        newDst[13] = d * ((tmp20 * m32 + tmp12 * m02 + tmp19 * m22) -\n            (tmp18 * m22 + tmp21 * m32 + tmp13 * m02));\n        newDst[14] = d * ((tmp18 * m12 + tmp23 * m32 + tmp15 * m02) -\n            (tmp22 * m32 + tmp14 * m02 + tmp19 * m12));\n        newDst[15] = d * ((tmp22 * m22 + tmp16 * m02 + tmp21 * m12) -\n            (tmp20 * m12 + tmp23 * m22 + tmp17 * m02));\n        return newDst;\n    }\n    /**\n     * Compute the determinant of a matrix\n     * @param m - the matrix\n     * @returns the determinant\n     */\n    function determinant(m) {\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const m30 = m[3 * 4 + 0];\n        const m31 = m[3 * 4 + 1];\n        const m32 = m[3 * 4 + 2];\n        const m33 = m[3 * 4 + 3];\n        const tmp0 = m22 * m33;\n        const tmp1 = m32 * m23;\n        const tmp2 = m12 * m33;\n        const tmp3 = m32 * m13;\n        const tmp4 = m12 * m23;\n        const tmp5 = m22 * m13;\n        const tmp6 = m02 * m33;\n        const tmp7 = m32 * m03;\n        const tmp8 = m02 * m23;\n        const tmp9 = m22 * m03;\n        const tmp10 = m02 * m13;\n        const tmp11 = m12 * m03;\n        const t0 = (tmp0 * m11 + tmp3 * m21 + tmp4 * m31) -\n            (tmp1 * m11 + tmp2 * m21 + tmp5 * m31);\n        const t1 = (tmp1 * m01 + tmp6 * m21 + tmp9 * m31) -\n            (tmp0 * m01 + tmp7 * m21 + tmp8 * m31);\n        const t2 = (tmp2 * m01 + tmp7 * m11 + tmp10 * m31) -\n            (tmp3 * m01 + tmp6 * m11 + tmp11 * m31);\n        const t3 = (tmp5 * m01 + tmp8 * m11 + tmp11 * m21) -\n            (tmp4 * m01 + tmp9 * m11 + tmp10 * m21);\n        return m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3;\n    }\n    /**\n     * Computes the inverse of a 4-by-4 matrix. (same as inverse)\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The inverse of m.\n     */\n    const invert = inverse;\n    /**\n     * Multiplies two 4-by-4 matrices with a on the left and b on the right\n     * @param a - The matrix on the left.\n     * @param b - The matrix on the right.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix product of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const a00 = a[0];\n        const a01 = a[1];\n        const a02 = a[2];\n        const a03 = a[3];\n        const a10 = a[4 + 0];\n        const a11 = a[4 + 1];\n        const a12 = a[4 + 2];\n        const a13 = a[4 + 3];\n        const a20 = a[8 + 0];\n        const a21 = a[8 + 1];\n        const a22 = a[8 + 2];\n        const a23 = a[8 + 3];\n        const a30 = a[12 + 0];\n        const a31 = a[12 + 1];\n        const a32 = a[12 + 2];\n        const a33 = a[12 + 3];\n        const b00 = b[0];\n        const b01 = b[1];\n        const b02 = b[2];\n        const b03 = b[3];\n        const b10 = b[4 + 0];\n        const b11 = b[4 + 1];\n        const b12 = b[4 + 2];\n        const b13 = b[4 + 3];\n        const b20 = b[8 + 0];\n        const b21 = b[8 + 1];\n        const b22 = b[8 + 2];\n        const b23 = b[8 + 3];\n        const b30 = b[12 + 0];\n        const b31 = b[12 + 1];\n        const b32 = b[12 + 2];\n        const b33 = b[12 + 3];\n        newDst[0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n        newDst[1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n        newDst[2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n        newDst[3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n        newDst[4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n        newDst[5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n        newDst[6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n        newDst[7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n        newDst[8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n        newDst[9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n        newDst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n        newDst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n        newDst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n        newDst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n        newDst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n        newDst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n        return newDst;\n    }\n    /**\n     * Multiplies two 4-by-4 matrices with a on the left and b on the right (same as multiply)\n     * @param a - The matrix on the left.\n     * @param b - The matrix on the right.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix product of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Sets the translation component of a 4-by-4 matrix to the given\n     * vector.\n     * @param a - The matrix.\n     * @param v - The vector.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix with translation set.\n     */\n    function setTranslation(a, v, dst) {\n        const newDst = (dst ?? identity());\n        if (a !== newDst) {\n            newDst[0] = a[0];\n            newDst[1] = a[1];\n            newDst[2] = a[2];\n            newDst[3] = a[3];\n            newDst[4] = a[4];\n            newDst[5] = a[5];\n            newDst[6] = a[6];\n            newDst[7] = a[7];\n            newDst[8] = a[8];\n            newDst[9] = a[9];\n            newDst[10] = a[10];\n            newDst[11] = a[11];\n        }\n        newDst[12] = v[0];\n        newDst[13] = v[1];\n        newDst[14] = v[2];\n        newDst[15] = 1;\n        return newDst;\n    }\n    ///**\n    // * Returns the translation component of a 4-by-4 matrix as a vector with 3\n    // * entries.\n    // * @param m - The matrix.\n    // * @param dst - vector to hold result. If not passed a new one is created.\n    // * @returns The translation component of m.\n    // */\n    function getTranslation(m, dst) {\n        const newDst = (dst ?? vec3.create());\n        newDst[0] = m[12];\n        newDst[1] = m[13];\n        newDst[2] = m[14];\n        return newDst;\n    }\n    /**\n     * Returns an axis of a 4x4 matrix as a vector with 3 entries\n     * @param m - The matrix.\n     * @param axis - The axis 0 = x, 1 = y, 2 = z;\n     * @returns The axis component of m.\n     */\n    function getAxis(m, axis, dst) {\n        const newDst = (dst ?? vec3.create());\n        const off = axis * 4;\n        newDst[0] = m[off + 0];\n        newDst[1] = m[off + 1];\n        newDst[2] = m[off + 2];\n        return newDst;\n    }\n    /**\n     * Sets an axis of a 4x4 matrix as a vector with 3 entries\n     * @param m - The matrix.\n     * @param v - the axis vector\n     * @param axis - The axis  0 = x, 1 = y, 2 = z;\n     * @param dst - The matrix to set. If not passed a new one is created.\n     * @returns The matrix with axis set.\n     */\n    function setAxis(m, v, axis, dst) {\n        const newDst = (dst === m) ? dst : copy(m, dst);\n        const off = axis * 4;\n        newDst[off + 0] = v[0];\n        newDst[off + 1] = v[1];\n        newDst[off + 2] = v[2];\n        return newDst;\n    }\n    /**\n     * Returns the \"3d\" scaling component of the matrix\n     * @param m - The Matrix\n     * @param dst - The vector to set. If not passed a new one is created.\n     */\n    function getScaling(m, dst) {\n        const newDst = (dst ?? vec3.create());\n        const xx = m[0];\n        const xy = m[1];\n        const xz = m[2];\n        const yx = m[4];\n        const yy = m[5];\n        const yz = m[6];\n        const zx = m[8];\n        const zy = m[9];\n        const zz = m[10];\n        newDst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n        newDst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n        newDst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 perspective transformation matrix given the angular height\n     * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n     * arguments define a frustum extending in the negative z direction.  The given\n     * angle is the vertical angle of the frustum, and the horizontal angle is\n     * determined to produce the given aspect ratio.  The arguments near and far are\n     * the distances to the near and far clipping planes.  Note that near and far\n     * are not z coordinates, but rather they are distances along the negative\n     * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n     * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n     * from 0 to 1 in the z dimension.\n     *\n     * Note: If you pass `Infinity` for zFar then it will produce a projection matrix\n     * returns -Infinity for Z when transforming coordinates with Z <= 0 and +Infinity for Z\n     * otherwise.\n     *\n     * @param fieldOfViewYInRadians - The camera angle from top to bottom (in radians).\n     * @param aspect - The aspect ratio width / height.\n     * @param zNear - The depth (negative z coordinate)\n     *     of the near clipping plane.\n     * @param zFar - The depth (negative z coordinate)\n     *     of the far clipping plane.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The perspective matrix.\n     */\n    function perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n        newDst[0] = f / aspect;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = f;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[11] = -1;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[15] = 0;\n        if (Number.isFinite(zFar)) {\n            const rangeInv = 1 / (zNear - zFar);\n            newDst[10] = zFar * rangeInv;\n            newDst[14] = zFar * zNear * rangeInv;\n        }\n        else {\n            newDst[10] = -1;\n            newDst[14] = -zNear;\n        }\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 reverse-z perspective transformation matrix given the angular height\n     * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n     * arguments define a frustum extending in the negative z direction.  The given\n     * angle is the vertical angle of the frustum, and the horizontal angle is\n     * determined to produce the given aspect ratio.  The arguments near and far are\n     * the distances to the near and far clipping planes.  Note that near and far\n     * are not z coordinates, but rather they are distances along the negative\n     * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n     * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n     * from 1 (at -zNear) to 0 (at -zFar) in the z dimension.\n     *\n     * @param fieldOfViewYInRadians - The camera angle from top to bottom (in radians).\n     * @param aspect - The aspect ratio width / height.\n     * @param zNear - The depth (negative z coordinate)\n     *     of the near clipping plane.\n     * @param zFar - The depth (negative z coordinate)\n     *     of the far clipping plane. (default = Infinity)\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The perspective matrix.\n     */ function perspectiveReverseZ(fieldOfViewYInRadians, aspect, zNear, zFar = Infinity, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const f = 1 / Math.tan(fieldOfViewYInRadians * 0.5);\n        newDst[0] = f / aspect;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = f;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[11] = -1;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[15] = 0;\n        if (zFar === Infinity) {\n            newDst[10] = 0;\n            newDst[14] = zNear;\n        }\n        else {\n            const rangeInv = 1 / (zFar - zNear);\n            newDst[10] = zNear * rangeInv;\n            newDst[14] = zFar * zNear * rangeInv;\n        }\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 orthogonal transformation matrix that transforms from\n     * the given the left, right, bottom, and top dimensions to -1 +1 in x, and y\n     * and 0 to +1 in z.\n     * @param left - Left side of the near clipping plane viewport.\n     * @param right - Right side of the near clipping plane viewport.\n     * @param bottom - Bottom of the near clipping plane viewport.\n     * @param top - Top of the near clipping plane viewport.\n     * @param near - The depth (negative z coordinate)\n     *     of the near clipping plane.\n     * @param far - The depth (negative z coordinate)\n     *     of the far clipping plane.\n     * @param dst - Output matrix. If not passed a new one is created.\n     * @returns The orthographic projection matrix.\n     */\n    function ortho(left, right, bottom, top, near, far, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = 2 / (right - left);\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 2 / (top - bottom);\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1 / (near - far);\n        newDst[11] = 0;\n        newDst[12] = (right + left) / (left - right);\n        newDst[13] = (top + bottom) / (bottom - top);\n        newDst[14] = near / (near - far);\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 perspective transformation matrix given the left, right,\n     * top, bottom, near and far clipping planes. The arguments define a frustum\n     * extending in the negative z direction. The arguments near and far are the\n     * distances to the near and far clipping planes. Note that near and far are not\n     * z coordinates, but rather they are distances along the negative z-axis. The\n     * matrix generated sends the viewing frustum to the unit box. We assume a unit\n     * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n     * dimension.\n     * @param left - The x coordinate of the left plane of the box.\n     * @param right - The x coordinate of the right plane of the box.\n     * @param bottom - The y coordinate of the bottom plane of the box.\n     * @param top - The y coordinate of the right plane of the box.\n     * @param near - The negative z coordinate of the near plane of the box.\n     * @param far - The negative z coordinate of the far plane of the box.\n     * @param dst - Output matrix. If not passed a new one is created.\n     * @returns The perspective projection matrix.\n     */\n    function frustum(left, right, bottom, top, near, far, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const dx = (right - left);\n        const dy = (top - bottom);\n        const dz = (near - far);\n        newDst[0] = 2 * near / dx;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 2 * near / dy;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = (left + right) / dx;\n        newDst[9] = (top + bottom) / dy;\n        newDst[10] = far / dz;\n        newDst[11] = -1;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = near * far / dz;\n        newDst[15] = 0;\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 reverse-z perspective transformation matrix given the left, right,\n     * top, bottom, near and far clipping planes. The arguments define a frustum\n     * extending in the negative z direction. The arguments near and far are the\n     * distances to the near and far clipping planes. Note that near and far are not\n     * z coordinates, but rather they are distances along the negative z-axis. The\n     * matrix generated sends the viewing frustum to the unit box. We assume a unit\n     * box extending from -1 to 1 in the x and y dimensions and from 1 (-near) to 0 (-far) in the z\n     * dimension.\n     * @param left - The x coordinate of the left plane of the box.\n     * @param right - The x coordinate of the right plane of the box.\n     * @param bottom - The y coordinate of the bottom plane of the box.\n     * @param top - The y coordinate of the right plane of the box.\n     * @param near - The negative z coordinate of the near plane of the box.\n     * @param far - The negative z coordinate of the far plane of the box.\n     * @param dst - Output matrix. If not passed a new one is created.\n     * @returns The perspective projection matrix.\n     */\n    function frustumReverseZ(left, right, bottom, top, near, far = Infinity, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const dx = (right - left);\n        const dy = (top - bottom);\n        newDst[0] = 2 * near / dx;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 2 * near / dy;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = (left + right) / dx;\n        newDst[9] = (top + bottom) / dy;\n        newDst[11] = -1;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[15] = 0;\n        if (far === Infinity) {\n            newDst[10] = 0;\n            newDst[14] = near;\n        }\n        else {\n            const rangeInv = 1 / (far - near);\n            newDst[10] = near * rangeInv;\n            newDst[14] = far * near * rangeInv;\n        }\n        return newDst;\n    }\n    const xAxis = vec3.create();\n    const yAxis = vec3.create();\n    const zAxis = vec3.create();\n    /**\n     * Computes a 4-by-4 aim transformation.\n     *\n     * This is a matrix which positions an object aiming down positive Z.\n     * toward the target.\n     *\n     * Note: this is **NOT** the inverse of lookAt as lookAt looks at negative Z.\n     *\n     * @param position - The position of the object.\n     * @param target - The position meant to be aimed at.\n     * @param up - A vector pointing up.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The aim matrix.\n     */\n    function aim(position, target, up, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        vec3.normalize(vec3.subtract(target, position, zAxis), zAxis);\n        vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n        vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n        newDst[0] = xAxis[0];\n        newDst[1] = xAxis[1];\n        newDst[2] = xAxis[2];\n        newDst[3] = 0;\n        newDst[4] = yAxis[0];\n        newDst[5] = yAxis[1];\n        newDst[6] = yAxis[2];\n        newDst[7] = 0;\n        newDst[8] = zAxis[0];\n        newDst[9] = zAxis[1];\n        newDst[10] = zAxis[2];\n        newDst[11] = 0;\n        newDst[12] = position[0];\n        newDst[13] = position[1];\n        newDst[14] = position[2];\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 camera aim transformation.\n     *\n     * This is a matrix which positions an object aiming down negative Z.\n     * toward the target.\n     *\n     * Note: this is the inverse of `lookAt`\n     *\n     * @param eye - The position of the object.\n     * @param target - The position meant to be aimed at.\n     * @param up - A vector pointing up.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The aim matrix.\n     */\n    function cameraAim(eye, target, up, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        vec3.normalize(vec3.subtract(eye, target, zAxis), zAxis);\n        vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n        vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n        newDst[0] = xAxis[0];\n        newDst[1] = xAxis[1];\n        newDst[2] = xAxis[2];\n        newDst[3] = 0;\n        newDst[4] = yAxis[0];\n        newDst[5] = yAxis[1];\n        newDst[6] = yAxis[2];\n        newDst[7] = 0;\n        newDst[8] = zAxis[0];\n        newDst[9] = zAxis[1];\n        newDst[10] = zAxis[2];\n        newDst[11] = 0;\n        newDst[12] = eye[0];\n        newDst[13] = eye[1];\n        newDst[14] = eye[2];\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 view transformation.\n     *\n     * This is a view matrix which transforms all other objects\n     * to be in the space of the view defined by the parameters.\n     *\n     * @param eye - The position of the object.\n     * @param target - The position meant to be aimed at.\n     * @param up - A vector pointing up.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The look-at matrix.\n     */\n    function lookAt(eye, target, up, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        vec3.normalize(vec3.subtract(eye, target, zAxis), zAxis);\n        vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n        vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n        newDst[0] = xAxis[0];\n        newDst[1] = yAxis[0];\n        newDst[2] = zAxis[0];\n        newDst[3] = 0;\n        newDst[4] = xAxis[1];\n        newDst[5] = yAxis[1];\n        newDst[6] = zAxis[1];\n        newDst[7] = 0;\n        newDst[8] = xAxis[2];\n        newDst[9] = yAxis[2];\n        newDst[10] = zAxis[2];\n        newDst[11] = 0;\n        newDst[12] = -(xAxis[0] * eye[0] + xAxis[1] * eye[1] + xAxis[2] * eye[2]);\n        newDst[13] = -(yAxis[0] * eye[0] + yAxis[1] * eye[1] + yAxis[2] * eye[2]);\n        newDst[14] = -(zAxis[0] * eye[0] + zAxis[1] * eye[1] + zAxis[2] * eye[2]);\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which translates by the given vector v.\n     * @param v - The vector by\n     *     which to translate.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The translation matrix.\n     */\n    function translation(v, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        newDst[11] = 0;\n        newDst[12] = v[0];\n        newDst[13] = v[1];\n        newDst[14] = v[2];\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Translates the given 4-by-4 matrix by the given vector v.\n     * @param m - The matrix.\n     * @param v - The vector by\n     *     which to translate.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The translated matrix.\n     */\n    function translate(m, v, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const m00 = m[0];\n        const m01 = m[1];\n        const m02 = m[2];\n        const m03 = m[3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const m30 = m[3 * 4 + 0];\n        const m31 = m[3 * 4 + 1];\n        const m32 = m[3 * 4 + 2];\n        const m33 = m[3 * 4 + 3];\n        if (m !== newDst) {\n            newDst[0] = m00;\n            newDst[1] = m01;\n            newDst[2] = m02;\n            newDst[3] = m03;\n            newDst[4] = m10;\n            newDst[5] = m11;\n            newDst[6] = m12;\n            newDst[7] = m13;\n            newDst[8] = m20;\n            newDst[9] = m21;\n            newDst[10] = m22;\n            newDst[11] = m23;\n        }\n        newDst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n        newDst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n        newDst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n        newDst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotationX(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = c;\n        newDst[6] = s;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = -s;\n        newDst[10] = c;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Rotates the given 4-by-4 matrix around the x-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotateX(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const m10 = m[4];\n        const m11 = m[5];\n        const m12 = m[6];\n        const m13 = m[7];\n        const m20 = m[8];\n        const m21 = m[9];\n        const m22 = m[10];\n        const m23 = m[11];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[4] = c * m10 + s * m20;\n        newDst[5] = c * m11 + s * m21;\n        newDst[6] = c * m12 + s * m22;\n        newDst[7] = c * m13 + s * m23;\n        newDst[8] = c * m20 - s * m10;\n        newDst[9] = c * m21 - s * m11;\n        newDst[10] = c * m22 - s * m12;\n        newDst[11] = c * m23 - s * m13;\n        if (m !== newDst) {\n            newDst[0] = m[0];\n            newDst[1] = m[1];\n            newDst[2] = m[2];\n            newDst[3] = m[3];\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotationY(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c;\n        newDst[1] = 0;\n        newDst[2] = -s;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = s;\n        newDst[9] = 0;\n        newDst[10] = c;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Rotates the given 4-by-4 matrix around the y-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotateY(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c * m00 - s * m20;\n        newDst[1] = c * m01 - s * m21;\n        newDst[2] = c * m02 - s * m22;\n        newDst[3] = c * m03 - s * m23;\n        newDst[8] = c * m20 + s * m00;\n        newDst[9] = c * m21 + s * m01;\n        newDst[10] = c * m22 + s * m02;\n        newDst[11] = c * m23 + s * m03;\n        if (m !== newDst) {\n            newDst[4] = m[4];\n            newDst[5] = m[5];\n            newDst[6] = m[6];\n            newDst[7] = m[7];\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotationZ(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c;\n        newDst[1] = s;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = -s;\n        newDst[5] = c;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Rotates the given 4-by-4 matrix around the z-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotateZ(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c * m00 + s * m10;\n        newDst[1] = c * m01 + s * m11;\n        newDst[2] = c * m02 + s * m12;\n        newDst[3] = c * m03 + s * m13;\n        newDst[4] = c * m10 - s * m00;\n        newDst[5] = c * m11 - s * m01;\n        newDst[6] = c * m12 - s * m02;\n        newDst[7] = c * m13 - s * m03;\n        if (m !== newDst) {\n            newDst[8] = m[8];\n            newDst[9] = m[9];\n            newDst[10] = m[10];\n            newDst[11] = m[11];\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the given axis by the given\n     * angle.\n     * @param axis - The axis\n     *     about which to rotate.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns A matrix which rotates angle radians\n     *     around the axis.\n     */\n    function axisRotation(axis, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        let x = axis[0];\n        let y = axis[1];\n        let z = axis[2];\n        const n = Math.sqrt(x * x + y * y + z * z);\n        x /= n;\n        y /= n;\n        z /= n;\n        const xx = x * x;\n        const yy = y * y;\n        const zz = z * z;\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        const oneMinusCosine = 1 - c;\n        newDst[0] = xx + (1 - xx) * c;\n        newDst[1] = x * y * oneMinusCosine + z * s;\n        newDst[2] = x * z * oneMinusCosine - y * s;\n        newDst[3] = 0;\n        newDst[4] = x * y * oneMinusCosine - z * s;\n        newDst[5] = yy + (1 - yy) * c;\n        newDst[6] = y * z * oneMinusCosine + x * s;\n        newDst[7] = 0;\n        newDst[8] = x * z * oneMinusCosine + y * s;\n        newDst[9] = y * z * oneMinusCosine - x * s;\n        newDst[10] = zz + (1 - zz) * c;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the given axis by the given\n     * angle. (same as axisRotation)\n     * @param axis - The axis\n     *     about which to rotate.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns A matrix which rotates angle radians\n     *     around the axis.\n     */\n    const rotation = axisRotation;\n    /**\n     * Rotates the given 4-by-4 matrix around the given axis by the\n     * given angle.\n     * @param m - The matrix.\n     * @param axis - The axis\n     *     about which to rotate.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function axisRotate(m, axis, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        let x = axis[0];\n        let y = axis[1];\n        let z = axis[2];\n        const n = Math.sqrt(x * x + y * y + z * z);\n        x /= n;\n        y /= n;\n        z /= n;\n        const xx = x * x;\n        const yy = y * y;\n        const zz = z * z;\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        const oneMinusCosine = 1 - c;\n        const r00 = xx + (1 - xx) * c;\n        const r01 = x * y * oneMinusCosine + z * s;\n        const r02 = x * z * oneMinusCosine - y * s;\n        const r10 = x * y * oneMinusCosine - z * s;\n        const r11 = yy + (1 - yy) * c;\n        const r12 = y * z * oneMinusCosine + x * s;\n        const r20 = x * z * oneMinusCosine + y * s;\n        const r21 = y * z * oneMinusCosine - x * s;\n        const r22 = zz + (1 - zz) * c;\n        const m00 = m[0];\n        const m01 = m[1];\n        const m02 = m[2];\n        const m03 = m[3];\n        const m10 = m[4];\n        const m11 = m[5];\n        const m12 = m[6];\n        const m13 = m[7];\n        const m20 = m[8];\n        const m21 = m[9];\n        const m22 = m[10];\n        const m23 = m[11];\n        newDst[0] = r00 * m00 + r01 * m10 + r02 * m20;\n        newDst[1] = r00 * m01 + r01 * m11 + r02 * m21;\n        newDst[2] = r00 * m02 + r01 * m12 + r02 * m22;\n        newDst[3] = r00 * m03 + r01 * m13 + r02 * m23;\n        newDst[4] = r10 * m00 + r11 * m10 + r12 * m20;\n        newDst[5] = r10 * m01 + r11 * m11 + r12 * m21;\n        newDst[6] = r10 * m02 + r11 * m12 + r12 * m22;\n        newDst[7] = r10 * m03 + r11 * m13 + r12 * m23;\n        newDst[8] = r20 * m00 + r21 * m10 + r22 * m20;\n        newDst[9] = r20 * m01 + r21 * m11 + r22 * m21;\n        newDst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n        newDst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n        if (m !== newDst) {\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Rotates the given 4-by-4 matrix around the given axis by the\n     * given angle. (same as rotate)\n     * @param m - The matrix.\n     * @param axis - The axis\n     *     about which to rotate.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    const rotate = axisRotate;\n    /**\n     * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n     * the corresponding entry in the given vector; assumes the vector has three\n     * entries.\n     * @param v - A vector of\n     *     three entries specifying the factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function scaling(v, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = v[0];\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = v[1];\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = v[2];\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Scales the given 4-by-4 matrix in each dimension by an amount\n     * given by the corresponding entry in the given vector; assumes the vector has\n     * three entries.\n     * @param m - The matrix to be modified.\n     * @param v - A vector of three entries specifying the\n     *     factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function scale(m, v, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        newDst[0] = v0 * m[0 * 4 + 0];\n        newDst[1] = v0 * m[0 * 4 + 1];\n        newDst[2] = v0 * m[0 * 4 + 2];\n        newDst[3] = v0 * m[0 * 4 + 3];\n        newDst[4] = v1 * m[1 * 4 + 0];\n        newDst[5] = v1 * m[1 * 4 + 1];\n        newDst[6] = v1 * m[1 * 4 + 2];\n        newDst[7] = v1 * m[1 * 4 + 3];\n        newDst[8] = v2 * m[2 * 4 + 0];\n        newDst[9] = v2 * m[2 * 4 + 1];\n        newDst[10] = v2 * m[2 * 4 + 2];\n        newDst[11] = v2 * m[2 * 4 + 3];\n        if (m !== newDst) {\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which scales a uniform amount in each dimension.\n     * @param s - the amount to scale\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function uniformScaling(s, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = s;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = s;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = s;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Scales the given 4-by-4 matrix in each dimension by a uniform scale.\n     * @param m - The matrix to be modified.\n     * @param s - The amount to scale.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function uniformScale(m, s, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = s * m[0 * 4 + 0];\n        newDst[1] = s * m[0 * 4 + 1];\n        newDst[2] = s * m[0 * 4 + 2];\n        newDst[3] = s * m[0 * 4 + 3];\n        newDst[4] = s * m[1 * 4 + 0];\n        newDst[5] = s * m[1 * 4 + 1];\n        newDst[6] = s * m[1 * 4 + 2];\n        newDst[7] = s * m[1 * 4 + 3];\n        newDst[8] = s * m[2 * 4 + 0];\n        newDst[9] = s * m[2 * 4 + 1];\n        newDst[10] = s * m[2 * 4 + 2];\n        newDst[11] = s * m[2 * 4 + 3];\n        if (m !== newDst) {\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    return {\n        create,\n        set,\n        fromMat3,\n        fromQuat,\n        negate,\n        copy,\n        clone,\n        equalsApproximately,\n        equals,\n        identity,\n        transpose,\n        inverse,\n        determinant,\n        invert,\n        multiply,\n        mul,\n        setTranslation,\n        getTranslation,\n        getAxis,\n        setAxis,\n        getScaling,\n        perspective,\n        perspectiveReverseZ,\n        ortho,\n        frustum,\n        frustumReverseZ,\n        aim,\n        cameraAim,\n        lookAt,\n        translation,\n        translate,\n        rotationX,\n        rotateX,\n        rotationY,\n        rotateY,\n        rotationZ,\n        rotateZ,\n        axisRotation,\n        rotation,\n        axisRotate,\n        rotate,\n        scaling,\n        scale,\n        uniformScaling,\n        uniformScale,\n    };\n}\nconst cache$2 = new Map();\nfunction getAPI$2(Ctor) {\n    let api = cache$2.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$2(Ctor);\n        cache$2.set(Ctor, api);\n    }\n    return api;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates am typed API for Qud\n * */\nfunction getAPIImpl$1(Ctor) {\n    const vec3 = getAPI$4(Ctor);\n    /**\n     * Creates a quat4; may be called with x, y, z to set initial values.\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @param w - Initial w value.\n     * @returns the created vector\n     */\n    function create(x, y, z, w) {\n        const newDst = new Ctor(4);\n        if (x !== undefined) {\n            newDst[0] = x;\n            if (y !== undefined) {\n                newDst[1] = y;\n                if (z !== undefined) {\n                    newDst[2] = z;\n                    if (w !== undefined) {\n                        newDst[3] = w;\n                    }\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Creates a Quat; may be called with x, y, z to set initial values. (same as create)\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @param z - Initial w value.\n     * @returns the created vector\n     */\n    const fromValues = create;\n    /**\n     * Sets the values of a Quat\n     * Also see {@link quat.create} and {@link quat.copy}\n     *\n     * @param x first value\n     * @param y second value\n     * @param z third value\n     * @param w fourth value\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector with its elements set.\n     */\n    function set(x, y, z, w, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = x;\n        newDst[1] = y;\n        newDst[2] = z;\n        newDst[3] = w;\n        return newDst;\n    }\n    /**\n     * Sets a quaternion from the given angle and  axis,\n     * then returns it.\n     *\n     * @param axis - the axis to rotate around\n     * @param angleInRadians - the angle\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The quaternion that represents the given axis and angle\n     **/\n    function fromAxisAngle(axis, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const halfAngle = angleInRadians * 0.5;\n        const s = Math.sin(halfAngle);\n        newDst[0] = s * axis[0];\n        newDst[1] = s * axis[1];\n        newDst[2] = s * axis[2];\n        newDst[3] = Math.cos(halfAngle);\n        return newDst;\n    }\n    /**\n     * Gets the rotation axis and angle\n     * @param q - quaternion to compute from\n     * @param dst - Vec3 to hold result. If not passed in a new one is created.\n     * @return angle and axis\n     */\n    function toAxisAngle(q, dst) {\n        const newDst = (dst ?? vec3.create(3));\n        const angle = Math.acos(q[3]) * 2;\n        const s = Math.sin(angle * 0.5);\n        if (s > EPSILON) {\n            newDst[0] = q[0] / s;\n            newDst[1] = q[1] / s;\n            newDst[2] = q[2] / s;\n        }\n        else {\n            newDst[0] = 1;\n            newDst[1] = 0;\n            newDst[2] = 0;\n        }\n        return { angle, axis: newDst };\n    }\n    /**\n     * Returns the angle in degrees between two rotations a and b.\n     * @param a - quaternion a\n     * @param b - quaternion b\n     * @return angle in radians between the two quaternions\n     */\n    function angle(a, b) {\n        const d = dot(a, b);\n        return Math.acos(2 * d * d - 1);\n    }\n    /**\n     * Multiplies two quaternions\n     *\n     * @param a - the first quaternion\n     * @param b - the second quaternion\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const ax = a[0];\n        const ay = a[1];\n        const az = a[2];\n        const aw = a[3];\n        const bx = b[0];\n        const by = b[1];\n        const bz = b[2];\n        const bw = b[3];\n        newDst[0] = ax * bw + aw * bx + ay * bz - az * by;\n        newDst[1] = ay * bw + aw * by + az * bx - ax * bz;\n        newDst[2] = az * bw + aw * bz + ax * by - ay * bx;\n        newDst[3] = aw * bw - ax * bx - ay * by - az * bz;\n        return newDst;\n    }\n    /**\n     * Multiplies two quaternions\n     *\n     * @param a - the first quaternion\n     * @param b - the second quaternion\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    const mul = multiply;\n    /**\n     * Rotates the given quaternion around the X axis by the given angle.\n     * @param q - quaternion to rotate\n     * @param angleInRadians - The angle by which to rotate\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function rotateX(q, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const halfAngle = angleInRadians * 0.5;\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const qw = q[3];\n        const bx = Math.sin(halfAngle);\n        const bw = Math.cos(halfAngle);\n        newDst[0] = qx * bw + qw * bx;\n        newDst[1] = qy * bw + qz * bx;\n        newDst[2] = qz * bw - qy * bx;\n        newDst[3] = qw * bw - qx * bx;\n        return newDst;\n    }\n    /**\n     * Rotates the given quaternion around the Y axis by the given angle.\n     * @param q - quaternion to rotate\n     * @param angleInRadians - The angle by which to rotate\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function rotateY(q, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const halfAngle = angleInRadians * 0.5;\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const qw = q[3];\n        const by = Math.sin(halfAngle);\n        const bw = Math.cos(halfAngle);\n        newDst[0] = qx * bw - qz * by;\n        newDst[1] = qy * bw + qw * by;\n        newDst[2] = qz * bw + qx * by;\n        newDst[3] = qw * bw - qy * by;\n        return newDst;\n    }\n    /**\n     * Rotates the given quaternion around the Z axis by the given angle.\n     * @param q - quaternion to rotate\n     * @param angleInRadians - The angle by which to rotate\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function rotateZ(q, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const halfAngle = angleInRadians * 0.5;\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const qw = q[3];\n        const bz = Math.sin(halfAngle);\n        const bw = Math.cos(halfAngle);\n        newDst[0] = qx * bw + qy * bz;\n        newDst[1] = qy * bw - qx * bz;\n        newDst[2] = qz * bw + qw * bz;\n        newDst[3] = qw * bw - qz * bz;\n        return newDst;\n    }\n    /**\n     * Spherically linear interpolate between two quaternions\n     *\n     * @param a - starting value\n     * @param b - ending value\n     * @param t - value where 0 = a and 1 = b\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function slerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const ax = a[0];\n        const ay = a[1];\n        const az = a[2];\n        const aw = a[3];\n        let bx = b[0];\n        let by = b[1];\n        let bz = b[2];\n        let bw = b[3];\n        let cosOmega = ax * bx + ay * by + az * bz + aw * bw;\n        if (cosOmega < 0) {\n            cosOmega = -cosOmega;\n            bx = -bx;\n            by = -by;\n            bz = -bz;\n            bw = -bw;\n        }\n        let scale0;\n        let scale1;\n        if (1.0 - cosOmega > EPSILON) {\n            const omega = Math.acos(cosOmega);\n            const sinOmega = Math.sin(omega);\n            scale0 = Math.sin((1 - t) * omega) / sinOmega;\n            scale1 = Math.sin(t * omega) / sinOmega;\n        }\n        else {\n            scale0 = 1.0 - t;\n            scale1 = t;\n        }\n        newDst[0] = scale0 * ax + scale1 * bx;\n        newDst[1] = scale0 * ay + scale1 * by;\n        newDst[2] = scale0 * az + scale1 * bz;\n        newDst[3] = scale0 * aw + scale1 * bw;\n        return newDst;\n    }\n    /**\n     * Compute the inverse of a quaternion\n     *\n     * @param q - quaternion to compute the inverse of\n     * @returns A quaternion that is the result of a * b\n     */\n    function inverse(q, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const a0 = q[0];\n        const a1 = q[1];\n        const a2 = q[2];\n        const a3 = q[3];\n        const dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n        const invDot = dot ? 1 / dot : 0;\n        newDst[0] = -a0 * invDot;\n        newDst[1] = -a1 * invDot;\n        newDst[2] = -a2 * invDot;\n        newDst[3] = a3 * invDot;\n        return newDst;\n    }\n    /**\n     * Compute the conjugate of a quaternion\n     * For quaternions with a magnitude of 1 (a unit quaternion)\n     * this returns the same as the inverse but is faster to calculate.\n     *\n     * @param q - quaternion to compute the conjugate of.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The conjugate of q\n     */\n    function conjugate(q, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = -q[0];\n        newDst[1] = -q[1];\n        newDst[2] = -q[2];\n        newDst[3] = q[3];\n        return newDst;\n    }\n    /**\n     * Creates a quaternion from the given rotation matrix.\n     *\n     * The created quaternion is not normalized.\n     *\n     * @param m - rotation matrix\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns the result\n     */\n    function fromMat(m, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        /*\n        0 1 2\n        3 4 5\n        6 7 8\n      \n        0 1 2\n        4 5 6\n        8 9 10\n         */\n        // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n        // article \"Quaternion Calculus and Fast Animation\".\n        const trace = m[0] + m[5] + m[10];\n        if (trace > 0.0) {\n            // |w| > 1/2, may as well choose w > 1/2\n            const root = Math.sqrt(trace + 1); // 2w\n            newDst[3] = 0.5 * root;\n            const invRoot = 0.5 / root; // 1/(4w)\n            newDst[0] = (m[6] - m[9]) * invRoot;\n            newDst[1] = (m[8] - m[2]) * invRoot;\n            newDst[2] = (m[1] - m[4]) * invRoot;\n        }\n        else {\n            // |w| <= 1/2\n            let i = 0;\n            if (m[5] > m[0]) {\n                i = 1;\n            }\n            if (m[10] > m[i * 4 + i]) {\n                i = 2;\n            }\n            const j = (i + 1) % 3;\n            const k = (i + 2) % 3;\n            const root = Math.sqrt(m[i * 4 + i] - m[j * 4 + j] - m[k * 4 + k] + 1.0);\n            newDst[i] = 0.5 * root;\n            const invRoot = 0.5 / root;\n            newDst[3] = (m[j * 4 + k] - m[k * 4 + j]) * invRoot;\n            newDst[j] = (m[j * 4 + i] + m[i * 4 + j]) * invRoot;\n            newDst[k] = (m[k * 4 + i] + m[i * 4 + k]) * invRoot;\n        }\n        return newDst;\n    }\n    /**\n     * Creates a quaternion from the given euler angle x, y, z using the provided intrinsic order for the conversion.\n     *\n     * @param xAngleInRadians - angle to rotate around X axis in radians.\n     * @param yAngleInRadians - angle to rotate around Y axis in radians.\n     * @param zAngleInRadians - angle to rotate around Z axis in radians.\n     * @param order - order to apply euler angles\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion representing the same rotation as the euler angles applied in the given order\n     */\n    function fromEuler(xAngleInRadians, yAngleInRadians, zAngleInRadians, order, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const xHalfAngle = xAngleInRadians * 0.5;\n        const yHalfAngle = yAngleInRadians * 0.5;\n        const zHalfAngle = zAngleInRadians * 0.5;\n        const sx = Math.sin(xHalfAngle);\n        const cx = Math.cos(xHalfAngle);\n        const sy = Math.sin(yHalfAngle);\n        const cy = Math.cos(yHalfAngle);\n        const sz = Math.sin(zHalfAngle);\n        const cz = Math.cos(zHalfAngle);\n        switch (order) {\n            case 'xyz':\n                newDst[0] = sx * cy * cz + cx * sy * sz;\n                newDst[1] = cx * sy * cz - sx * cy * sz;\n                newDst[2] = cx * cy * sz + sx * sy * cz;\n                newDst[3] = cx * cy * cz - sx * sy * sz;\n                break;\n            case 'xzy':\n                newDst[0] = sx * cy * cz - cx * sy * sz;\n                newDst[1] = cx * sy * cz - sx * cy * sz;\n                newDst[2] = cx * cy * sz + sx * sy * cz;\n                newDst[3] = cx * cy * cz + sx * sy * sz;\n                break;\n            case 'yxz':\n                newDst[0] = sx * cy * cz + cx * sy * sz;\n                newDst[1] = cx * sy * cz - sx * cy * sz;\n                newDst[2] = cx * cy * sz - sx * sy * cz;\n                newDst[3] = cx * cy * cz + sx * sy * sz;\n                break;\n            case 'yzx':\n                newDst[0] = sx * cy * cz + cx * sy * sz;\n                newDst[1] = cx * sy * cz + sx * cy * sz;\n                newDst[2] = cx * cy * sz - sx * sy * cz;\n                newDst[3] = cx * cy * cz - sx * sy * sz;\n                break;\n            case 'zxy':\n                newDst[0] = sx * cy * cz - cx * sy * sz;\n                newDst[1] = cx * sy * cz + sx * cy * sz;\n                newDst[2] = cx * cy * sz + sx * sy * cz;\n                newDst[3] = cx * cy * cz - sx * sy * sz;\n                break;\n            case 'zyx':\n                newDst[0] = sx * cy * cz - cx * sy * sz;\n                newDst[1] = cx * sy * cz + sx * cy * sz;\n                newDst[2] = cx * cy * sz - sx * sy * cz;\n                newDst[3] = cx * cy * cz + sx * sy * sz;\n                break;\n            default:\n                throw new Error(`Unknown rotation order: ${order}`);\n        }\n        return newDst;\n    }\n    /**\n     * Copies a quaternion. (same as {@link quat.clone})\n     * Also see {@link quat.create} and {@link quat.set}\n     * @param q - The quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is a copy of q\n     */\n    function copy(q, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = q[0];\n        newDst[1] = q[1];\n        newDst[2] = q[2];\n        newDst[3] = q[3];\n        return newDst;\n    }\n    /**\n     * Clones a quaternion. (same as {@link quat.copy})\n     * Also see {@link quat.create} and {@link quat.set}\n     * @param q - The quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A copy of q.\n     */\n    const clone = copy;\n    /**\n     * Adds two quaternions; assumes a and b have the same dimension.\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the sum of a and b.\n     */\n    function add(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + b[0];\n        newDst[1] = a[1] + b[1];\n        newDst[2] = a[2] + b[2];\n        newDst[3] = a[3] + b[3];\n        return newDst;\n    }\n    /**\n     * Subtracts two quaternions.\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the difference of a and b.\n     */\n    function subtract(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] - b[0];\n        newDst[1] = a[1] - b[1];\n        newDst[2] = a[2] - b[2];\n        newDst[3] = a[3] - b[3];\n        return newDst;\n    }\n    /**\n     * Subtracts two quaternions.\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the difference of a and b.\n     */\n    const sub = subtract;\n    /**\n     * Multiplies a quaternion by a scalar.\n     * @param v - The quaternion.\n     * @param k - The scalar.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The scaled quaternion.\n     */\n    function mulScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0] * k;\n        newDst[1] = v[1] * k;\n        newDst[2] = v[2] * k;\n        newDst[3] = v[3] * k;\n        return newDst;\n    }\n    /**\n     * Multiplies a quaternion by a scalar. (same as mulScalar)\n     * @param v - The quaternion.\n     * @param k - The scalar.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The scaled quaternion.\n     */\n    const scale = mulScalar;\n    /**\n     * Divides a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The scaled quaternion.\n     */\n    function divScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0] / k;\n        newDst[1] = v[1] / k;\n        newDst[2] = v[2] / k;\n        newDst[3] = v[3] / k;\n        return newDst;\n    }\n    /**\n     * Computes the dot product of two quaternions\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @returns dot product\n     */\n    function dot(a, b) {\n        return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]) + (a[3] * b[3]);\n    }\n    /**\n     * Performs linear interpolation on two quaternions.\n     * Given quaternions a and b and interpolation coefficient t, returns\n     * a + t * (b - a).\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @param t - Interpolation coefficient.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The linear interpolated result.\n     */\n    function lerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + t * (b[0] - a[0]);\n        newDst[1] = a[1] + t * (b[1] - a[1]);\n        newDst[2] = a[2] + t * (b[2] - a[2]);\n        newDst[3] = a[3] + t * (b[3] - a[3]);\n        return newDst;\n    }\n    /**\n     * Computes the length of quaternion\n     * @param v - quaternion.\n     * @returns length of quaternion.\n     */\n    function length(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n    }\n    /**\n     * Computes the length of quaternion (same as length)\n     * @param v - quaternion.\n     * @returns length of quaternion.\n     */\n    const len = length;\n    /**\n     * Computes the square of the length of quaternion\n     * @param v - quaternion.\n     * @returns square of the length of quaternion.\n     */\n    function lengthSq(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        return v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3;\n    }\n    /**\n     * Computes the square of the length of quaternion (same as lengthSq)\n     * @param v - quaternion.\n     * @returns square of the length of quaternion.\n     */\n    const lenSq = lengthSq;\n    /**\n     * Divides a quaternion by its Euclidean length and returns the quotient.\n     * @param v - The quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The normalized quaternion.\n     */\n    function normalize(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n        if (len > 0.00001) {\n            newDst[0] = v0 / len;\n            newDst[1] = v1 / len;\n            newDst[2] = v2 / len;\n            newDst[3] = v3 / len;\n        }\n        else {\n            newDst[0] = 0;\n            newDst[1] = 0;\n            newDst[2] = 0;\n            newDst[3] = 1;\n        }\n        return newDst;\n    }\n    /**\n     * Check if 2 quaternions are approximately equal\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @returns true if quaternions are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON &&\n            Math.abs(a[3] - b[3]) < EPSILON;\n    }\n    /**\n     * Check if 2 quaternions are exactly equal\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @returns true if quaternions are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n    }\n    /**\n     * Creates an identity quaternion\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns an identity quaternion\n     */\n    function identity(dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = 0;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 1;\n        return newDst;\n    }\n    const tempVec3 = vec3.create();\n    const xUnitVec3 = vec3.create();\n    const yUnitVec3 = vec3.create();\n    /**\n     * Computes a quaternion to represent the shortest rotation from one vector to another.\n     *\n     * @param aUnit - the start vector\n     * @param bUnit - the end vector\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns the result\n     */\n    function rotationTo(aUnit, bUnit, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const dot = vec3.dot(aUnit, bUnit);\n        if (dot < -0.999999) {\n            vec3.cross(xUnitVec3, aUnit, tempVec3);\n            if (vec3.len(tempVec3) < 0.000001) {\n                vec3.cross(yUnitVec3, aUnit, tempVec3);\n            }\n            vec3.normalize(tempVec3, tempVec3);\n            fromAxisAngle(tempVec3, Math.PI, newDst);\n            return newDst;\n        }\n        else if (dot > 0.999999) {\n            newDst[0] = 0;\n            newDst[1] = 0;\n            newDst[2] = 0;\n            newDst[3] = 1;\n            return newDst;\n        }\n        else {\n            vec3.cross(aUnit, bUnit, tempVec3);\n            newDst[0] = tempVec3[0];\n            newDst[1] = tempVec3[1];\n            newDst[2] = tempVec3[2];\n            newDst[3] = 1 + dot;\n            return normalize(newDst, newDst);\n        }\n    }\n    const tempQuat1 = new Ctor(4);\n    const tempQuat2 = new Ctor(4);\n    /**\n     * Performs a spherical linear interpolation with two control points\n     *\n     * @param a - the first quaternion\n     * @param b - the second quaternion\n     * @param c - the third quaternion\n     * @param d - the fourth quaternion\n     * @param t - Interpolation coefficient 0 to 1\n     * @returns result\n     */\n    function sqlerp(a, b, c, d, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        slerp(a, d, t, tempQuat1);\n        slerp(b, c, t, tempQuat2);\n        slerp(tempQuat1, tempQuat2, 2 * t * (1 - t), newDst);\n        return newDst;\n    }\n    return {\n        create,\n        fromValues,\n        set,\n        fromAxisAngle,\n        toAxisAngle,\n        angle,\n        multiply,\n        mul,\n        rotateX,\n        rotateY,\n        rotateZ,\n        slerp,\n        inverse,\n        conjugate,\n        fromMat,\n        fromEuler,\n        copy,\n        clone,\n        add,\n        subtract,\n        sub,\n        mulScalar,\n        scale,\n        divScalar,\n        dot,\n        lerp,\n        length,\n        len,\n        lengthSq,\n        lenSq,\n        normalize,\n        equalsApproximately,\n        equals,\n        identity,\n        rotationTo,\n        sqlerp,\n    };\n}\nconst cache$1 = new Map();\n/**\n *\n * Quat4 math functions.\n *\n * Almost all functions take an optional `newDst` argument. If it is not passed in the\n * functions will create a new `Quat4`. In other words you can do this\n *\n *     const v = quat4.cross(v1, v2);  // Creates a new Quat4 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = quat4.create();\n *     quat4.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     quat4.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\nfunction getAPI$1(Ctor) {\n    let api = cache$1.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$1(Ctor);\n        cache$1.set(Ctor, api);\n    }\n    return api;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates am typed API for Vec4\n * */\nfunction getAPIImpl(Ctor) {\n    /**\n     * Creates a vec4; may be called with x, y, z to set initial values.\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @param w - Initial w value.\n     * @returns the created vector\n     */\n    function create(x, y, z, w) {\n        const newDst = new Ctor(4);\n        if (x !== undefined) {\n            newDst[0] = x;\n            if (y !== undefined) {\n                newDst[1] = y;\n                if (z !== undefined) {\n                    newDst[2] = z;\n                    if (w !== undefined) {\n                        newDst[3] = w;\n                    }\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Creates a vec4; may be called with x, y, z to set initial values. (same as create)\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @param z - Initial w value.\n     * @returns the created vector\n     */\n    const fromValues = create;\n    /**\n     * Sets the values of a Vec4\n     * Also see {@link vec4.create} and {@link vec4.copy}\n     *\n     * @param x first value\n     * @param y second value\n     * @param z third value\n     * @param w fourth value\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector with its elements set.\n     */\n    function set(x, y, z, w, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = x;\n        newDst[1] = y;\n        newDst[2] = z;\n        newDst[3] = w;\n        return newDst;\n    }\n    /**\n     * Applies Math.ceil to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the ceil of each element of v.\n     */\n    function ceil(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.ceil(v[0]);\n        newDst[1] = Math.ceil(v[1]);\n        newDst[2] = Math.ceil(v[2]);\n        newDst[3] = Math.ceil(v[3]);\n        return newDst;\n    }\n    /**\n     * Applies Math.floor to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the floor of each element of v.\n     */\n    function floor(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.floor(v[0]);\n        newDst[1] = Math.floor(v[1]);\n        newDst[2] = Math.floor(v[2]);\n        newDst[3] = Math.floor(v[3]);\n        return newDst;\n    }\n    /**\n     * Applies Math.round to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the round of each element of v.\n     */\n    function round(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.round(v[0]);\n        newDst[1] = Math.round(v[1]);\n        newDst[2] = Math.round(v[2]);\n        newDst[3] = Math.round(v[3]);\n        return newDst;\n    }\n    /**\n     * Clamp each element of vector between min and max\n     * @param v - Operand vector.\n     * @param max - Min value, default 0\n     * @param min - Max value, default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that the clamped value of each element of v.\n     */\n    function clamp(v, min = 0, max = 1, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.min(max, Math.max(min, v[0]));\n        newDst[1] = Math.min(max, Math.max(min, v[1]));\n        newDst[2] = Math.min(max, Math.max(min, v[2]));\n        newDst[3] = Math.min(max, Math.max(min, v[3]));\n        return newDst;\n    }\n    /**\n     * Adds two vectors; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a and b.\n     */\n    function add(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + b[0];\n        newDst[1] = a[1] + b[1];\n        newDst[2] = a[2] + b[2];\n        newDst[3] = a[3] + b[3];\n        return newDst;\n    }\n    /**\n     * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param scale - Amount to scale b\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a + b * scale.\n     */\n    function addScaled(a, b, scale, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + b[0] * scale;\n        newDst[1] = a[1] + b[1] * scale;\n        newDst[2] = a[2] + b[2] * scale;\n        newDst[3] = a[3] + b[3] * scale;\n        return newDst;\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    function subtract(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] - b[0];\n        newDst[1] = a[1] - b[1];\n        newDst[2] = a[2] - b[2];\n        newDst[3] = a[3] - b[3];\n        return newDst;\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    const sub = subtract;\n    /**\n     * Check if 2 vectors are approximately equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON &&\n            Math.abs(a[3] - b[3]) < EPSILON;\n    }\n    /**\n     * Check if 2 vectors are exactly equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficient.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The linear interpolated result.\n     */\n    function lerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + t * (b[0] - a[0]);\n        newDst[1] = a[1] + t * (b[1] - a[1]);\n        newDst[2] = a[2] + t * (b[2] - a[2]);\n        newDst[3] = a[3] + t * (b[3] - a[3]);\n        return newDst;\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient vector t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficients vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns the linear interpolated result.\n     */\n    function lerpV(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + t[0] * (b[0] - a[0]);\n        newDst[1] = a[1] + t[1] * (b[1] - a[1]);\n        newDst[2] = a[2] + t[2] * (b[2] - a[2]);\n        newDst[3] = a[3] + t[3] * (b[3] - a[3]);\n        return newDst;\n    }\n    /**\n     * Return max values of two vectors.\n     * Given vectors a and b returns\n     * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The max components vector.\n     */\n    function max(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.max(a[0], b[0]);\n        newDst[1] = Math.max(a[1], b[1]);\n        newDst[2] = Math.max(a[2], b[2]);\n        newDst[3] = Math.max(a[3], b[3]);\n        return newDst;\n    }\n    /**\n     * Return min values of two vectors.\n     * Given vectors a and b returns\n     * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The min components vector.\n     */\n    function min(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.min(a[0], b[0]);\n        newDst[1] = Math.min(a[1], b[1]);\n        newDst[2] = Math.min(a[2], b[2]);\n        newDst[3] = Math.min(a[3], b[3]);\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function mulScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0] * k;\n        newDst[1] = v[1] * k;\n        newDst[2] = v[2] * k;\n        newDst[3] = v[3] * k;\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar. (same as mulScalar)\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    const scale = mulScalar;\n    /**\n     * Divides a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function divScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0] / k;\n        newDst[1] = v[1] / k;\n        newDst[2] = v[2] / k;\n        newDst[3] = v[3] / k;\n        return newDst;\n    }\n    /**\n     * Inverse a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    function inverse(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = 1 / v[0];\n        newDst[1] = 1 / v[1];\n        newDst[2] = 1 / v[2];\n        newDst[3] = 1 / v[3];\n        return newDst;\n    }\n    /**\n     * Invert a vector. (same as inverse)\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    const invert = inverse;\n    /**\n     * Computes the dot product of two vectors\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns dot product\n     */\n    function dot(a, b) {\n        return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]) + (a[3] * b[3]);\n    }\n    /**\n     * Computes the length of vector\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    function length(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n    }\n    /**\n     * Computes the length of vector (same as length)\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    const len = length;\n    /**\n     * Computes the square of the length of vector\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    function lengthSq(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        return v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3;\n    }\n    /**\n     * Computes the square of the length of vector (same as lengthSq)\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    const lenSq = lengthSq;\n    /**\n     * Computes the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    function distance(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        const dz = a[2] - b[2];\n        const dw = a[3] - b[3];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz + dw * dw);\n    }\n    /**\n     * Computes the distance between 2 points (same as distance)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    const dist = distance;\n    /**\n     * Computes the square of the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    function distanceSq(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        const dz = a[2] - b[2];\n        const dw = a[3] - b[3];\n        return dx * dx + dy * dy + dz * dz + dw * dw;\n    }\n    /**\n     * Computes the square of the distance between 2 points (same as distanceSq)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    const distSq = distanceSq;\n    /**\n     * Divides a vector by its Euclidean length and returns the quotient.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The normalized vector.\n     */\n    function normalize(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n        if (len > 0.00001) {\n            newDst[0] = v0 / len;\n            newDst[1] = v1 / len;\n            newDst[2] = v2 / len;\n            newDst[3] = v3 / len;\n        }\n        else {\n            newDst[0] = 0;\n            newDst[1] = 0;\n            newDst[2] = 0;\n            newDst[3] = 0;\n        }\n        return newDst;\n    }\n    /**\n     * Negates a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns -v.\n     */\n    function negate(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = -v[0];\n        newDst[1] = -v[1];\n        newDst[2] = -v[2];\n        newDst[3] = -v[3];\n        return newDst;\n    }\n    /**\n     * Copies a vector. (same as {@link vec4.clone})\n     * Also see {@link vec4.create} and {@link vec4.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    function copy(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0];\n        newDst[1] = v[1];\n        newDst[2] = v[2];\n        newDst[3] = v[3];\n        return newDst;\n    }\n    /**\n     * Clones a vector. (same as {@link vec4.copy})\n     * Also see {@link vec4.create} and {@link vec4.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    const clone = copy;\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] * b[0];\n        newDst[1] = a[1] * b[1];\n        newDst[2] = a[2] * b[2];\n        newDst[3] = a[3] * b[3];\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as mul)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    function divide(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] / b[0];\n        newDst[1] = a[1] / b[1];\n        newDst[2] = a[2] / b[2];\n        newDst[3] = a[3] / b[3];\n        return newDst;\n    }\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as divide)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    const div = divide;\n    /**\n     * Zero's a vector\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The zeroed vector.\n     */\n    function zero(dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = 0;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        return newDst;\n    }\n    /**\n     * transform vec4 by 4x4 matrix\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional vec4 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat4(v, m, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const x = v[0];\n        const y = v[1];\n        const z = v[2];\n        const w = v[3];\n        newDst[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n        newDst[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n        newDst[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n        newDst[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n        return newDst;\n    }\n    /**\n     * Treat a 4D vector as a direction and set it's length\n     *\n     * @param a The vec4 to lengthen\n     * @param len The length of the resulting vector\n     * @returns The lengthened vector\n     */\n    function setLength(a, len, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        normalize(a, newDst);\n        return mulScalar(newDst, len, newDst);\n    }\n    /**\n     * Ensure a vector is not longer than a max length\n     *\n     * @param a The vec4 to limit\n     * @param maxLen The longest length of the resulting vector\n     * @returns The vector, shortened to maxLen if it's too long\n     */\n    function truncate(a, maxLen, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        if (length(a) > maxLen) {\n            return setLength(a, maxLen, newDst);\n        }\n        return copy(a, newDst);\n    }\n    /**\n     * Return the vector exactly between 2 endpoint vectors\n     *\n     * @param a Endpoint 1\n     * @param b Endpoint 2\n     * @returns The vector exactly residing between endpoints 1 and 2\n     */\n    function midpoint(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        return lerp(a, b, 0.5, newDst);\n    }\n    return {\n        create,\n        fromValues,\n        set,\n        ceil,\n        floor,\n        round,\n        clamp,\n        add,\n        addScaled,\n        subtract,\n        sub,\n        equalsApproximately,\n        equals,\n        lerp,\n        lerpV,\n        max,\n        min,\n        mulScalar,\n        scale,\n        divScalar,\n        inverse,\n        invert,\n        dot,\n        length,\n        len,\n        lengthSq,\n        lenSq,\n        distance,\n        dist,\n        distanceSq,\n        distSq,\n        normalize,\n        negate,\n        copy,\n        clone,\n        multiply,\n        mul,\n        divide,\n        div,\n        zero,\n        transformMat4,\n        setLength,\n        truncate,\n        midpoint,\n    };\n}\nconst cache = new Map();\n/**\n *\n * Vec4 math functions.\n *\n * Almost all functions take an optional `newDst` argument. If it is not passed in the\n * functions will create a new `Vec4`. In other words you can do this\n *\n *     const v = vec4.cross(v1, v2);  // Creates a new Vec4 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = vec4.create();\n *     vec4.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     vec4.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\nfunction getAPI(Ctor) {\n    let api = cache.get(Ctor);\n    if (!api) {\n        api = getAPIImpl(Ctor);\n        cache.set(Ctor, api);\n    }\n    return api;\n}\n\n/**\n * Some docs\n * @namespace wgpu-matrix\n */\n/**\n * Generate wgpu-matrix API for type\n */\nfunction wgpuMatrixAPI(Mat3Ctor, Mat4Ctor, QuatCtor, Vec2Ctor, Vec3Ctor, Vec4Ctor) {\n    return {\n        /** @namespace mat3 */\n        mat3: getAPI$3(Mat3Ctor),\n        /** @namespace mat4 */\n        mat4: getAPI$2(Mat4Ctor),\n        /** @namespace quat */\n        quat: getAPI$1(QuatCtor),\n        /** @namespace vec2 */\n        vec2: getAPI$5(Vec2Ctor),\n        /** @namespace vec3 */\n        vec3: getAPI$4(Vec3Ctor),\n        /** @namespace vec4 */\n        vec4: getAPI(Vec4Ctor),\n    };\n}\nconst { \n/**\n * 3x3 Matrix functions that default to returning `Float32Array`\n * @namespace\n */\nmat3, \n/**\n * 4x4 Matrix functions that default to returning `Float32Array`\n * @namespace\n */\nmat4, \n/**\n * Quaternion functions that default to returning `Float32Array`\n * @namespace\n */\nquat, \n/**\n * Vec2 functions that default to returning `Float32Array`\n * @namespace\n */\nvec2, \n/**\n * Vec3 functions that default to returning `Float32Array`\n * @namespace\n */\nvec3, \n/**\n * Vec3 functions that default to returning `Float32Array`\n * @namespace\n */\nvec4, } = wgpuMatrixAPI(Float32Array, Float32Array, Float32Array, Float32Array, Float32Array, Float32Array);\nconst { \n/**\n * 3x3 Matrix functions that default to returning `Float64Array`\n * @namespace\n */\nmat3: mat3d, \n/**\n * 4x4 Matrix functions that default to returning `Float64Array`\n * @namespace\n */\nmat4: mat4d, \n/**\n * Quaternion functions that default to returning `Float64Array`\n * @namespace\n */\nquat: quatd, \n/**\n * Vec2 functions that default to returning `Float64Array`\n * @namespace\n */\nvec2: vec2d, \n/**\n * Vec3 functions that default to returning `Float64Array`\n * @namespace\n */\nvec3: vec3d, \n/**\n * Vec3 functions that default to returning `Float64Array`\n * @namespace\n */\nvec4: vec4d, } = wgpuMatrixAPI(Float64Array, Float64Array, Float64Array, Float64Array, Float64Array, Float64Array);\nconst { \n/**\n * 3x3 Matrix functions that default to returning `number[]`\n * @namespace\n */\nmat3: mat3n, \n/**\n * 4x4 Matrix functions that default to returning `number[]`\n * @namespace\n */\nmat4: mat4n, \n/**\n * Quaternion functions that default to returning `number[]`\n * @namespace\n */\nquat: quatn, \n/**\n * Vec2 functions that default to returning `number[]`\n * @namespace\n */\nvec2: vec2n, \n/**\n * Vec3 functions that default to returning `number[]`\n * @namespace\n */\nvec3: vec3n, \n/**\n * Vec3 functions that default to returning `number[]`\n * @namespace\n */\nvec4: vec4n, } = wgpuMatrixAPI(ZeroArray, Array, Array, Array, Array, Array);\n\nexport { mat3, mat3d, mat3n, mat4, mat4d, mat4n, quat, quatd, quatn, utils, vec2, vec2d, vec2n, vec3, vec3d, vec3n, vec4, vec4d, vec4n };\n//# sourceMappingURL=wgpu-matrix.module.js.map\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\nvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\nvar resolveQueue = (queue) => {\n\tif(queue && queue.d < 1) {\n\t\tqueue.d = 1;\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\t\tif(dep[webpackQueues]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tqueue.d = 0;\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tresolveQueue(queue);\n\t\t\t}, (e) => {\n\t\t\t\tobj[webpackError] = e;\n\t\t\t\tresolveQueue(queue);\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\tret[webpackQueues] = x => {};\n\tret[webpackExports] = dep;\n\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue;\n\thasAwait && ((queue = []).d = -1);\n\tvar depQueues = new Set();\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = resolve;\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\n\tmodule.exports = promise;\n\tbody((deps) => {\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn;\n\t\tvar getResult = () => (currentDeps.map((d) => {\n\t\t\tif(d[webpackError]) throw d[webpackError];\n\t\t\treturn d[webpackExports];\n\t\t}))\n\t\tvar promise = new Promise((resolve) => {\n\t\t\tfn = () => (resolve(getResult));\n\t\t\tfn.r = 0;\n\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\n\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\n\t\t});\n\t\treturn fn.r ? promise : getResult();\n\t}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));\n\tqueue && queue.d < 0 && (queue.d = 0);\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./main.ts\");\n",""],"names":[],"sourceRoot":""}